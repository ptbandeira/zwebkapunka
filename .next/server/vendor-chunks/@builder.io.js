"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@builder.io";
exports.ids = ["vendor-chunks/@builder.io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@builder.io/react/dist/builder-react.es5.js":
/*!******************************************************************!*\
  !*** ./node_modules/@builder.io/react/dist/builder-react.es5.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Builder: () => (/* reexport safe */ _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder),\n/* harmony export */   BuilderAsyncRequestsContext: () => (/* binding */ BuilderAsyncRequestsContext),\n/* harmony export */   BuilderBlock: () => (/* binding */ BuilderBlock),\n/* harmony export */   BuilderBlockComponent: () => (/* binding */ BuilderBlock$1),\n/* harmony export */   BuilderBlocks: () => (/* binding */ BuilderBlocks),\n/* harmony export */   BuilderComponent: () => (/* binding */ BuilderComponent),\n/* harmony export */   BuilderContent: () => (/* binding */ BuilderContent),\n/* harmony export */   BuilderMetaContext: () => (/* binding */ BuilderMetaContext),\n/* harmony export */   BuilderPage: () => (/* binding */ BuilderComponent),\n/* harmony export */   BuilderStoreContext: () => (/* binding */ BuilderStoreContext),\n/* harmony export */   Button: () => (/* binding */ Button),\n/* harmony export */   Columns: () => (/* binding */ Columns),\n/* harmony export */   Content: () => (/* binding */ BuilderComponent),\n/* harmony export */   CustomCode: () => (/* binding */ CustomCode),\n/* harmony export */   Dropzone: () => (/* binding */ Slot),\n/* harmony export */   Embed: () => (/* binding */ Embed),\n/* harmony export */   Form: () => (/* binding */ Form),\n/* harmony export */   FormInput: () => (/* binding */ FormInput),\n/* harmony export */   FormSelect: () => (/* binding */ FormSelect),\n/* harmony export */   FormSubmitButton: () => (/* binding */ FormSubmitButton),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   Img: () => (/* binding */ Img),\n/* harmony export */   Label: () => (/* binding */ Label),\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   PersonalizationContainer: () => (/* binding */ PersonalizationContainer),\n/* harmony export */   RawText: () => (/* binding */ RawText),\n/* harmony export */   Router: () => (/* binding */ Router),\n/* harmony export */   Section: () => (/* binding */ Section),\n/* harmony export */   StateProvider: () => (/* binding */ StateProvider),\n/* harmony export */   Symbol: () => (/* binding */ Symbol$1),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TextArea: () => (/* binding */ TextArea),\n/* harmony export */   Video: () => (/* binding */ Video),\n/* harmony export */   builder: () => (/* reexport safe */ _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder),\n/* harmony export */   \"default\": () => (/* reexport safe */ _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder),\n/* harmony export */   getSrcSet: () => (/* binding */ getSrcSet),\n/* harmony export */   noWrap: () => (/* binding */ noWrap),\n/* harmony export */   onChange: () => (/* binding */ onChange),\n/* harmony export */   stringToFunction: () => (/* binding */ stringToFunction),\n/* harmony export */   updateMetadata: () => (/* binding */ updateMetadata),\n/* harmony export */   useIsPreviewing: () => (/* binding */ useIsPreviewing),\n/* harmony export */   withBuilder: () => (/* binding */ withBuilder),\n/* harmony export */   withChildren: () => (/* binding */ withChildren)\n/* harmony export */ });\n/* harmony import */ var _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @builder.io/sdk */ \"(ssr)/./node_modules/@builder.io/sdk/dist/index.esm.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/core */ \"(ssr)/./node_modules/@emotion/core/dist/core.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hash-sum */ \"(ssr)/./node_modules/hash-sum/hash-sum.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(hash_sum__WEBPACK_IMPORTED_MODULE_4__);\nvar SDK_VERSION=\"8.2.6\",_a;\"undefined\"!=typeof window&&(null===(_a=window.parent)||void 0===_a||_a.postMessage({type:\"builder.isReactSdk\",data:{value:!0,supportsPatchUpdates:\"v4\",supportsCustomBreakpoints:!0,supportsXSmallBreakpoint:!0,supportsGlobalSymbols:!0,blockLevelPersonalization:!0,version:SDK_VERSION}},\"*\"));var extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function __extends(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var __assign=function(){return(__assign=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function __rest(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n}function __decorate(e,t,n,i){var r,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(o<3?r(a):o>3?r(t,n,a):r(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function __metadata(e,t){if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function __awaiter(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))}function __generator(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError(\"Generator is already executing.\");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,i&&(r=2&s[0]?i.return:s[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,s[1])).done)return r;switch(i=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,i=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){a.label=s[1];break}if(6===s[0]&&a.label<r[1]){a.label=r[1],r=s;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(s);break}r[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],i=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}function __spreadArray(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}\"function\"==typeof SuppressedError&&SuppressedError;var fastClone=function(e){return JSON.parse(JSON.stringify(e))},omit$2=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var i=Object.assign({},e),r=0,o=t;r<o.length;r++){var a=o[r];delete i[a]}return i},sizeNames=[\"xsmall\",\"small\",\"medium\",\"large\"],sizes={xsmall:{min:0,default:160,max:320},small:{min:321,default:321,max:640},medium:{min:641,default:642,max:991},large:{min:990,default:991,max:1200},getWidthForSize:function(e){return this[e].default},getSizeForWidth:function(e){for(var t=0,n=sizeNames;t<n.length;t++){var i=n[t];if(e<=this[i].max)return i}return\"large\"}},getSizesForBreakpoints=function(e){var t=__assign(__assign({},sizes),fastClone(sizes));if(!e)return t;var n=e.xsmall,i=e.small,r=e.medium;if(n){var o=Math.floor(n/2);t.xsmall={max:n,min:o,default:o+1}}if(!i||!r)return t;var a=n?t.xsmall.max+1:Math.floor(i/2);t.small={max:i,min:a,default:a+1};var s=t.small.max+1;t.medium={max:r,min:s,default:s+1};var l=t.medium.max+1;return t.large={max:2e3,min:l,default:l+1},t},set=function(e,t,n){if(Object(e)!==e)return e;var i=Array.isArray(t)?t:t.toString().match(/[^.[\\]]+/g);return i.slice(0,-1).reduce((function(e,t,n){return Object(e[t])===e[t]?e[t]:e[t]=Math.abs(Number(i[n+1]))>>0==+i[n+1]?[]:{}}),e)[i[i.length-1]]=n,e},noop=function(){return null},safeDynamicRequire;if(\"function\"==typeof(null===globalThis||void 0===globalThis?void 0:globalThis.require)||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer&&\"function\"==\"function\")try{safeDynamicRequire=eval(\"require\")}catch(e){safeDynamicRequire=(null===globalThis||void 0===globalThis?void 0:globalThis.require)?globalThis.require:noop}function isDebug(){return Boolean(\"undefined\"!=typeof process&&void 0!==process.env&&process.env.DEBUG)}function isNodeRuntime(){var e;return\"undefined\"!=typeof process&&Boolean(null===(e=null===process||void 0===process?void 0:process.versions)||void 0===e?void 0:e.node)}null!=safeDynamicRequire||(safeDynamicRequire=noop);var shouldForceBrowserRuntimeInNode=function(){var e;if(!isNodeRuntime())return!1;var t=\"arm64\"===process.arch,n=process.version.startsWith(\"v20\"),i=null===(e=process.env.NODE_OPTIONS)||void 0===e?void 0:e.includes(\"--no-node-snapshot\");return!(!t||!n||i)&&(console.log(\"Skipping usage of `isolated-vm` to avoid crashes in Node v20 on an arm64 machine.\\n    If you would like to use the `isolated-vm` package on this machine, please provide the `NODE_OPTIONS=--no-node-snapshot` config to your Node process.\\n    See https://github.com/BuilderIO/builder/blob/main/packages/react/README.md#node-v20--m1-macs-apple-silicon-support for more information.\\n    \"),!0)},fnCache={},api=function(e){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder};function stringToFunction(e,t,n,i){if(void 0===t&&(t=!0),!e||!e.trim())return function(){};var r=e+\":\"+t;if(fnCache[r])return fnCache[r];var o=t&&!(e.includes(\";\")||e.includes(\" return \")||e.trim().startsWith(\"return \"))||e.trim().startsWith(\"builder.run\"),a=function(){};try{_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(a=new Function(\"state\",\"event\",\"block\",\"builder\",\"Device\",\"update\",\"Builder\",\"context\",\"\\n          var names = [\\n            'state',\\n            'event',\\n            'block',\\n            'builder',\\n            'Device',\\n            'update',\\n            'Builder',\\n            'context'\\n          ];\\n          var rootState = state;\\n          if (typeof Proxy !== 'undefined') {\\n            rootState = new Proxy(rootState, {\\n              set: function () {\\n                return false;\\n              },\\n              get: function (target, key) {\\n                if (names.includes(key)) {\\n                  return undefined;\\n                }\\n                return target[key];\\n              }\\n            });\\n          }\\n          /* Alias */\\n          var ctx = context;\\n          var log = console.log.bind(console);\\n          with (rootState) {\\n            \".concat(o?\"return (\".concat(e,\");\"):e,\";\\n          }\\n        \")))}catch(t){n&&n.push(t);var s=t&&t.message;s&&\"string\"==typeof s&&i&&-1===i.indexOf(s)&&i.push(s),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&console.warn(\"Function compile error in \".concat(e),t)}var l=function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];try{if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||shouldForceBrowserRuntimeInNode())return a.apply(void 0,t);var r=getIsolateContext(),s=safeDynamicRequire(\"isolated-vm\"),l=r.evalClosureSync(makeFn(e,o),t.map((function(e,t){return\"object\"==typeof e?new s.Reference(t===indexOfBuilderInstance?__assign(__assign({},e),{getUserAttributes:function(){return e.getUserAttributes(\"\")}}):e):null})));try{var u=JSON.parse(l);return u}catch(e){return l}}catch(t){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?console.warn(\"Builder custom code error:\",t.message||t,\"in\",e,t.stack||t):isDebug()&&console.debug(\"Builder custom code error:\",t.message||t,\"in\",e,t.stack||t),n&&n.push(t),null}};return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(fnCache[r]=l),l}var indexOfBuilderInstance=3,makeFn=function(e,t,n){var i=n||[\"state\",\"event\",\"block\",\"builder\",\"Device\",\"update\",\"Builder\",\"context\"];return\"\\n\".concat(\"\\n  var refToProxy = (obj) => {\\n    if (typeof obj !== 'object' || obj === null) {\\n      return obj;\\n    }\\n    return new Proxy({}, {\\n        get(target, key) {\\n            if (key === 'copySync') {\\n              return () => obj.copySync();\\n            }\\n            const val = obj.getSync(key);\\n            if (typeof val?.copySync === 'function') {\\n                return JSON.parse(stringify(val));\\n            }\\n            return val;\\n        },\\n        set(target, key, value) {\\n            obj.setSync(key, value);\\n        },\\n        deleteProperty(target, key) {\\n            obj.deleteSync(key);\\n        }\\n      })\\n  }\\n\",\"\\n\").concat(\"\\n    var stringify = (val) => {\\n      if (typeof val === 'object' && val !== null) {\\n        return JSON.stringify(val.copySync ? val.copySync() : val);\\n      }\\n      return val;\\n    }\\n  \",\"\\n\").concat(i.map((function(e,t){return\"var \".concat(e,\" = refToProxy($\").concat(t,\");\")})).join(\"\\n\")).concat(\"\\n\".concat(i.includes(\"context\")?\"var ctx = context;\":\"\",\"\\nvar endResult = function() {\\n  \").concat(t?\"return (\".concat(e,\");\"):e,\";\\n};\\n\\nreturn stringify(endResult());\\n\"))},getIsolateContext=function(){var e=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.serverContext;e||(e=new(safeDynamicRequire(\"isolated-vm\").Isolate)({memoryLimit:128}).createContextSync(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.setServerContext(e));var t=e.global;return t.setSync(\"global\",t.derefInto()),t.setSync(\"log\",(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];isDebug()&&console.log.apply(console,e)})),e},isPromise=function(e){return\"function\"==typeof e.then},isRequestInfo=function(e){return!isPromise(e)},BuilderAsyncRequestsContext=react__WEBPACK_IMPORTED_MODULE_2___default().createContext({requests:[],errors:[],logs:[]}),BuilderStoreContext=react__WEBPACK_IMPORTED_MODULE_2___default().createContext({state:{},rootState:{},content:{},context:{},update:function(e){return null}}),applyPatchWithMinimalMutationChain=function(e,t,n){if(void 0===n&&(n=!1),Object(e)!==e)return e;var i=t.path,r=t.op,o=t.value,a=i.split(/\\//);\"\"===a[0]&&a.shift();for(var s=n?e:__assign({},e),l=s,u=0;u<a.length;u++){var d=u===a.length-1,c=a[u];if(d){if(\"replace\"===r)l[c]=o;else if(\"add\"===r){var p=Number(c);Array.isArray(l)?\"-\"===c?l.push(o):l.splice(p,0,o):l[c]=o}else if(\"remove\"===r){p=Number(c);Array.isArray(l)?l.splice(p,1):delete l[c]}}else{var f=a[u+1],m=Object(l[c])===l[c]?l[c]:String(Number(f))===f?[]:{};l=l[c]=Array.isArray(m)?__spreadArray([],m,!0):__assign({},m)}}return s},htmlEscape=function(e){return e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\")},blockToHtmlString=function(e){var t;return\"<\".concat(htmlEscape(e.tagName||\"div\"),' \\n    class=\"builder-block ').concat(e.id,\" \").concat(e.class||\"\",'\"\\n    builder-id=\"').concat(e.id,'\"\\n  ').concat(Object.keys(e.properties||{}).map((function(t){return\"\".concat(htmlEscape(t),'=\"').concat(htmlEscape(e.properties[t]),'\"')})).join(\" \"),\"\\n  >\").concat(\"Text\"===(null===(t=null==e?void 0:e.component)||void 0===t?void 0:t.name)?e.component.options.text:e.children?e.children.map((function(e){return blockToHtmlString(e)})).join(\"\"):\"\",\"</\").concat(e.tagName||\"div\",\">\").replace(/\\s+/g,\" \")},Link=function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Consumer,null,(function(t){return t.renderLink?t.renderLink(e):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"a\",__assign({},e))}))};function traverse(e,t,n,i,r){void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=new WeakSet),null!=e&&\"object\"==typeof e?r.has(e)||(r.add(e),Array.isArray(e)?e.forEach((function(n,i){t(n,(function(t){e[i]=t})),traverse(n,t,e,i,r)})):Object.entries(e).forEach((function(n){var i=n[0],o=n[1];t(o,(function(t){e[i]=t})),traverse(o,t,e,i,r)}))):t(e,(function(e){null!==n&&null!==i&&(n[i]=e)}))}var isLocalizedField=function(e){return e&&\"object\"==typeof e&&\"@builder.io/core:LocalizedValue\"===e[\"@type\"]},containsLocalizedValues=function(e){if(!e||!Object.getOwnPropertyNames(e).length)return!1;var t=!1;return traverse(e,(function(e){isLocalizedField(e)&&(t=!0)})),t},extractLocalizedValues=function(e,t){return e&&Object.getOwnPropertyNames(e).length?(traverse(e,(function(e,n){var i;isLocalizedField(e)&&n(null!==(i=e[t])&&void 0!==i?i:void 0)})),e):{}},camelCaseToKebabCase=function(e){return e?e.replace(/([A-Z])/g,(function(e){return\"-\".concat(e[0].toLowerCase())})):\"\"},kebabCaseToCamelCase=function(e){return void 0===e&&(e=\"\"),e.replace(/-([a-z])/g,(function(e){return e[1].toUpperCase()}))},Device={desktop:0,tablet:1,mobile:2};function deepCloneWithConditions(e){if(null===e||\"object\"!=typeof e)return e;if(Array.isArray(e))return e.map((function(e){return deepCloneWithConditions(e)}));if(\"@builder.io/sdk:Element\"===e[\"@type\"])return e;var t={};for(var n in e)\"meta\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=deepCloneWithConditions(e[n]));return t}var voidElements=new Set([\"area\",\"base\",\"br\",\"col\",\"embed\",\"hr\",\"img\",\"input\",\"link\",\"meta\",\"param\",\"source\",\"track\",\"wbr\",\"textarea\"]),last=function(e){return e[e.length-1]};function omit$1(e,t){for(var n=Object.assign({},e),i=0,r=t;i<r.length;i++){delete n[r[i]]}return n}var cssCase=function(e){if(!e)return e;var t=camelCaseToKebabCase(e);return e[0]===e[0].toUpperCase()&&(t=\"-\"+t),t};function capitalize(e){if(e)return e[0].toUpperCase()+e.slice(1)}var BuilderBlock$1=function(_super){function BuilderBlock(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.hydrated=!1,_this.state={hasError:!1,updates:0},_this.privateState={state:{},rootState:{},context:{},update:function(){}},_this.onWindowMessage=function(event){var message=event.data;if(message)switch(message.type){case\"builder.selectionChange\":var data=message.data;if(!data)break;var selection=data.selection,id=_this.block&&_this.block.id;id&&Array.isArray(selection)&&selection.indexOf(id)>-1&&setTimeout((function(){window.$block=_this,window.$blocks||(window.$blocks=[]),window.$blocks.push(_this)}));break;case\"builder.patchUpdates\":var data=message.data;if(!data||!data.data)break;var patches=data.data[_this.block.id];if(!patches)return;location.href.includes(\"builder.debug=true\")&&eval(\"debugger\");for(var _i=0,patches_1=patches;_i<patches_1.length;_i++){var patch=patches_1[_i];applyPatchWithMinimalMutationChain(_this.props.block,patch,!0)}_this.setState({updates:_this.state.updates+1})}},_this}return __extends(BuilderBlock,_super),Object.defineProperty(BuilderBlock.prototype,\"store\",{get:function(){return this.privateState},enumerable:!1,configurable:!0}),BuilderBlock.getDerivedStateFromError=function(e){return{hasError:!0}},BuilderBlock.prototype.componentDidCatch=function(e,t){console.error(\"Builder block error:\",e,t)},BuilderBlock.prototype.stringToFunction=function(e,t){return void 0===t&&(t=!0),stringToFunction(e,t,this._errors,this._logs)},Object.defineProperty(BuilderBlock.prototype,\"block\",{get:function(){return this.props.block},enumerable:!1,configurable:!0}),BuilderBlock.prototype.emotionCss=function(e){var t,n,i,r,o,a,s,l,u=this.block,d=u.animations&&u.animations[0];if(d&&\"hover\"!==d.trigger){var c=d&&d.steps&&d.steps[0],p=c&&c.styles;p&&(l=p)}var f=sizeNames.slice().reverse(),m={};if(e)for(var h=Boolean(null===(i=null===(n=null===(t=this.privateState.context.builderContent)||void 0===t?void 0:t.meta)||void 0===n?void 0:n.breakpoints)||void 0===i?void 0:i.xsmall),v=0,g=f;v<g.length;v++){var b=g[v];if(h||\"xsmall\"!==b)if(\"large\"===b)this.props.emailMode||(m[\"&.builder-block\"]=Object.assign({},e[b],l));else{var y=getSizesForBreakpoints((null===(o=null===(r=this.privateState.context.builderContent)||void 0===r?void 0:r.meta)||void 0===o?void 0:o.breakpoints)||{});m[\"@media only screen and (max-width: \".concat(y[b].max,\"px)\")]={\"&.builder-block\":e[b]}}}var _=u.animations&&u.animations.find((function(e){return\"hover\"===e.trigger}));return _&&(m[\":hover\"]=(null===(s=null===(a=_.steps)||void 0===a?void 0:a[1])||void 0===s?void 0:s.styles)||{},m.transition=\"all \".concat(_.duration,\"s \").concat(camelCaseToKebabCase(_.easing)),_.delay&&(m.transitionDelay=_.delay+\"s\")),m},BuilderBlock.prototype.eval=function(e){return this.stringToFunction(e)(this.privateState.state,void 0,this.block,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,Device,this.privateState.update,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context)},BuilderBlock.prototype.componentWillUnmount=function(){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&removeEventListener(\"message\",this.onWindowMessage)},BuilderBlock.prototype.componentDidMount=function(){var e,t=this;this.hydrated=!0;var n=this.block,i=n&&n.animations;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&addEventListener(\"message\",this.onWindowMessage),i){var r={animations:fastClone(i)};if(n.bindings)for(var o in n.bindings)if((null===(e=o.trim)||void 0===e?void 0:e.call(o))&&o.startsWith(\"animations.\")){var a=this.stringToFunction(n.bindings[o]);void 0!==a&&set(r,o,a(this.privateState.state,null,n,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,null,null,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context))}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.animator.bindAnimations(r.animations.filter((function(e){return\"hover\"!==e.trigger})).map((function(e){return __assign(__assign({},e),{elementId:t.block.id})})))}},BuilderBlock.prototype.getElement=function(e,t){var n,i,r,o,a,s,l=this;void 0===e&&(e=0),void 0===t&&(t=this.privateState.state);var u=this.props;u.child,u.fieldName;var d,c=this.block,p=(c.tagName||\"div\").toLowerCase();if(\"template\"===p){var f=c.children?c.children.map((function(e){return blockToHtmlString(e)})).join(\" \"):\"\";return console.debug(\"template html\",f),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"template\",__assign({},c.properties,{dangerouslySetInnerHTML:{__html:f}}))}var m=c.component&&(c.component.name||c.component.component),h=null;c.component&&!c.component.class&&(c.component&&c.component.tag?d=c.component.tag:(h=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.find((function(e){return e.name===m}))||null)&&h.class?d=h.class:h&&h.tag?d=h.tag:(null==m?void 0:m.startsWith(\"Builder:\"))?console.warn(\"Missing @builder.io/widgets installation, please install and import @builder.io/widgets to use \".concat(m.split(\":\")[1],\" in your content, more info here: https://github.com/BuilderIO/builder/tree/main/packages/widgets\")):m&&console.warn(\"Missing registration for \".concat(m,\", have you included the registration in your bundle?\")));var v=__assign(__assign({},c.properties),{style:{},responsiveStyles:fastClone(c.responsiveStyles||{})});if(v=__assign(__assign({},v.properties),v),c.component&&(v.component=deepCloneWithConditions(c.component)),c.bindings)for(var g in c.bindings)if(null===(i=g.trim)||void 0===i?void 0:i.call(g)){var b=this.stringToFunction(c.bindings[g]);set(v,g,b(t,null,c,api(),Device,null,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context))}if(v.hide)return null;if(delete v.hide,(\"show\"in v||c.bindings&&c.bindings.show)&&!v.show)return null;if(delete v.show,c.actions){var y=function(e){if(!(null===(r=e.trim)||void 0===r?void 0:r.call(e)))return\"continue\";var n=c.actions[e];v[\"on\"+capitalize(e)]=function(e){var i=t;return\"undefined\"!=typeof Proxy&&(i=new Proxy(t,{set:function(e,t,n){return e[t]=n,l.privateState.rootState[t]=n,!0}})),l.stringToFunction(n,!1)(i,e,l.block,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,Device,l.privateState.update,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,l.privateState.context)}};for(var g in c.actions)y(g)}var _=(v.component||v.options)&&__assign(__assign({},v.options),v.component.options||v.component.data);containsLocalizedValues(_)&&(this.privateState.state.locale||console.warn(\"[Builder.io] In order to use localized fields in Builder, you must pass a locale prop to the BuilderComponent or to options object while fetching the content to resolve localized fields. Learn more: https://www.builder.io/c/docs/localization-inline#targeting-and-inline-localization\"),_=extractLocalizedValues(_,null!==(o=this.privateState.state.locale)&&void 0!==o?o:\"Default\"));var x=voidElements.has(p),S=h&&(h.fragment||h.noWrap),k=(null===(a=v.attr)||void 0===a?void 0:a.style)||(\"string\"==typeof v.style?v.style:\"\")||\"\";if(\"string\"==typeof k){\"object\"!=typeof v.style&&(v.style={});for(var B=0,w=k.split(\";\");B<w.length;B++){var C=w[B].split(\":\");if(!C.length)return;g=C[0],b=C[1];g&&(C.length>2&&(b=C.slice(1).join(\":\")),v.style[kebabCaseToCamelCase(g)]=b)}}var E=__assign(__assign(__assign({},omit$1(v,[\"class\",\"component\",\"attr\",\"responsiveStyles\"])),((n={})[\"string\"!=typeof p||p.includes(\"-\")?\"class\":\"className\"]=\"builder-block \".concat(this.id).concat(c.class?\" \".concat(c.class):\"\").concat(!c.component||[\"Image\",\"Video\",\"Banner\"].indexOf(m)>-1?\"\":\" builder-has-component\")+(v.class?\" \"+v.class:\"\")+(this.hydrated&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&(null===(s=this.privateState.state._spacer)||void 0===s?void 0:s.parent)===c.id?\" builder-spacer-parent\":\"\"),n.key=this.id+e,n[\"builder-id\"]=this.id,n)),0!==e&&{\"builder-index\":e});_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.hydrated&&(E[\"builder-inline-styles\"]=v.attr&&v.attr.style?Object.keys(v.style).reduce((function(e,t){return(e?\"\".concat(e,\";\"):\"\")+\"\".concat(cssCase(t),\":\").concat(v.style[t],\";\")}),\"\"):\"\"),(E.properties&&E.properties.href||E.href)&&\"div\"===p&&(p=\"a\"),\"a\"===p&&(p=Link);var R=c.children||E.children||[];return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(_emotion_core__WEBPACK_IMPORTED_MODULE_1__.ClassNames,null,(function(e){var t=e.css;if(e.cx,!l.props.emailMode){var n=\" \"+t(l.emotionCss(v.responsiveStyles));E.class&&(E.class+=n),E.className&&(E.className+=n)}return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderAsyncRequestsContext.Consumer,null,(function(e){return l._asyncRequests=e&&e.requests,l._errors=e&&e.errors,l._logs=e&&e.logs,x?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(p,__assign({},E)):d&&(S||l.props.emailMode)?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(d,__assign({},_,{attributes:E,builderBlock:c,builderState:l.privateState})):(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(p,__assign({},E),d&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(d,__assign({builderState:l.privateState,builderBlock:c},_)),c.text||v.text?v.text:!d&&R&&Array.isArray(R)&&R.length?R.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock,{key:(l.id||\"\")+t,block:e,index:t,size:l.props.size,fieldName:l.props.fieldName,child:l.props.child,emailMode:l.props.emailMode})})):null)}))})))},Object.defineProperty(BuilderBlock.prototype,\"id\",{get:function(){var e=this.block;return e.id&&!e.id.startsWith(\"builder\")?\"builder-\"+e.id:e.id||\"\"},enumerable:!1,configurable:!0}),BuilderBlock.prototype.contents=function(e){var t=this,n=this.block;if(this.privateState=e,n.repeat&&n.repeat.collection){var i=n.repeat.collection,r=last((i||\"\").trim().split(\"(\")[0].trim().split(\".\")),o=n.repeat.itemName||(r?r+\"Item\":\"item\"),a=this.stringToFunction(i)(e.state,null,n,api(),Device,null,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context);return Array.isArray(a)?a.map((function(n,i){var r,a=__assign(__assign({},e.state),((r={$index:i,$item:n})[o]=n,r[\"$\".concat(o,\"Index\")]=i,r));return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Provider,{key:i,value:__assign(__assign({},e),{state:a})},t.getElement(i,a))})):null}return this.getElement()},BuilderBlock.prototype.render=function(){var e=this;return this.state.hasError?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\",{css:{display:\"inline-block\",padding:5,color:\"#999\",fontSize:11,fontStyle:\"italic\"}},\"Builder block error :( Check console for details\"):(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(t){return e.contents(t)}))},BuilderBlock}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),BuilderBlocks=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.hydrated=!1,t.onClickEmptyBlocks=function(){var e;_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&t.noBlocks&&(null===(e=window.parent)||void 0===e||e.postMessage({type:\"builder.clickEmptyBlocks\",data:{parentElementId:t.parentId,dataPath:t.path}},\"*\"))},t.onHoverEmptyBlocks=function(){var e;_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&t.noBlocks&&(null===(e=window.parent)||void 0===e||e.postMessage({type:\"builder.hoverEmptyBlocks\",data:{parentElementId:t.parentId,dataPath:t.path}},\"*\"))},t}return __extends(t,e),Object.defineProperty(t.prototype,\"isRoot\",{get:function(){return!this.props.child},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"noBlocks\",{get:function(){var e=this.props.blocks;return!(e&&e.length)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"path\",{get:function(){var e=this.props.dataPath||\"\";return e.trim()&&(e.startsWith(\"this.\")?e=e.replace(\"this.\",\"\"):e.startsWith(\"component.options.\")||(e=\"component.options.\"+e)),e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"parentId\",{get:function(){return this.props.parentElementId?this.props.parentElementId:this.props.parent&&this.props.parent.id},enumerable:!1,configurable:!0}),t.prototype.componentDidMount=function(){this.hydrated=!0},t.prototype.render=function(){var e=this,t=this.props.blocks,n=this.props.emailMode?\"span\":\"div\";return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(n,__assign({className:\"builder-blocks\"+(this.noBlocks?\" no-blocks\":\"\")+(this.props.child?\" builder-blocks-child\":\"\")+(this.props.className?\" \"+this.props.className:\"\"),\"builder-type\":\"blocks\",\"builder-path\":_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&this.hydrated?this.path:void 0,\"builder-parent-id\":this.parentId,css:__assign(__assign({},!this.props.emailMode&&{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\"}),this.props.style),onClick:function(){e.noBlocks&&e.onClickEmptyBlocks()}},_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&{onMouseEnter:function(){return e.onHoverEmptyBlocks()}}),t&&Array.isArray(t)&&t.map((function(t,n){return t&&\"@builder.io/sdk:Element\"===t[\"@type\"]?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:t.id,block:t,index:n,fieldName:e.props.fieldName,child:e.props.child,emailMode:e.props.emailMode}):t}))||t)},t.renderInto=function(e,n,i){if(void 0===n&&(n={}),e){var r=null;return\"string\"==typeof e?r=document.querySelector(e):e instanceof Element&&(r=e),react_dom__WEBPACK_IMPORTED_MODULE_3___default().render((0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Provider,{value:i},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(t,__assign({},n))),r)}},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),NoWrap=function(e){return e.children};function getData(e){if(void 0!==(null==e?void 0:e.data)){var t=e.data,n=t.blocks,i=t.blocksString,r=Array.isArray(n)||\"string\"==typeof i,o=__assign(__assign({},e.data),r&&{blocks:n||JSON.parse(i)});return delete o.blocksString,o}}var variantsScript=function(e,t){return\"\\n(function() {\\n  if (window.builderNoTrack || !navigator.cookieEnabled) {\\n    return;\\n  }\\n\\n  var variants = \".concat(e,\";\\n  function removeVariants() {\\n    variants.forEach(function (template) {\\n      document.querySelector('template[data-template-variant-id=\\\"' + template.id + '\\\"]').remove();\\n    });\\n    document.getElementById('variants-script-\").concat(t,'\\').remove();\\n  }\\n\\n  if (typeof document.createElement(\"template\").content === \\'undefined\\') {\\n    removeVariants();\\n    return ;\\n  }\\n\\n  function setCookie(name,value,days) {\\n    var expires = \"\";\\n    if (days) {\\n        var date = new Date();\\n        date.setTime(date.getTime() + (days*24*60*60*1000));\\n        expires = \"; expires=\" + date.toUTCString();\\n    }\\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\" + \"; Secure; SameSite=None\";\\n  }\\n\\n  function getCookie(name) {\\n    var nameEQ = name + \"=\";\\n    var ca = document.cookie.split(\\';\\');\\n    for(var i=0;i < ca.length;i++) {\\n        var c = ca[i];\\n        while (c.charAt(0)==\\' \\') c = c.substring(1,c.length);\\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\\n    }\\n    return null;\\n  }\\n  var cookieName = \\'builder.tests.').concat(t,\"';\\n  var variantInCookie = getCookie(cookieName);\\n  var availableIDs = variants.map(function(vr) { return vr.id }).concat('\").concat(t,\"');\\n  var variantId;\\n  if (availableIDs.indexOf(variantInCookie) > -1) {\\n    variantId = variantInCookie;\\n  }\\n  if (!variantId) {\\n    var n = 0;\\n    var random = Math.random();\\n    for (var i = 0; i < variants.length; i++) {\\n      var variant = variants[i];\\n      var testRatio = variant.testRatio;\\n      n += testRatio;\\n      if (random < n) {\\n        setCookie(cookieName, variant.id);\\n        variantId = variant.id;\\n        break;\\n      }\\n    }\\n    if (!variantId) {\\n      variantId = \\\"\").concat(t,'\";\\n      setCookie(cookieName, \"').concat(t,'\");\\n    }\\n  }\\n  if (variantId && variantId !== \"').concat(t,\"\\\") {\\n    var winningTemplate = document.querySelector('template[data-template-variant-id=\\\"' + variantId + '\\\"]');\\n    if (winningTemplate) {\\n      var parentNode = winningTemplate.parentNode;\\n      var newParent = parentNode.cloneNode(false);\\n      newParent.appendChild(winningTemplate.content.firstChild);\\n      parentNode.parentNode.replaceChild(newParent, parentNode);\\n    }\\n  } else if (variants.length > 0) {\\n    removeVariants();\\n  }\\n})()\").replace(/\\s+/g,\" \")},VariantsProvider=function(e){var t=e.initialContent,n=e.children,i=e.nonce;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.canTrack)return n([t]);if(!Boolean(Object.keys((null==t?void 0:t.variations)||{}).length))return n([t]);var r=Object.keys(t.variations).map((function(e){return __assign(__assign({id:e},t.variations[e]),{data:getData(t.variations[e])})})),o=__spreadArray(__spreadArray([],r,!0),[t],!1);if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer){var a=JSON.stringify(Object.keys(t.variations||{}).map((function(e){return{id:e,testRatio:t.variations[e].testRatio}})));return react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment,null,n(o,(function(){return react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"script\",{nonce:i,id:\"variants-script-\".concat(t.id),dangerouslySetInnerHTML:{__html:variantsScript(a,t.id)}})})))}var s=\"builder.tests.\".concat(t.id),l=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getCookie(s);if(!l&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser)for(var u=0,d=Math.random(),c=0;c<r.length;c++){var p=r[c];if(d<(u+=p.testRatio)){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.setCookie(s,p.id),l=p.id;break}}return l||(l=t.id,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.setCookie(s,l)),n([o.find((function(e){return e.id===l}))])},BuilderContent=function(_super){function BuilderContent(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.ref=null,_this.state={loading:!_this.props.content,data:getContentWithInfo(_this.props.content),updates:1},_this.onWindowMessage=function(event){var _a,_b,isTrusted=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isTrustedHostForEvent(event);if(isTrusted){var message=event.data;if(message)switch(message.type){case\"builder.patchUpdates\":if(null===(_a=_this.props.options)||void 0===_a?void 0:_a.noEditorUpdates)return;var data=message.data;if(!data||!data.data)break;var patches=data.data[null===(_b=_this.state.data)||void 0===_b?void 0:_b.id];if(!patches||!patches.length)return;location.href.includes(\"builder.debug=true\")&&eval(\"debugger\");for(var newData=_this.state.data,_i=0,patches_1=patches;_i<patches_1.length;_i++){var patch=patches_1[_i];newData=applyPatchWithMinimalMutationChain(newData,patch,!1)}_this.setState({updates:_this.state.updates+1,data:newData}),_this.props.contentLoaded&&_this.props.contentLoaded(newData.data,newData)}}},_this.subscriptions=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Subscription,_this.firstLoad=!0,_this.clicked=!1,_this.trackedImpression=!1,_this.intersectionObserver=null,_this.onClick=function(e){var t=e.nativeEvent,n=_this.data;n&&(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.autoTrack&&_this.builder.trackInteraction(n.id,_this.renderedVariantId,_this.clicked,t,{content:n}),_this.clicked||(_this.clicked=!0))},_this}return __extends(BuilderContent,_super),Object.defineProperty(BuilderContent.prototype,\"builder\",{get:function(){return this.props.builder||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"name\",{get:function(){var e=this.props;return\"model\"in e?e.model:e.modelName},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"renderedVariantId\",{get:function(){var e,t,n=this.props.isStatic?this.builder.getCookie(\"builder.tests.\".concat(null===(e=this.data)||void 0===e?void 0:e.id)):null===(t=this.data)||void 0===t?void 0:t.variationId;if(null!==n)return n},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"options\",{get:function(){var e,t,n=__assign({},this.props.options||{});return n.key||!(null===(e=this.props.content)||void 0===e?void 0:e.id)||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing||(n.key=this.props.content.id),!this.props.content||(null===(t=n.initialContent)||void 0===t?void 0:t.length)||!this.props.inline&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing||(n.initialContent=[this.props.content]),n},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"data\",{get:function(){var e=(this.props.inline||!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||this.firstLoad)&&this.options.initialContent&&this.options.initialContent[0]||this.state.data;return getContentWithInfo(e)},enumerable:!1,configurable:!0}),BuilderContent.prototype.componentDidMount=function(){var e,t;if(!this.props.inline||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing)this.subscribeToContent();else if(this.props.inline&&(null===(t=null===(e=this.options)||void 0===e?void 0:e.initialContent)||void 0===t?void 0:t.length)){var n=this.options.initialContent[0];(null==n?void 0:n.id)&&this.builder.trackImpression(n.id,this.renderedVariantId,void 0,{content:n})}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&addEventListener(\"message\",this.onWindowMessage)},BuilderContent.prototype.subscribeToContent=function(){var e=this;\"_inline\"!==this.name&&this.subscriptions.add(this.builder.queueGetContent(this.name,this.options).subscribe((function(t){var n=t&&t[0];e.setState({data:n,loading:!1});var i=(e.builder.editingModel||e.builder.previewingModel)===e.name;if(!e.props.inline&&e.props.content&&e.firstLoad&&i&&(e.firstLoad=!1,e.subscriptions.unsubscribe(),e.subscribeToContent()),n&&e.firstLoad&&(e.firstLoad=!1,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.autoTrack&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing)){var r=!1;if(\"function\"==typeof IntersectionObserver&&e.ref)try{(e.intersectionObserver=new IntersectionObserver((function(t,i){t.forEach((function(t){t.intersectionRatio>0&&!e.trackedImpression&&(e.builder.trackImpression(n.id,e.renderedVariantId,void 0,{content:e.data}),e.data,e.trackedImpression=!0,e.ref&&i.unobserve(e.ref))}))}))).observe(e.ref),r=!0}catch(e){console.warn(\"Could not bind intersection observer\")}r||(e.trackedImpression=!0,e.builder.trackImpression(n.id,e.renderedVariantId,void 0,{content:n}))}e.props.contentLoaded&&e.props.contentLoaded(n&&n.data,n)}),(function(t){e.props.contentError&&(e.props.contentError(t),e.setState({loading:!1}))})))},BuilderContent.prototype.componentWillUnmount=function(){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&removeEventListener(\"message\",this.onWindowMessage),this.subscriptions.unsubscribe(),this.intersectionObserver&&this.ref&&this.intersectionObserver.unobserve(this.ref)},BuilderContent.prototype.render=function(){var e=this;if(this.props.dataOnly)return null;var t=this.state.loading,n=this.data,i=this.props.dataOnly?NoWrap:\"div\";return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(VariantsProvider,{initialContent:n,nonce:this.props.nonce},(function(r,o){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,r.map((function(a,s){var l=s===r.length-1?(react__WEBPACK_IMPORTED_MODULE_2___default().Fragment):\"template\";return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),{key:String((null==a?void 0:a.id)+s)},\"template\"!==l&&(null==o?void 0:o()),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(l,__assign({key:String((null==a?void 0:a.id)+s)},\"template\"===l&&{\"data-template-variant-id\":null==a?void 0:a.id}),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(i,__assign({},0===s&&!e.props.dataOnly&&{ref:function(t){return e.ref=t}},{className:\"builder-content\",onClick:e.onClick,\"builder-content-id\":null==a?void 0:a.id,\"builder-model\":e.name}),e.props.children(null==a?void 0:a.data,!e.props.inline&&t,n))))})))}))},BuilderContent}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),getContentWithInfo=function(e){var t;if(e){var n=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getCookie(\"builder.tests.\".concat(e.id)),i=n===e.id?e:null===(t=e.variations)||void 0===t?void 0:t[n],r=(null==i?void 0:i.name)||((null==i?void 0:i.id)===e.id?\"Default variation\":\"\");return __assign(__assign({},e),{variationId:n,testVariationId:n,testVariationName:r})}return null};function unwrapExports(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var onChange_1=createCommonjsModule((function(e,t){Object.defineProperty(t,\"__esModule\",{value:!0});var n=Symbol(\"target\"),i=Symbol(\"unsubscribe\"),r=function(e,t){return t&&t.toString&&(e&&(e+=\".\"),e+=t.toString()),e},o=function(e){return Array.isArray(e)?e.slice():Object.assign({},e)},a=function(e,t,a){if(\"undefined\"==typeof Proxy)return e;void 0===a&&(a={});var s,l,u=Symbol(\"ProxyTarget\"),d=!1,c=!1,p=!1,f=a.equals||Object.is,m=new WeakMap,h=new WeakMap,v=new WeakMap,g=function(e,n,i,a){if(!p)if(d){if(d&&l&&void 0!==i&&void 0!==a&&\"length\"!==n){var u=l;e!==s&&function(e,t){for(var n;e;)-1===(n=e.indexOf(\".\"))&&(n=e.length),t(e.slice(0,n)),e=e.slice(n+1)}(e=e.replace(s,\"\").slice(1),(function(e){u[e]=o(u[e]),u=u[e]})),u[n]=i}c=!0}else t(r(e,n),a,i)},b=function(e,t){var n=m?m.get(e):void 0;n&&n.delete(t)},y=function(e,t){if(p)return e;h.set(e,t);var n=v.get(e);return void 0===n&&(n=new Proxy(e,x),v.set(e,n)),n},_=function(e){return p||!0===a.ignoreSymbols&&\"symbol\"==typeof e},x={get:function(e,t,o){if(t===u||t===n)return e;if(t===i&&\"\"===h.get(e))return function(e){return p=!0,m=null,h=null,v=null,e}(e);var s=Reflect.get(e,t,o);if(function(e){return null===e||\"object\"!=typeof e&&\"function\"!=typeof e}(s)||function(e){return e instanceof RegExp||e instanceof Number}(s)||\"constructor\"===t||!0===a.isShallow)return s;var l=function(e,t){var n=m?m.get(e):void 0;if(n)return n;n=new Map,m.set(e,n);var i=n.get(t);return i||(i=Reflect.getOwnPropertyDescriptor(e,t),n.set(t,i)),i}(e,t);if(l&&!l.configurable){if(l.set&&!l.get)return;if(!1===l.writable)return s}return y(s,r(h.get(e),t))},set:function(e,t,n,i){n&&void 0!==n[u]&&(n=n[u]);var r=_(t),o=r?null:Reflect.get(e,t,i),a=Reflect.set(e[u]||e,t,n);return r||f(o,n)||g(h.get(e),t,o,n),a},defineProperty:function(e,t,n){var i=Reflect.defineProperty(e,t,n);return _(t)||(b(e,t),g(h.get(e),t,void 0,n.value)),i},deleteProperty:function(e,t){if(!Reflect.has(e,t))return!0;var n=_(t),i=n?null:Reflect.get(e,t),r=Reflect.deleteProperty(e,t);return n||(b(e,t),g(h.get(e),t,i)),r},apply:function(e,t,n){var i=t instanceof Date;if(i&&(t=t[u]),!d){d=!0,i&&(l=t.valueOf()),(Array.isArray(t)||\"[object Object]\"===toString.call(t))&&(l=o(t[u])),s=(s=h.get(e)).slice(0,Math.max(s.lastIndexOf(\".\"),0));var r=Reflect.apply(e,t,n);return d=!1,(c||i&&!f(l,t.valueOf()))&&(g(s,\"\",l,t[u]||t),l=null,c=!1),r}return Reflect.apply(e,t,n)}},S=y(e,\"\");return t=t.bind(S),S};a.target=function(e){return e[n]||e},a.unsubscribe=function(e){return e[i]||e},e.exports=a,t.default=a})),onChange=unwrapExports(onChange_1),nextTick=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick;function debounceNextTick(e,t,n){return void 0===t&&\"function\"==typeof e?debounceNextTickImpl(e):{configurable:!0,enumerable:n.enumerable,get:function(){return Object.defineProperty(this,t,{configurable:!0,enumerable:n.enumerable,value:debounceNextTickImpl(n.value)}),this[t]}}}function debounceNextTickImpl(e){var t=null,n=null;return function(){var e=t;if(t=[].slice.call(arguments),n=this,null!==e)return;nextTick(i)};function i(){e.apply(n,t),t=null,n=null}}function throttle(e,t,n){var i,r,o;void 0===n&&(n={});var a=null,s=0,l=function(){s=!1===n.leading?0:Date.now(),a=null,o=e.apply(i,r),a||(i=r=null)};return function(){var u=Date.now();s||!1!==n.leading||(s=u);var d=t-(u-s);return i=this,r=arguments,d<=0||d>t?(a&&(clearTimeout(a),a=null),s=u,o=e.apply(i,r),a||(i=r=null)):a||!1===n.trailing||(a=setTimeout(l,d)),o}}var BuilderMetaContext=react__WEBPACK_IMPORTED_MODULE_2___default().createContext({emailMode:!1,ampMode:!1,isServer:!1}),tryEval=function(e,t,n){void 0===t&&(t={});var i=e;if(\"string\"==typeof i&&i.trim()){var r=!(i.includes(\";\")||i.includes(\" return \")),o=function(){};try{_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(o=new Function(\"state\",\"var rootState = state;\\n        if (typeof Proxy !== 'undefined') {\\n          rootState = new Proxy(rootState, {\\n            set: function () {\\n              return false;\\n            },\\n            get: function (target, key) {\\n              if (key === 'state') {\\n                return state;\\n              }\\n              return target[key]\\n            }\\n          });\\n        }\\n        with (rootState) {\\n          \".concat(r?\"return (\".concat(e,\");\"):e,\";\\n        }\")))}catch(e){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&console.warn(\"Could not compile javascript\",e)}try{if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||shouldForceBrowserRuntimeInNode())return o(t||{});var a=safeDynamicRequire(\"isolated-vm\"),s=getIsolateContext(),l=makeFn(e,r,[\"state\"]),u=s.evalClosureSync(l,[new a.Reference(t||{})]);try{return JSON.parse(u)}catch(e){return u}}catch(t){n&&n.push(t),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?console.warn(\"Builder custom code error:\",t.message,\"in\",e,t.stack):isDebug()&&console.debug(\"Builder custom code error:\",t.message,\"in\",e,t.stack)}}};function toError(e){return e instanceof Error?e:new Error(String(e))}function getBuilderPixel(e){return{id:\"builder-pixel-\"+Math.random().toString(36).split(\".\")[1],\"@type\":\"@builder.io/sdk:Element\",tagName:\"img\",properties:{role:\"presentation\",\"aria-hidden\":\"true\",src:\"https://cdn.builder.io/api/v1/pixel?apiKey=\".concat(e)},responsiveStyles:{large:{height:\"0\",width:\"0\",display:\"inline-block\",opacity:\"0\",overflow:\"hidden\",pointerEvents:\"none\"}}}}function pick(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i={};return t.forEach((function(t){i[t]=e[t]})),i}function omit(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=__assign({},e);return t.forEach((function(e){delete i[e]})),i}var instancesMap=new Map,wrapComponent=function(e){return function(t){var n,i=t.builderTag||\"div\",r=[\"children\"].concat((null===(n=e.inputs)||void 0===n?void 0:n.map((function(e){return e.name})))||[]),o=omit.apply(void 0,__spreadArray(__spreadArray([t],r,!1),[\"attributes\"],!1)),a=t;return e.noWrap?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e.class,__assign({attributes:o},a)):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(i,__assign({},o),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e.class,__assign({},a)))}},size$1=function(e){return Object.keys(e).length};function debounce(e,t,n){var i;return void 0===n&&(n=!1),function(){var r=this,o=arguments;clearTimeout(i),i=setTimeout((function(){i=null,n||e.apply(r,o)}),t),n&&!i&&e.apply(r,o)}}var fontsLoaded=new Set,fetch$1;globalThis.fetch&&(fetch$1=globalThis.fetch),null!=fetch$1||(fetch$1=__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\"));var sizeMap={desktop:\"large\",tablet:\"medium\",mobile:\"small\",xsmall:\"xsmall\"},fetchCache={};function searchToObject$1(e){var t=(e.search||\"\").substring(1).split(\"&\"),n={};for(var i in t)if(t[i]&&\"string\"==typeof t[i]){var r=t[i].split(\"=\");n[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return n}var BuilderComponent=function(e){function t(t){var n,i,r=this;(r=e.call(this,t)||this).subscriptions=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Subscription,r.onStateChange=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject(null),r.asServer=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer,r.contentRef=null,r.styleRef=null,r.rootState=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer?{}:onChange({},(function(){return r.updateState()})),r.lastJsCode=\"\",r.lastHttpRequests={},r.httpSubscriptionPerKey={},r.firstLoad=!0,r.ref=null,r.messageListener=function(e){var t;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isTrustedHostForEvent(e)){var n=e.data;switch(n.type){case\"builder.configureSdk\":var i=n.data;if(!i.contentId||i.contentId!==(null===(t=r.useContent)||void 0===t?void 0:t.id))return;r.sizes=getSizesForBreakpoints(i.breakpoints||{}),r.setState({state:Object.assign(r.rootState,{deviceSize:r.deviceSizeState,device:r.device}),updates:(r.state&&r.state.updates||0)+1,breakpoints:i.breakpoints});break;case\"builder.updateSpacer\":var o=n.data;r.rootState._spacer,r.updateState((function(e){e._spacer=o}));break;case\"builder.resetState\":var a=n.data,s=a.state;if(a.model===r.name){for(var l in r.rootState)\"function\"!=typeof r.rootState[l]&&delete r.rootState[l];Object.assign(r.rootState,s),r.setState(__assign(__assign({},r.state),{state:r.rootState,updates:(r.state&&r.state.updates||0)+1}))}break;case\"builder.resetSymbolState\":var u=n.data.state,d=(s=u.state,u.model,u.id);if(r.props.builderBlock&&r.props.builderBlock===d){for(var l in r.rootState)delete r.rootState[l];Object.assign(r.rootState,s),r.setState(__assign(__assign({},r.state),{state:r.rootState,updates:(r.state&&r.state.updates||0)+1}))}}}},r.resizeFn=function(){var e=r.deviceSizeState;e!==r.state.state.deviceSize&&r.setState(__assign(__assign({},r.state),{updates:(r.state&&r.state.updates||0)+1,state:Object.assign(r.rootState,__assign(__assign({},r.state.state),{deviceSize:e}))}))},r.resizeListener=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing?throttle(r.resizeFn,200):debounce(r.resizeFn,400),r.mounted=!1,r.updateState=function(e){var t=r.rootState;e&&e(t),r.mounted?r.setState({update:r.updateState,state:t,updates:(r.state&&r.state.updates||0)+1}):r.state=__assign(__assign({},r.state),{update:r.updateState,state:t,updates:(r.state&&r.state.updates||0)+1}),r.notifyStateChange()},r.onContentLoaded=function(e,t){if(\"page\"===r.name&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&e){var n=e.title,i=e.pageTitle,o=e.description,a=e.pageDescription;if((n||i)&&(document.title=n||i),o||a){var s=document.querySelector('meta[name=\"description\"]');s||((s=document.createElement(\"meta\")).setAttribute(\"name\",\"description\"),document.head.appendChild(s)),s.setAttribute(\"content\",o||a)}}if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&r.notifyStateChange(),r.props.contentLoaded&&r.props.contentLoaded(e,t),e&&e.inputs&&Array.isArray(e.inputs)&&e.inputs.length&&(e.state||(e.state={}),e.inputs.forEach((function(t){t&&t.name&&void 0!==t.defaultValue&&void 0===e.state[t.name]&&(e.state[t.name]=t.defaultValue)}))),e&&e.state){var l=__assign(__assign({},r.state),{updates:(r.state&&r.state.updates||0)+1,state:Object.assign(r.rootState,__assign(__assign(__assign(__assign(__assign({},r.state.state),{location:r.locationState,device:r.device}),e.state),r.externalState),{deviceSize:r.deviceSizeState}))});r.mounted?r.setState(l):r.state=l}if(e&&e.jsCode&&!r.options.codegen){var u=!1;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&(r.lastJsCode===e.jsCode?u=!0:r.lastJsCode=e.jsCode),!u){var d=r.state.state;try{new Function(\"data\",\"ref\",\"state\",\"update\",\"element\",\"Builder\",\"builder\",\"context\",e.jsCode)(e,r,d,r.state.update,r.ref,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,r.state.context)}catch(t){var c=toError(t);_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?console.warn(\"Builder custom code error:\",c.message,\"in\",e.jsCode,c.stack):isDebug()&&console.debug(\"Builder custom code error:\",c.message,\"in\",e.jsCode,c.stack)}}}if(e&&e.httpRequests&&!r.props.noAsync&&!(u=!1)){var p=function(t){var n=e.httpRequests[t];if(n&&(!r.data[t]||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing)){var i=\"object\"==typeof n&&\"@builder.io/core:Request\"===n[\"@type\"];if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser){var o=i?r.evalExpression(n.request.url):r.evalExpression(n);if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&r.lastHttpRequests[t]===o)return\"continue\";r.lastHttpRequests[t]=o,i?r.handleRequest(t,{url:o,method:n.request.method,body:n.request.body,headers:n.request.headers}):r.handleRequest(t,{url:o,method:\"GET\"});var a=r.httpSubscriptionPerKey[t];a&&a.unsubscribe();var s=r.httpSubscriptionPerKey[t]=r.onStateChange.subscribe((function(){var e=i?r.evalExpression(n.request.url):r.evalExpression(n);e!==o&&(i?r.handleRequest(t,{url:e,method:n.request.method,body:n.request.body,headers:n.request.headers}):r.handleRequest(t,{url:e,method:\"GET\"}),r.lastHttpRequests[t]=e)}));r.subscriptions.add(s)}else i?r.handleRequest(t,{url:r.evalExpression(n.request.url),method:n.request.method,body:n.request.body,headers:n.request.headers}):r.handleRequest(t,{url:r.evalExpression(n),method:\"GET\"})}};for(var f in e.httpRequests)p(f)}};var o=r.inlinedContent;o&&o.content&&(o=o.content),r.sizes=getSizesForBreakpoints((null===(n=null==o?void 0:o.meta)||void 0===n?void 0:n.breakpoints)||{});var a=null===(i=r.inlinedContent)||void 0===i?void 0:i.data;a&&Array.isArray(a.inputs)&&a.inputs.length>0&&(a.state||(a.state={}),a.inputs.forEach((function(e){e&&e.name&&void 0!==e.defaultValue&&void 0===a.state[e.name]&&(a.state[e.name]=e.defaultValue)}))),r.state={context:__assign(__assign({},t.context),{apiKey:r.props.apiKey||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey,nonce:r.props.nonce}),state:Object.assign(r.rootState,__assign(__assign(__assign(__assign({},r.inlinedContent&&r.inlinedContent.data&&r.inlinedContent.data.state),{isBrowser:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser,isServer:!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser,_hydrate:t.hydrate,location:r.locationState,deviceSize:r.deviceSizeState,device:r.device}),r.getHtmlData()),t.data)),updates:0,key:0,update:r.updateState};var s=r.props.apiKey;if(s&&s!==r.builder.apiKey&&!instancesMap.has(s)){var l=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder(s,void 0,void 0,!0);instancesMap.set(s,l)}if(r.inlinedContent){var u=r.inlinedContent.content||r.inlinedContent;r.onContentLoaded(null==u?void 0:u.data,getContentWithInfo(u))}return r.registerCustomComponents(),r}return __extends(t,e),Object.defineProperty(t.prototype,\"options\",{get:function(){return __assign(__assign({},t.defaults),this.props)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"name\",{get:function(){return this.props.model||this.props.modelName||this.props.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"element\",{get:function(){return this.ref},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"inlinedContent\",{get:function(){if(!this.isPreviewing||this.props.inlineContent)return this.props.content},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"builder\",{get:function(){return this.props.apiKey&&instancesMap.get(this.props.apiKey)||this.props.builder||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder},enumerable:!1,configurable:!0}),t.prototype.getHtmlData=function(){var e=this.inlinedContent&&this.inlinedContent.id||this.props.entry,t=e&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&document.querySelector('script[data-builder-json=\"'.concat(e,'\"],script[data-builder-state=\"').concat(e,'\"]'));if(t)try{return JSON.parse(t.innerText)}catch(e){console.warn(\"Could not parse Builder.io HTML data transfer\",e,t.innerText)}return{}},Object.defineProperty(t.prototype,\"device\",{get:function(){return this.builder.getUserAttributes().device||\"desktop\"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"locationState\",{get:function(){return __assign(__assign({},pick(this.location,\"pathname\",\"hostname\",\"search\",\"host\")),{path:this.location.pathname&&this.location.pathname.split(\"/\").slice(1)||\"\",query:searchToObject$1(this.location)})},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"deviceSizeState\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?this.sizes.getSizeForWidth(window.innerWidth):sizeMap[this.device]||\"large\"},enumerable:!1,configurable:!0}),t.renderInto=function(e,n,i,r){if(void 0===n&&(n={}),void 0===i&&(i=!0),void 0===r&&(r=!1),console.debug(\"BuilderPage.renderInto\",e,n,i,this),e){var o=null;if(\"string\"==typeof e?o=document.querySelector(e):e instanceof Element&&(o=e),o){var a=o.classList.contains(\"builder-hydrated\");if(!a||r){o.classList.add(\"builder-hydrated\");var s=i&&o.innerHTML.includes(\"builder-block\");if(!o.classList.contains(\"builder-component\")){var l=o.querySelector(\".builder-api-styles\")||(o.previousElementSibling&&o.previousElementSibling.matches(\".builder-api-styles\")?o.previousElementSibling:null),u=\"\";if(l)l.innerHTML.replace(/\\/\\*start:([^\\*]+?)\\*\\/([\\s\\S]*?)\\/\\*end:([^\\*]+?)\\*\\//g,(function(e,t,n){var i=null;try{i=document.querySelector('[data-emotion-css=\"'.concat(t,'\"]'))}catch(e){console.warn(e)}return i?i.innerHTML=n:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||(u+=e),e})),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){l.innerHTML=u}));var d=o.querySelector(\".builder-component\");d?o=d:s=!1}location.search.includes(\"builder.debug=true\")&&console.debug(\"hydrate\",s,o);var c=o;if(!a){var p=document.createElement(\"div\");o.insertAdjacentElement(\"beforebegin\",p),p.appendChild(o),c=p}if((_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&location.search.includes(\"builder.preview=\"))&&(s=!1),s&&o){var f=react_dom__WEBPACK_IMPORTED_MODULE_3___default().render(react__WEBPACK_IMPORTED_MODULE_2___default().createElement(t,__assign({},n)),c,c.builderRootRef);return c.builderRootRef=f,f}var m=react_dom__WEBPACK_IMPORTED_MODULE_3___default().render(react__WEBPACK_IMPORTED_MODULE_2___default().createElement(t,__assign({},n)),c,c.builderRootRef);return c.builderRootRef=m,m}console.debug(\"Tried to hydrate multiple times\")}}},t.prototype.registerCustomComponents=function(){if(this.props.customComponents)for(var e=0,t=this.props.customComponents;e<t.length;e++){var n=t[e];if(n){var i=n.component,r=__rest(n,[\"component\"]);_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(i,r)}}},t.prototype.componentDidMount=function(){var e,t=this;this.mounted=!0,this.asServer&&(this.asServer=!1,this.updateState((function(e){e.isBrowser=!0,e.isServer=!1}))),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&(null===(e=window.parent)||void 0===e||e.postMessage({type:\"builder.sdkInjected\",data:{modelName:this.name,apiKey:this.props.apiKey||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey}},\"*\")),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(window.addEventListener(\"resize\",this.resizeListener),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&window.addEventListener(\"message\",this.messageListener),(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing)&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){t.firstLoad=!1,t.reload()})),setTimeout((function(){window.dispatchEvent(new CustomEvent(\"builder:component:load\",{detail:{ref:t}}))})))},Object.defineProperty(t.prototype,\"isPreviewing\",{get:function(){return(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing&&!this.firstLoad)&&(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.previewingModel===this.name||\"BUILDER_STUDIO\"===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.previewingModel)},enumerable:!1,configurable:!0}),t.prototype.notifyStateChange=function(){if(!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer&&this&&this.state){var e=this.state.state;this.props.onStateChange&&this.props.onStateChange(e),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&window.dispatchEvent(new CustomEvent(\"builder:component:stateChange\",{detail:{state:e,ref:this}})),this.onStateChange.next(e)}},t.prototype.processStateFromApi=function(e){return e},Object.defineProperty(t.prototype,\"location\",{get:function(){return this.props.location||(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?location:{})},enumerable:!1,configurable:!0}),t.prototype.getCssFromFont=function(e,t){var n=e.family+(e.kind&&!e.kind.includes(\"#\")?\", \"+e.kind:\"\"),i=n.split(\",\")[0],r=e.fileUrl?e.fileUrl:e.files&&e.files.regular,o=\"\";if(r&&n&&i&&(o+='\\n@font-face {\\n  font-family: \"'.concat(n,'\";\\n  src: local(\"').concat(i,\"\\\"), url('\").concat(r,\"') format('woff2');\\n  font-display: fallback;\\n  font-weight: 400;\\n}\\n        \").trim()),e.files)for(var a in e.files){if(String(Number(a))===a){var s=e.files[a];s&&s!==r&&(o+='\\n@font-face {\\n  font-family: \"'.concat(n,\"\\\";\\n  src: url('\").concat(s,\"') format('woff2');\\n  font-display: fallback;\\n  font-weight: \").concat(a,\";\\n}\\n          \").trim())}}return o},t.prototype.componentWillUnmount=function(){this.unsubscribe(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(window.removeEventListener(\"resize\",this.resizeListener),window.removeEventListener(\"message\",this.messageListener))},t.prototype.getFontCss=function(e){var t=this;return this.builder.allowCustomFonts&&(null==e?void 0:e.customFonts)&&e.customFonts.length&&e.customFonts.map((function(n){return t.getCssFromFont(n,e)})).join(\" \")||\"\"},t.prototype.ensureFontsLoaded=function(e){if(this.builder.allowCustomFonts&&(null==e?void 0:e.customFonts)&&Array.isArray(e.customFonts))for(var t=0,n=e.customFonts;t<n.length;t++){var i=n[t],r=i.fileUrl?i.fileUrl:i.files&&i.files.regular;if(!fontsLoaded.has(r)){var o=this.getCssFromFont(i,e);if(fontsLoaded.add(r),!o)continue;var a=document.createElement(\"style\");a.className=\"builder-custom-font\",a.setAttribute(\"data-builder-custom-font\",r),a.innerHTML=o,document.head.appendChild(a)}}},t.prototype.getCss=function(e){var t,n=null===(t=this.useContent)||void 0===t?void 0:t.id,i=(null==e?void 0:e.cssCode)||\"\";return n&&(i=i.replace(/&/g,\".builder-component-\".concat(n))),i+this.getFontCss(e)},Object.defineProperty(t.prototype,\"data\",{get:function(){var e,t=__assign(__assign(__assign({},this.inlinedContent&&(null===(e=this.inlinedContent.data)||void 0===e?void 0:e.state)),this.externalState),this.state.state);return Object.assign(this.rootState,t),t},enumerable:!1,configurable:!0}),t.prototype.componentDidUpdate=function(e){var t=this;this.props.data&&e.data!==this.props.data&&this.state.update((function(e){Object.assign(e,t.externalState)})),this.props.customComponents&&this.props.customComponents!==e.customComponents&&this.registerCustomComponents(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.inlinedContent&&e.content!==this.inlinedContent&&this.onContentLoaded(this.inlinedContent.data,this.inlinedContent)},t.prototype.checkStyles=function(e){if(this.styleRef){var t=this.getCss(e);this.styleRef.innerHTML!==t&&(this.styleRef.innerHTML=t)}},t.prototype.reload=function(){this.setState({key:this.state.key+1})},Object.defineProperty(t.prototype,\"content\",{get:function(){var e=this.inlinedContent;return e&&e.content&&(e=__assign(__assign({},e),{data:e.content})),e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"externalState\",{get:function(){return __assign(__assign({},this.props.data),this.props.locale?{locale:this.props.locale}:{})},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"useContent\",{get:function(){return this.content||this.state.context.builderContent},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e,t=this,n=this.content,i=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&this.externalState&&size$1(this.externalState)&&hash_sum__WEBPACK_IMPORTED_MODULE_4___default()(this.externalState),r=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing?this.name:this.props.entry;r&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&i&&i.length<300&&(r+=\":\"+i);var o=this.props.dataOnly?(react__WEBPACK_IMPORTED_MODULE_2___default().Fragment):\"div\",a=null===(e=this.useContent)||void 0===e?void 0:e.id;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(o,{onClick:function(e){!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||t.props.isChild||t.props.stopClickPropagationWhenEditing||e.stopPropagation()},className:\"builder-component \".concat(a?\"builder-component-\".concat(a):\"\"),\"data-name\":this.name,\"data-source\":\"Rendered by Builder.io\",key:this.state.key,ref:function(e){return t.ref=e}},react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderMetaContext.Consumer,null,(function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderMetaContext.Provider,{value:\"boolean\"==typeof t.props.ampMode?__assign(__assign({},e),{ampMode:t.props.ampMode}):e},react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderAsyncRequestsContext.Consumer,null,(function(e){var i;return t._asyncRequests=e&&e.requests,t._errors=e&&e.errors,t._logs=e&&e.logs,react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderContent,{isStatic:t.props.isStatic||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isStatic,key:(null===(i=t.inlinedContent)||void 0===i?void 0:i.id)||(\"content\"in t.props&&!t.isPreviewing?\"null-content-prop\":\"no-content-prop\"),builder:t.builder,ref:function(e){return t.contentRef=e},contentLoaded:function(e,n){return t.onContentLoaded(e,n)},options:__assign(__assign(__assign(__assign(__assign(__assign({key:r,entry:t.props.entry},n&&{initialContent:[n]}),!n&&\"content\"in t.props&&!t.isPreviewing&&{initialContent:[]}),t.props.url&&{url:t.props.url}),t.props.options),t.props.locale?{locale:t.props.locale}:{}),t.options.codegen&&{format:\"react\"}),inline:t.props.inlineContent||!t.isPreviewing&&\"content\"in t.props,contentError:t.props.contentError,modelName:t.name||\"page\",nonce:t.props.nonce},(function(e,n,i){var r;if(t.props.dataOnly)return null;i&&i.id&&(t.state.breakpoints&&(i.meta=i.meta||{},i.meta.breakpoints=t.state.breakpoints),t.state.context.builderContent=i),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){t.checkStyles(e)}));var o=t.options.codegen;if(o&&!t.Component&&(null==e?void 0:e.blocksJs)){var a=Array.from(new Set(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.map((function(e){return e.name})))),s=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.slice().reverse(),l=a.map((function(e){return s.find((function(t){return t.class&&t.name===e}))})),u=a.map((function(e){return(e||\"\").replace(/[^\\w]+/gi,\"\")})),d=l.map((function(e){return wrapComponent(e)}));t.Component=(new(Function.bind.apply(Function,__spreadArray(__spreadArray([void 0,\"jsx\",\"_css\",\"Builder\",\"builder\",\"React\",\"useBuilderState\"],u,!1),[e.blocksJs],!1)))).apply(void 0,__spreadArray([_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.css,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,(react__WEBPACK_IMPORTED_MODULE_2___default()),function(e){var t=react__WEBPACK_IMPORTED_MODULE_2___default().useState(0)[1];return react__WEBPACK_IMPORTED_MODULE_2___default().useState((function(){return onChange(e,(function(){t((function(e){return e+1}))}))}))[0]}],d,!1))}var c=(null==e?void 0:e.blocks)||[],p=c.find((function(e){var t;return null===(t=e.id)||void 0===t?void 0:t.startsWith(\"builder-pixel\")}));return e&&!p&&c.length>0&&c.push(getBuilderPixel(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey)),e?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({\"data-builder-component\":t.name,\"data-builder-content-id\":i.id},t.isPreviewing?{\"data-builder-variation-id\":i.testVariationId||i.variationId||i.id}:{}),!o&&t.getCss(e)&&react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"style\",{nonce:t.props.nonce,ref:function(e){return t.styleRef=e},className:\"builder-custom-styles\",dangerouslySetInnerHTML:{__html:t.getCss(e)}}),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Provider,{value:__assign(__assign({},t.state),{rootState:t.rootState,state:t.data,content:i,renderLink:t.props.renderLink})},o&&t.Component?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(t.Component,{data:t.data,context:t.state.context}):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{key:String(!!(null===(r=null==e?void 0:e.blocks)||void 0===r?void 0:r.length)),emailMode:t.props.emailMode,fieldName:\"blocks\",blocks:c}))):n?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",{\"data-builder-component\":t.name,className:\"builder-loading\"},t.props.children):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",{\"data-builder-component\":t.name,className:\"builder-no-content\"})}))})))})))},t.prototype.evalExpression=function(e){var t=this,n=this.data;return String(e).replace(/{{([^}]+)}}/g,(function(e,i){return tryEval(i,n,t._errors)}))},t.prototype.handleRequest=function(e,t){return __awaiter(this,void 0,void 0,(function(){var n,i,r,o,a,s,l,u,d,c=this;return __generator(this,(function(p){return n=t.url,i=t.method,r=t.body,o=t.headers,a=JSON.stringify({url:n,method:i,body:r,headers:o}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&fetchCache[a]?(this.updateState((function(t){t[e]=fetchCache[a]})),[2,fetchCache[a]]):(s=function(){return __awaiter(c,void 0,void 0,(function(){var t,s,l,u,d;return __generator(this,(function(c){switch(c.label){case 0:t=Date.now(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||console.time(\"Fetch \"+a),c.label=1;case 1:return c.trys.push([1,4,5,6]),l={method:i,headers:o,body:r},\"GET\"===i&&delete l.body,[4,fetch$1(n,l)];case 2:return[4,c.sent().json()];case 3:return s=c.sent(),[3,6];case 4:return u=c.sent(),d=toError(u),this._errors&&this._errors.push(d),this._logs&&this._logs.push(\"Fetch to \".concat(a,\" errored in \").concat(Date.now()-t,\"ms\")),[2];case 5:return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||(console.timeEnd(\"Fetch \"+a),this._logs&&this._logs.push(\"Fetched \".concat(a,\" in \").concat(Date.now()-t,\"ms\"))),[7];case 6:return s&&(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&(fetchCache[a]=s),this.updateState((function(t){t[e]=s}))),[2,s]}}))}))},(l=this._asyncRequests&&this._asyncRequests.find((function(e){return isRequestInfo(e)&&e.url===n})))?((u=l.promise).then((function(t){t&&c.updateState((function(n){n[e]=t}))})),[2,u]):(d=s(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){c._asyncRequests&&c._asyncRequests.push(d)})),[2,d]))}))}))},t.prototype.unsubscribe=function(){this.subscriptions&&(this.subscriptions.unsubscribe(),this.subscriptions=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Subscription)},t.prototype.handleBuilderRequest=function(e,t){var n=this,i=tryEval(t,this.data,this._errors);this.subscriptions&&this.unsubscribe(),i&&this.subscriptions.add(this.builder.queueGetContent(i.model,i).subscribe((function(t){t&&n.updateState((function(n){n[e]=t}))})))},t.defaults={codegen:Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&location.href.includes(\"builder.codegen=true\"))},__decorate([debounceNextTick,__metadata(\"design:type\",Function),__metadata(\"design:paramtypes\",[]),__metadata(\"design:returntype\",void 0)],t.prototype,\"notifyStateChange\",null),t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component));function BuilderBlock(e){return e.type=\"react\",_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.Component(e)}function updateMetadata(e,t){var n=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.find((function(t){return\"string\"==typeof e?t.name===e:t.class===t}))||null,i=t(n);n&&i?_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(i.class||n.class,i):n&&!i||!n&&i&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(i.class,i)}function withBuilder(e,t){return BuilderBlock(t)(e),e}var isBuilderElement=function(e){return Boolean(\"object\"==typeof e&&e&&\"@builder.io/sdk:Element\"===(null==e?void 0:e[\"@type\"]))},withChildren=function(e){var t=react__WEBPACK_IMPORTED_MODULE_2___default().forwardRef((function(t,n){var i,r,o=__assign({},t),a=t.children||t.builderBlock&&t.builderBlock.children&&t.builderBlock.children.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{key:e.id,block:e})})),s=null===(r=null===(i=t.builderBlock)||void 0===i?void 0:i.component)||void 0===r?void 0:r.options;return s&&Object.keys(s).forEach((function(e){var t=s[e];Array.isArray(t)&&t.every(isBuilderElement)?o[e]=t.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{key:e.id,block:e})})):isBuilderElement(t)&&(o[e]=react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{block:t}))})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e,__assign({},o,{ref:n}),a)}));return t.builderOptions={canHaveChildren:!0},t},noWrap=function(e){var t=react__WEBPACK_IMPORTED_MODULE_2___default().forwardRef((function(t,n){var i=__assign(__assign({},t),t.attributes);return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e,__assign({},i,{ref:n}))}));return t.builderOptions={noWrap:!0},t},iconUrl=\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-text_fields-24px%20(1).svg?alt=media&token=12177b73-0ee3-42ca-98c6-0dd003de1929\",TextComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.textRef=null,t}return __extends(t,e),t.prototype.componentDidMount=function(){this.textRef&&!/{{([^}]+)}}/.test(this.props.text)&&(this.textRef.innerHTML=this.props.text)},t.prototype.evalExpression=function(e,t){return this.allowTextEdit?String(e):String(e).replace(/{{([^}]+)}}/g,(function(e,n){return tryEval(n,t)}))},Object.defineProperty(t.prototype,\"allowTextEdit\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&location.search.includes(\"builder.allowTextEdit=true\")&&!(this.props.builderBlock&&this.props.builderBlock.bindings&&(this.props.builderBlock.bindings[\"component.options.text\"]||this.props.builderBlock.bindings[\"options.text\"]||this.props.builderBlock.bindings.text))},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this,t={outline:\"none\",\"& p:first-of-type, & .builder-paragraph:first-of-type\":{margin:0},\"& > p, & .builder-paragraph\":{color:\"inherit\",lineHeight:\"inherit\",letterSpacing:\"inherit\",fontWeight:\"inherit\",fontSize:\"inherit\",textAlign:\"inherit\",fontFamily:\"inherit\"}};return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(n){var i;return(null===(i=n.content.meta)||void 0===i?void 0:i.rtlMode)&&(t.direction=\"rtl\"),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\",__assign({ref:function(t){e.textRef=t},css:t,className:\"builder-text\"},{dangerouslySetInnerHTML:{__html:e.evalExpression(e.props.text||e.props.content||\"\",n.state)}})))}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Text=withBuilder(TextComponent,{name:\"Text\",static:!0,image:iconUrl,inputs:[{name:\"text\",type:\"html\",required:!0,autoFocus:!0,bubble:!0,defaultValue:\"Enter some text...\"}],defaultStyles:{lineHeight:\"normal\",height:\"auto\",textAlign:\"center\"}});function Slot(e){var t=e.name,n=(0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(BuilderStoreContext),i=!n.context.symbolId;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",__assign({css:{pointerEvents:\"auto\"}},i&&{\"builder-slot\":t}),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{child:!0,parentElementId:n.context.symbolId,dataPath:\"symbol.data.\".concat(t),blocks:n.state[t]||[]}))}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(Slot,{name:\"Slot\",description:\"Allow child blocks to be inserted into this content when used as a Symbol\",docsLink:\"https://www.builder.io/c/docs/symbols-with-blocks\",image:\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F3aad6de36eae43b59b52c85190fdef56\",inputs:[{name:\"name\",type:\"string\",required:!0,defaultValue:\"children\"}]});var FragmentComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return this.props.builderBlock&&this.props.builderBlock.children&&this.props.builderBlock.children.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{block:e,key:e.id,index:t})}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Fragment=withBuilder(FragmentComponent,{name:\"Core:Fragment\",canHaveChildren:!0,noWrap:!0,static:!0,hideFromInsertMenu:!0}),DEFAULT_ASPECT_RATIO$2=.7004048582995948,defaultBlocks=[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",flexShrink:\"0\",position:\"relative\",marginTop:\"30px\",textAlign:\"center\",lineHeight:\"normal\",height:\"auto\",minHeight:\"20px\",minWidth:\"20px\",overflow:\"hidden\"}},component:{name:\"Image\",options:{image:\"https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d\",backgroundPosition:\"center\",backgroundSize:\"cover\",aspectRatio:DEFAULT_ASPECT_RATIO$2}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",flexShrink:\"0\",position:\"relative\",marginTop:\"30px\",textAlign:\"center\",lineHeight:\"normal\",height:\"auto\"}},component:{name:\"Text\",options:{text:\"<p>Enter some text...</p>\"}}}],ColumnsComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),Object.defineProperty(t.prototype,\"columns\",{get:function(){return this.props.columns||[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"gutterSize\",{get:function(){return\"number\"==typeof this.props.space?this.props.space||0:20},enumerable:!1,configurable:!0}),t.prototype.getWidth=function(e){return this.columns[e]&&this.columns[e].width||100/this.columns.length},t.prototype.getColumnWidth=function(e){var t=this.columns,n=this.gutterSize,i=this.getWidth(e),r=n*(t.length-1)*(i/100);return\"calc(\".concat(i,\"% - \").concat(r,\"px)\")},t.prototype.render=function(){var e,t,n,i,r=this,o=this.columns,a=this.gutterSize,s=(null===(i=null===(n=null===(t=this.props.builderState)||void 0===t?void 0:t.context.builderContent)||void 0===n?void 0:n.meta)||void 0===i?void 0:i.breakpoints)||{},l=getSizesForBreakpoints(s);return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{className:\"builder-columns\",css:__assign({display:\"flex\",height:\"100%\"},\"never\"!==this.props.stackColumnsAt&&(e={},e[\"@media (max-width: \".concat(\"tablet\"!==this.props.stackColumnsAt?l.small.max:l.medium.max,\"px)\")]={flexDirection:this.props.reverseColumnsWhenStacked?\"column-reverse\":\"column\",alignItems:\"stretch\"},e))},o.map((function(e,t){var n,i,o=e.link?Link:\"div\";return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),{key:t},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(o,__assign({className:\"builder-column\"},e.link?{href:e.link}:null,{css:__assign((n={display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",lineHeight:\"normal\"},n[\"& > .builder-blocks\"]={flexGrow:1},n.width=r.getColumnWidth(t),n.marginLeft=0===t?0:a,n),\"never\"!==r.props.stackColumnsAt&&(i={},i[\"@media (max-width: \".concat(\"tablet\"!==r.props.stackColumnsAt?l.small.max:l.medium.max,\"px)\")]={width:\"100%\",marginLeft:0},i))}),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{key:t,child:!0,parentElementId:r.props.builderBlock&&r.props.builderBlock.id,blocks:e.blocks,dataPath:\"component.options.columns.\".concat(t,\".blocks\")})))}))))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Columns=withBuilder(ColumnsComponent,{name:\"Columns\",static:!0,inputs:[{name:\"columns\",type:\"array\",broadcast:!0,subFields:[{name:\"blocks\",type:\"array\",hideFromUI:!0,defaultValue:defaultBlocks},{name:\"width\",type:\"number\",hideFromUI:!0,helperText:\"Width %, e.g. set to 50 to fill half of the space\"},{name:\"link\",type:\"url\",helperText:\"Optionally set a url that clicking this column will link to\"}],defaultValue:[{blocks:defaultBlocks},{blocks:defaultBlocks}],onChange:function(e){function t(){n.forEach((function(e){e.delete(\"width\")}))}var n=e.get(\"columns\");Array.isArray(n)&&(!n.find((function(e){return e.get(\"width\")}))||(n.find((function(e){return!e.get(\"width\")}))||100!==n.reduce((function(e,t){return e+t.get(\"width\")}),0))&&t())}},{name:\"space\",type:\"number\",defaultValue:20,helperText:\"Size of gap between columns\",advanced:!0},{name:\"stackColumnsAt\",type:\"string\",defaultValue:\"tablet\",helperText:\"Convert horizontal columns to vertical at what device size\",enum:[\"tablet\",\"mobile\",\"never\"],advanced:!0},{name:\"reverseColumnsWhenStacked\",type:\"boolean\",defaultValue:!1,helperText:\"When stacking columns for mobile devices, reverse the ordering\",advanced:!0}]}),EmbedComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.elementRef=null,t.scriptsInserted=new Set,t.scriptsRun=new Set,t}return __extends(t,e),t.prototype.shouldComponentUpdate=function(e){return e.content!==this.props.content},t.prototype.componentDidUpdate=function(e){this.props.content!==e.content&&this.findAndRunScripts()},t.prototype.componentDidMount=function(){this.findAndRunScripts()},t.prototype.findAndRunScripts=function(){if(this.elementRef&&\"undefined\"!=typeof window)for(var e=this.elementRef.getElementsByTagName(\"script\"),t=0;t<e.length;t++){var n=e[t];if(n.src){if(this.scriptsInserted.has(n.src))continue;this.scriptsInserted.add(n.src);var i=document.createElement(\"script\");i.async=!0,i.src=n.src,document.head.appendChild(i)}else{if(this.scriptsRun.has(n.innerText))continue;this.scriptsRun.add(n.innerText);try{new Function(n.innerText)()}catch(e){console.warn(\"Builder custom code component error:\",e)}}}},Object.defineProperty(t.prototype,\"content\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer?(this.props.content||\"\").replace(/<script[\\s\\S]*?<\\/script>/g,\"\"):this.props.content},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",{ref:function(t){return e.elementRef=t},className:\"builder-embed\",dangerouslySetInnerHTML:{__html:this.content}})},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Embed=withBuilder(EmbedComponent,{name:\"Embed\",static:!0,inputs:[{name:\"url\",type:\"url\",required:!0,defaultValue:\"\",helperText:\"e.g. enter a youtube url, google map, etc\"},{name:\"content\",type:\"html\",defaultValue:'<div style=\"padding: 20px; text-align: center\">(Choose an embed URL)<div>',hideFromUI:!0}]}),globalReplaceNodes={}||null,isShopify$1=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&\"Shopify\"in window;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&globalReplaceNodes){var customCodeQuerySelector_1=\".builder-custom-code\";try{var allCustomCodeElements_1=Array.from(document.querySelectorAll(customCodeQuerySelector_1)),builderTemplates=document.querySelectorAll(\"template[data-template-variant-id]\");builderTemplates.length&&Array.from(builderTemplates).forEach((function(e){var t=e.content.querySelectorAll(customCodeQuerySelector_1);t.length&&(allCustomCodeElements_1=allCustomCodeElements_1.concat(Array.from(t)))})),allCustomCodeElements_1.forEach((function(e){var t=e.parentElement,n=t&&t.getAttribute(\"builder-id\");n&&(globalReplaceNodes[n]=globalReplaceNodes[n]||[],globalReplaceNodes[n].push(isShopify$1?e:e.cloneNode(!0)))}))}catch(e){console.error(\"Builder replace nodes error:\",e)}}var CustomCodeComponent=function(e){function t(t){var n,i=this;if((i=e.call(this,t)||this).elementRef=null,i.originalRef=null,i.scriptsInserted=new Set,i.scriptsRun=new Set,i.firstLoad=!0,i.replaceNodes=!1,i.state={hydrated:!1},_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser){var r=null===(n=i.props.builderBlock)||void 0===n?void 0:n.id;if(i.replaceNodes=Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(t.replaceNodes||isShopify$1)&&r&&(null==globalReplaceNodes?void 0:globalReplaceNodes[r])),i.firstLoad&&i.props.builderBlock)if(r&&(null==globalReplaceNodes?void 0:globalReplaceNodes[r])){var o=globalReplaceNodes[r].shift()||null;i.originalRef=o,0===globalReplaceNodes[r].length&&delete globalReplaceNodes[r]}else if(i.replaceNodes){var a=document.querySelectorAll(\".\".concat(i.props.builderBlock.id,\" .builder-custom-code\"));if(1===a.length){var s=a[0];i.originalRef=s,i.originalRef.remove()}}}return i}return __extends(t,e),t.prototype.shouldComponentUpdate=function(e){return e.code!==this.props.code},Object.defineProperty(t.prototype,\"noReactRender\",{get:function(){var e;return Boolean(isShopify$1&&(null===(e=this.props.code)||void 0===e?void 0:e.match(/{[{%]/g)))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"isHydrating\",{get:function(){return!isShopify$1&&this.originalRef},enumerable:!1,configurable:!0}),t.prototype.componentDidUpdate=function(e){this.props.code!==e.code&&this.findAndRunScripts()},t.prototype.componentDidMount=function(){var e=this;this.firstLoad=!1,this.replaceNodes||(this.isHydrating?(this.setState({hydrated:!0}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){return e.findAndRunScripts()}))):this.findAndRunScripts()),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&this.replaceNodes&&this.originalRef&&this.elementRef&&this.elementRef.appendChild(this.originalRef)},t.prototype.findAndRunScripts=function(){if(this.elementRef&&\"undefined\"!=typeof window)for(var e=this.elementRef.getElementsByTagName(\"script\"),t=0;t<e.length;t++){var n=e[t];if(n.src){if(this.scriptsInserted.has(n.src))continue;this.scriptsInserted.add(n.src);var i=document.createElement(\"script\");i.async=!0,i.src=n.src,document.head.appendChild(i)}else if(!n.type||[\"text/javascript\",\"application/javascript\",\"application/ecmascript\"].includes(n.type)){if(this.scriptsRun.has(n.innerText))continue;try{this.scriptsRun.add(n.innerText),new Function(n.innerText)()}catch(e){console.warn(\"Builder custom code component error:\",e)}}}},Object.defineProperty(t.prototype,\"code\",{get:function(){return(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer||this.isHydrating&&this.firstLoad)&&this.props.scriptsClientOnly?(this.props.code||\"\").replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\"\"):this.props.code},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({ref:function(t){return e.elementRef=t},className:\"builder-custom-code\"},!this.replaceNodes&&!this.noReactRender&&{dangerouslySetInnerHTML:{__html:this.code}}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),CustomCode=withBuilder(CustomCodeComponent,{name:\"Custom Code\",static:!0,requiredPermissions:[\"editCode\"],inputs:[{name:\"code\",type:\"html\",required:!0,defaultValue:\"<p>Hello there, I am custom HTML code!</p>\",code:!0},__assign({name:\"replaceNodes\",type:\"boolean\",helperText:\"Preserve server rendered dom nodes\",advanced:!0},isShopify$1&&{defaultValue:!0}),__assign({name:\"scriptsClientOnly\",type:\"boolean\",helperText:\"Only print and run scripts on the client. Important when scripts influence DOM that could be replaced when client loads\",advanced:!0},!isShopify$1&&{defaultValue:!0})]}),IMAGE_FILE_TYPES=[\"jpeg\",\"jpg\",\"png\",\"svg\",\"webp\",\"gif\",\"jfif\",\"pjpeg\",\"pjp\",\"apng\",\"avif\",\"tif\",\"tiff\",\"heif\",\"bmp\",\"eps\",\"raw\",\"cr2\",\"nef\",\"orf\",\"sr2\",\"psd\",\"heic\",\"dib\",\"ai\"],VIDEO_FILE_TYPES=[\"mp4\",\"webm\",\"mkv\",\"flv\",\"vob\",\"ogv\",\"ogg\",\"drc\",\"gif\",\"gifv\",\"mng\",\"avi\",\"mov\",\"qt\",\"mts\",\"m2ts\",\"ts\",\"wmv\",\"yuv\",\"rm\",\"rmvb\",\"viv\",\"asf\",\"amv\",\"m4p\",\"mpeg\",\"mpe\",\"m2v\",\"m4v\",\"svi\",\"3gp\",\"3g2\",\"mxf\",\"roq\",\"nsv\",\"f4v\",\"f4p\",\"f4a\",\"f4b\"];function removeProtocol(e){return e.replace(/http(s)?:/,\"\")}function isElementInViewport(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function getShopifyImageUrl(e,t){if(!e||!(null==e?void 0:e.match(/cdn\\.shopify\\.com/))||!t)return e;if(\"master\"===t)return removeProtocol(e);var n=e.match(/(_\\d+x(\\d+)?)?(\\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\\?v=\\d+)?)/i);if(n){var i=e.split(n[0]),r=n[3],o=t.match(\"x\")?t:\"\".concat(t,\"x\");return removeProtocol(\"\".concat(i[0],\"_\").concat(o).concat(r))}return null}var DEFAULT_ASPECT_RATIO$1=.7041;function updateQueryParam(e,t,n){void 0===e&&(e=\"\");var i=new RegExp(\"([?&])\"+t+\"=.*?(&|$)\",\"i\"),r=-1!==e.indexOf(\"?\")?\"&\":\"?\";return e.match(i)?e.replace(i,\"$1\"+t+\"=\"+encodeURIComponent(n)+\"$2\"):e+r+t+\"=\"+encodeURIComponent(n)}function getSrcSet(e){if(!e)return e;var t=[100,200,400,800,1200,1600,2e3];if(e.match(/builder\\.io/)){var n=e,i=Number(e.split(\"?width=\")[1]);return isNaN(i)||(n=\"\".concat(n,\" \").concat(i,\"w\")),t.filter((function(e){return e!==i})).map((function(t){return\"\".concat(updateQueryParam(e,\"width\",t),\" \").concat(t,\"w\")})).concat([n]).join(\", \")}return e.match(/cdn\\.shopify\\.com/)?t.map((function(t){return[getShopifyImageUrl(e,\"\".concat(t,\"x\").concat(t)),t]})).filter((function(e){return!!e[0]})).map((function(e){var t=e[0],n=e[1];return\"\".concat(t,\" \").concat(n,\"w\")})).concat([e]).join(\", \"):e}var getSizes=function(e,t,n){var i,r,o,a,s,l,u,d;void 0===n&&(n={});var c=\"\";if(e){var p=e.split(\",\"),f=p.length;c=p.map((function(e,t){return f===t+1?e.replace(/\\([\\s\\S]*?\\)/g,\"\").trim():e})).join(\", \")}else if(t&&t.responsiveStyles){var m=[],h=!1,v=/^\\d+/,g=getSizesForBreakpoints(n);if(null===(o=null===(r=null===(i=t.responsiveStyles)||void 0===i?void 0:i.small)||void 0===r?void 0:r.width)||void 0===o?void 0:o.match(v)){h=!0;var b=\"(max-width: \".concat(g.small.max,\"px)\"),y=\"\".concat(b,\" \").concat(t.responsiveStyles.small.width.replace(\"%\",\"vw\"));m.push(y)}if(null===(l=null===(s=null===(a=t.responsiveStyles)||void 0===a?void 0:a.medium)||void 0===s?void 0:s.width)||void 0===l?void 0:l.match(v)){h=!0;b=\"(max-width: \".concat(g.medium.max,\"px)\"),y=\"\".concat(b,\" \").concat(t.responsiveStyles.medium.width.replace(\"%\",\"vw\"));m.push(y)}if(null===(d=null===(u=t.responsiveStyles)||void 0===u?void 0:u.large)||void 0===d?void 0:d.width){var _=t.responsiveStyles.large.width.replace(\"%\",\"vw\");m.push(_)}else h&&m.push(\"100vw\");m.length&&(c=m.join(\", \"))}return c},ImageComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={imageLoaded:!t.useLazyLoading,load:!t.useLazyLoading},t.pictureRef=null,t.scrollListener=null,t.intersectionObserver=null,t}return __extends(t,e),Object.defineProperty(t.prototype,\"useLazyLoading\",{get:function(){return!this.props.highPriority&&((!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||!location.search.includes(\"builder.lazyLoadImages=false\"))&&(!(!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||!location.href.includes(\"builder.lazyLoadImages=true\"))||this.props.lazy))},enumerable:!1,configurable:!0}),t.prototype.componentWillUnmount=function(){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(this.scrollListener&&(window.removeEventListener(\"scroll\",this.scrollListener),this.scrollListener=null),this.intersectionObserver&&this.pictureRef&&this.intersectionObserver.unobserve(this.pictureRef))},t.prototype.componentDidMount=function(){var e=this;if(this.props.lazy&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser)if(this.pictureRef&&isElementInViewport(this.pictureRef))this.setState({load:!0});else if(\"function\"==typeof IntersectionObserver&&this.pictureRef){(this.intersectionObserver=new IntersectionObserver((function(t,n){t.forEach((function(t){t.intersectionRatio>0&&(e.setState({load:!0}),e.pictureRef&&n.unobserve(e.pictureRef))}))}))).observe(this.pictureRef)}else{var t=throttle((function(n){if(e.pictureRef){var i=e.pictureRef.getBoundingClientRect(),r=window.innerHeight/2;i.top<window.innerHeight+r&&(e.setState(__assign(__assign({},e.state),{load:!0})),window.removeEventListener(\"scroll\",t),e.scrollListener=null)}}),400,{leading:!1,trailing:!0});this.scrollListener=t,window.addEventListener(\"scroll\",t,{capture:!0,passive:!0}),t()}},Object.defineProperty(t.prototype,\"image\",{get:function(){return this.props.image||this.props.src},enumerable:!1,configurable:!0}),t.prototype.getSrcSet=function(){var e=this.image;if(e&&\"string\"==typeof e&&!this.props.noWebp&&(e.match(/builder\\.io/)||e.match(/cdn\\.shopify\\.com/)))return getSrcSet(e)},t.prototype.render=function(){var e,t,n=this,i=this.props,r=i.aspectRatio,o=i.lazy,a=i.builderBlock,s=i.builderState,l=this.props.builderBlock&&this.props.builderBlock.children,u=this.props.srcset,d=getSizes(this.props.sizes,a,(null===(t=null===(e=null==s?void 0:s.context.builderContent)||void 0===e?void 0:e.meta)||void 0===t?void 0:t.breakpoints)||{}),c=this.image;u&&c&&c.includes(\"builder.io/api/v1/image\")?u.includes(c.split(\"?\")[0])||(console.debug(\"Removed given srcset\"),u=this.getSrcSet()):c&&!u&&(u=this.getSrcSet());var p=(null==a?void 0:a.id.startsWith(\"builder-pixel-\"))||this.props.highPriority,f=this.props.fitContent;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderMetaContext.Consumer,null,(function(e){var t,i=e.ampMode,a=i?\"amp-img\":\"img\",s=(!o||n.state.load||i)&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(a,__assign({},i?{layout:\"responsive\",height:n.props.height||(r?Math.round(1e3*r):void 0),width:n.props.width||(r?Math.round(1e3/r):void 0)}:null,{alt:n.props.altText,title:n.props.title,key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&\"string\"==typeof n.image&&n.image.split(\"?\")[0]||void 0,role:n.props.altText?void 0:\"presentation\",css:__assign(__assign({opacity:i?1:n.useLazyLoading&&!n.state.imageLoaded?0:1,transition:\"opacity 0.2s ease-in-out\",objectFit:n.props.backgroundSize||\"cover\",objectPosition:n.props.backgroundPosition||\"center\"},r&&!i&&{position:\"absolute\",height:\"100%\",width:\"100%\",left:0,top:0}),i&&(t={},t[\"& img\"]={objectFit:n.props.backgroundSize,objectPosition:n.props.backgroundPosition},t)),loading:p?\"eager\":\"lazy\",fetchPriority:p?\"high\":\"auto\",className:\"builder-image\"+(n.props.className?\" \"+n.props.className:\"\"),src:n.image},!i&&{onLoad:function(){return n.setState({imageLoaded:!0})}},{srcSet:u,sizes:!i&&d?d:void 0}));return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,i?s:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"picture\",{ref:function(e){return n.pictureRef=e}},u&&u.match(/builder\\.io/)&&!n.props.noWebp&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"source\",{srcSet:u.replace(/\\?/g,\"?format=webp&\"),type:\"image/webp\"}),s),!r||i||f&&l&&l.length?null:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{className:\"builder-image-sizer\",css:{width:\"100%\",paddingTop:100*r+\"%\",pointerEvents:\"none\",fontSize:0}},\" \"),l&&l.length?f?l.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})})):(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\"}},l.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})}))):null)}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Image=withBuilder(ImageComponent,{name:\"Image\",static:!0,image:\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4\",defaultStyles:{position:\"relative\",minHeight:\"20px\",minWidth:\"20px\",overflow:\"hidden\"},canHaveChildren:!0,inputs:[{name:\"image\",type:\"file\",bubble:!0,allowedFileTypes:IMAGE_FILE_TYPES,required:!0,defaultValue:\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F72c80f114dc149019051b6852a9e3b7a\",onChange:function(e){e.delete(\"srcset\"),e.delete(\"noWebp\");var t,n,i=e.get(\"image\"),r=e.get(\"aspectRatio\");if(fetch(i).then((function(e){return e.blob()})).then((function(t){t.type.includes(\"svg\")&&e.set(\"noWebp\",!0)})),i&&(!r||.7041===r))return(t=i,void 0===n&&(n=6e4),new Promise((function(e,i){var r=document.createElement(\"img\"),o=!1;r.onload=function(){o=!0,e(r)},r.addEventListener(\"error\",(function(e){console.warn(\"Image load failed\",e.error),i(e.error)})),r.src=t,setTimeout((function(){o||i(new Error(\"Image load timed out\"))}),n)}))).then((function(t){var n,r=e.get(\"aspectRatio\");e.get(\"image\")!==i||r&&.7041!==r||t.width&&t.height&&(e.set(\"aspectRatio\",(n=t.height/t.width,Math.round(1e3*n)/1e3)),e.set(\"height\",t.height),e.set(\"width\",t.width))}))}},{name:\"backgroundSize\",type:\"text\",defaultValue:\"cover\",enum:[{label:\"contain\",value:\"contain\",helperText:\"The image should never get cropped\"},{label:\"cover\",value:\"cover\",helperText:\"The image should fill its box, cropping when needed\"}]},{name:\"backgroundPosition\",type:\"text\",defaultValue:\"center\",enum:[\"center\",\"top\",\"left\",\"right\",\"bottom\",\"top left\",\"top right\",\"bottom left\",\"bottom right\"]},{name:\"altText\",type:\"string\",helperText:\"Text to display when the user has images off\"},{name:\"title\",type:\"string\",helperText:\"Text to display when hovering over the asset\"},{name:\"highPriority\",type:\"boolean\",advanced:!0,helperText:\"Mark this image as high priority compared to other images on the page. This prevents lazy loading of the image and tells the browser to load this image before others on the page.\"},{name:\"height\",type:\"number\",hideFromUI:!0},{name:\"width\",type:\"number\",hideFromUI:!0},{name:\"sizes\",type:\"string\",hideFromUI:!0},{name:\"srcset\",type:\"string\",hideFromUI:!0},{name:\"lazy\",type:\"boolean\",defaultValue:!0,hideFromUI:!0},{name:\"fitContent\",type:\"boolean\",helperText:\"When child blocks are provided, fit to them instead of using the image's aspect ratio\",defaultValue:!0},{name:\"aspectRatio\",type:\"number\",helperText:\"This is the ratio of height/width, e.g. set to 1.5 for a 300px wide and 200px tall photo. Set to 0 to not force the image to maintain it's aspect ratio\",advanced:!0,defaultValue:DEFAULT_ASPECT_RATIO$1}]}),DEFAULT_ASPECT_RATIO=.7004048582995948,VideoComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.video=null,t.containerRef=null,t.lazyVideoObserver=null,t.state={load:!t.lazyLoad},t}return __extends(t,e),Object.defineProperty(t.prototype,\"lazyLoad\",{get:function(){return!1!==this.props.lazyLoad},enumerable:!1,configurable:!0}),t.prototype.updateVideo=function(){var e=this,t=this.video;if(t){[\"muted\",\"playsInline\",\"autoPlay\"].forEach((function(n){var i=n.toLowerCase();e.props[n]?t.setAttribute(i,i):t.removeAttribute(i)}))}},t.prototype.componentDidUpdate=function(){this.updateVideo()},t.prototype.componentDidMount=function(){var e=this;if(this.updateVideo(),this.lazyLoad&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser){var t=new IntersectionObserver((function(t){t.forEach((function(t){t.isIntersecting&&(e.setState((function(e){return __assign(__assign({},e),{load:!0})})),e.lazyVideoObserver&&(e.lazyVideoObserver.disconnect(),e.lazyVideoObserver=null))}))}));this.containerRef&&(t.observe(this.containerRef),this.lazyVideoObserver=t)}},t.prototype.componentWillUnmount=function(){this.lazyVideoObserver&&(this.lazyVideoObserver.disconnect(),this.lazyVideoObserver=null)},t.prototype.render=function(){var e=this,t=this.props,n=t.aspectRatio,i=t.children;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{ref:function(t){return e.containerRef=t},css:{position:\"relative\"}},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"video\",{key:this.props.video||\"no-src\",poster:this.props.posterImage,ref:function(t){return e.video=t},autoPlay:this.props.autoPlay,muted:this.props.muted,controls:this.props.controls,loop:this.props.loop,preload:this.props.preload||\"metadata\",className:\"builder-video\",css:__assign({width:\"100%\",height:\"100%\",objectFit:this.props.fit,objectPosition:this.props.position,borderRadius:1},n?{position:\"absolute\"}:null)},(!this.lazyLoad||this.state.load)&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"source\",{type:\"video/mp4\",src:this.props.video})),!n||this.props.fitContent&&i?null:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{width:\"100%\",paddingTop:100*n+\"%\",pointerEvents:\"none\",fontSize:0}}),i&&this.props.fitContent?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\"}},i):i?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{pointerEvents:\"none\",display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\"}},i):null)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Video=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(withChildren(VideoComponent),{name:\"Video\",canHaveChildren:!0,defaultStyles:{minHeight:\"20px\",minWidth:\"20px\"},image:\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-videocam-24px%20(1).svg?alt=media&token=49a84e4a-b20e-4977-a650-047f986874bb\",inputs:[{name:\"video\",type:\"file\",allowedFileTypes:VIDEO_FILE_TYPES,bubble:!0,defaultValue:\"https://cdn.builder.io/o/assets%2FYJIGb4i01jvw0SRdL5Bt%2Fd27731a526464deba0016216f5f9e570%2Fcompressed?apiKey=YJIGb4i01jvw0SRdL5Bt&token=d27731a526464deba0016216f5f9e570&alt=media&optimized=true\",required:!0},{name:\"posterImage\",type:\"file\",allowedFileTypes:IMAGE_FILE_TYPES,helperText:\"Image to show before the video plays\"},{name:\"autoPlay\",type:\"boolean\",defaultValue:!0},{name:\"controls\",type:\"boolean\",defaultValue:!1},{name:\"muted\",type:\"boolean\",defaultValue:!0},{name:\"loop\",type:\"boolean\",defaultValue:!0},{name:\"playsInline\",type:\"boolean\",defaultValue:!0},{name:\"fit\",type:\"text\",defaultValue:\"cover\",enum:[\"contain\",\"cover\",\"fill\",\"auto\"]},{name:\"preload\",type:\"text\",defaultValue:\"metadata\",enum:[\"auto\",\"metadata\",\"none\"]},{name:\"fitContent\",type:\"boolean\",helperText:\"When child blocks are provided, fit to them instead of using the aspect ratio\",defaultValue:!0,advanced:!0},{name:\"position\",type:\"text\",defaultValue:\"center\",enum:[\"center\",\"top\",\"left\",\"right\",\"bottom\",\"top left\",\"top right\",\"bottom left\",\"bottom right\"]},{name:\"height\",type:\"number\",advanced:!0},{name:\"width\",type:\"number\",advanced:!0},{name:\"aspectRatio\",type:\"number\",advanced:!0,defaultValue:DEFAULT_ASPECT_RATIO},{name:\"lazyLoad\",type:\"boolean\",helperText:'Load this video \"lazily\" - as in only when a user scrolls near the video. Recommended for optmized performance and bandwidth consumption',defaultValue:!0,advanced:!0}]}),size=function(e){return Object.keys(e).length},isShopify=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&\"Shopify\"in window,refs={};if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser)try{Array.from(document.querySelectorAll(\"[builder-static-symbol]\")).forEach((function(e){var t=e.getAttribute(\"builder-static-symbol\");t&&(refs[t]=e)}))}catch(e){console.error(\"Builder replace nodes error:\",e)}var SymbolComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ref=null,t.staticRef=null,t.isEditingThisSymbol=!1,t}return __extends(t,e),Object.defineProperty(t.prototype,\"placeholder\",{get:function(){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{padding:10}},\"Symbols let you reuse dynamic elements across your content. Please choose a model and entry for this symbol.\")},enumerable:!1,configurable:!0}),t.prototype.componentDidMount=function(){var e,t,n,i=this;this.useStatic&&this.staticRef&&refs[null===(e=this.props.builderBlock)||void 0===e?void 0:e.id]&&(null===(t=this.staticRef.parentNode)||void 0===t||t.replaceChild(refs[null===(n=this.props.builderBlock)||void 0===n?void 0:n.id],this.staticRef)),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){var e=i.props.symbol||{},t=e.model,n=e.entry;i.isEditingThisSymbol=Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&t===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.editingModel&&n&&location.search.includes(\"overrides.\".concat(n)))}))},Object.defineProperty(t.prototype,\"useStatic\",{get:function(){var e;return Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&refs[null===(e=this.props.builderBlock)||void 0===e?void 0:e.id]&&!(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing))},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e,t,n=this;if(this.useStatic)return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{ref:function(e){return n.staticRef=e}});var i=this.props.symbol,r=!1;i||(r=!0);var o=this.props.dataOnly?NoWrap:this.props.builderBlock&&this.props.builderBlock.tagName||\"div\",a=i||{},s=a.model,l=a.entry,u=a.data,d=a.content,c=a.inline,p=a.ownerId,f=(null==i?void 0:i.dynamic)||this.props.dynamic;s&&(l||f)||(null===(e=null==d?void 0:d.data)||void 0===e?void 0:e.blocksJs)||c||(r=!0),this.isEditingThisSymbol&&(r=!1);var m=f?null===(t=this.props.builderBlock)||void 0===t?void 0:t.id:[s,l].join(\":\"),h=u&&size(u)&&hash_sum__WEBPACK_IMPORTED_MODULE_4___default()(u);m&&h&&h.length<300&&(m+=\":\"+h);var v=this.props.attributes||{};return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,{key:(s||\"no model\")+\":\"+(l||\"no entry\"+this.isEditingThisSymbol)},(function(e){var t,a,c,f,h,g,b,y,_,x,S,k=\"\".concat(m,\"_\").concat((null===(t=null==e?void 0:e.state)||void 0===t?void 0:t.locale)||\"Default\");return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(o,__assign({\"data-model\":s},v,{className:(v.class||v.className||\"\")+\" builder-symbol\"+((null==i?void 0:i.inline)?\" builder-inline-symbol\":\"\")+((null==i?void 0:i.dynamic)||n.props.dynamic?\" builder-dynamic-symbol\":\"\")}),r?n.placeholder:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderComponent,__assign({},p&&{apiKey:p},(null===(a=e.state)||void 0===a?void 0:a.locale)&&{locale:e.state.locale},{isChild:!0,ref:function(e){return n.ref=e},context:__assign(__assign({},e.context),{symbolId:null===(c=n.props.builderBlock)||void 0===c?void 0:c.id}),model:s,entry:l,data:__assign(__assign(__assign({},u),!!n.props.inheritState&&omit$2(e.state,\"children\")),null===(_=null===(y=null===(b=null===(g=null===(h=null===(f=n.props.builderBlock)||void 0===f?void 0:f.component)||void 0===h?void 0:h.options)||void 0===g?void 0:g.symbol)||void 0===b?void 0:b.content)||void 0===y?void 0:y.data)||void 0===_?void 0:_.state),renderLink:e.renderLink,inlineContent:null==i?void 0:i.inline},d&&{content:d},{key:k,options:__assign(__assign({},!n.isEditingThisSymbol&&{key:k,noEditorUpdates:!0}),\"content\"===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.singletonInstance.apiEndpoint&&l&&{query:{id:l}}),codegen:!!(null===(x=null==d?void 0:d.data)||void 0===x?void 0:x.blocksJs),hydrate:null===(S=e.state)||void 0===S?void 0:S._hydrate,builderBlock:n.props.builderBlock,dataOnly:n.props.dataOnly,nonce:e.context.nonce}),n.props.children))}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Symbol$1=withBuilder(SymbolComponent,{name:\"Symbol\",noWrap:!0,static:!0,inputs:[{name:\"symbol\",type:\"uiSymbol\"},{name:\"dataOnly\",helperText:\"Make this a data symbol that doesn't display any UI\",type:\"boolean\",defaultValue:!1,advanced:!0,hideFromUI:!0},{name:\"inheritState\",helperText:\"Inherit the parent component state and data\",type:\"boolean\",defaultValue:isShopify,advanced:!0},{name:\"renderToLiquid\",helperText:\"Render this symbols contents to liquid. Turn off to fetch with javascript and use custom targeting\",type:\"boolean\",defaultValue:isShopify,advanced:!0,hideFromUI:!0},{name:\"useChildren\",hideFromUI:!0,type:\"boolean\"}]}),ButtonComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){var e=this.props.link?Link:\"span\";return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e,__assign({role:\"button\",href:this.props.link,target:this.props.openLinkInNewTab?\"_blank\":void 0},this.props.attributes),this.props.text)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Button=withBuilder(ButtonComponent,{name:\"Core:Button\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F81a15681c3e74df09677dfc57a615b13\",defaultStyles:{appearance:\"none\",paddingTop:\"15px\",paddingBottom:\"15px\",paddingLeft:\"25px\",paddingRight:\"25px\",backgroundColor:\"#000000\",color:\"white\",borderRadius:\"4px\",textAlign:\"center\",cursor:\"pointer\"},inputs:[{name:\"text\",type:\"text\",defaultValue:\"Click me!\",bubble:!0},{name:\"link\",type:\"url\",bubble:!0},{name:\"openLinkInNewTab\",type:\"boolean\",defaultValue:!1,friendlyName:\"Open link in new tab\"}],static:!0,noWrap:!0}),SectionComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ref=null,t.unmountCallbacks=[],t.state={inView:!1},t}return __extends(t,e),Object.defineProperty(t.prototype,\"renderContents\",{get:function(){return!0!==this.props.lazyLoad||this.state.inView},enumerable:!1,configurable:!0}),t.prototype.componentWillUnmount=function(){this.unmountCallbacks.forEach((function(e){return e()}))},t.prototype.componentDidMount=function(){var e=this;if(this.props.lazyLoad)if(\"undefined\"!=typeof IntersectionObserver&&this.ref){var t=new IntersectionObserver((function(t,n){t.forEach((function(t){t.intersectionRatio>0&&(e.setState({inView:!0}),e.ref&&n.unobserve(e.ref))}))}),{rootMargin:\"10px\"});t.observe(this.ref),this.unmountCallbacks.push((function(){e.ref&&t.unobserve(e.ref)}))}else this.setState({inView:!0})},t.prototype.render=function(){var e=this;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"section\",{ref:function(t){return e.ref=t},css:__assign({width:\"100%\",alignSelf:\"stretch\",flexGrow:1,boxSizing:\"border-box\",maxWidth:this.props.maxWidth,display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",marginLeft:\"auto\",marginRight:\"auto\"},this.renderContents?null:this.props.lazyStyles)},this.renderContents?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,this.props.children,this.props.builderBlock&&this.props.builderBlock.children&&this.props.builderBlock.children.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})}))):null)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Section=withBuilder(SectionComponent,{name:\"Core:Section\",static:!0,image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F682efef23ace49afac61748dd305c70a\",inputs:[{name:\"maxWidth\",type:\"number\",defaultValue:1200},{name:\"lazyLoad\",type:\"boolean\",defaultValue:!1,advanced:!0,description:\"Only render this section when in view\"}],defaultStyles:{paddingLeft:\"20px\",paddingRight:\"20px\",paddingTop:\"50px\",paddingBottom:\"50px\",marginTop:\"0px\",width:\"100vw\",marginLeft:\"calc(50% - 50vw)\"},canHaveChildren:!0,defaultChildren:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{textAlign:\"center\"}},component:{name:\"Text\",options:{text:\"<p><b>I am a section! My content keeps from getting too wide, so that it's easy to read even on big screens.</b></p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur</p>\"}}}]}),StateProviderComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Consumer,null,(function(t){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Provider,{value:__assign(__assign({},t),{state:__assign(__assign({},t.state),e.props.state),context:__assign(__assign({},t.context),e.props.context)})},e.props.builderBlock&&e.props.builderBlock.children&&e.props.builderBlock.children.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{block:e,key:e.id,index:t,child:!0})})),e.props.children)}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),StateProvider=withBuilder(StateProviderComponent,{name:\"Builder:StateProvider\",canHaveChildren:!0,static:!0,noWrap:!0,hideFromInsertMenu:!0}),prefetched=new Set;function searchToObject(e){var t=(e.search||\"\").substring(1).split(\"&\"),n={};for(var i in t)if(t[i]&&\"string\"==typeof t[i]){var r=t[i].split(\"=\");n[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return n}var RouterComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.builder=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,t.routed=!1,t.preloadQueue=0,t.onPopState=function(e){t.updateLocationState()},t.onMouseOverOrTouchStart=function(e){if(!(t.preloadQueue>4)&&!1!==t.props.preloadOnHover){var n=t.findHrefTarget(e);if(n){var i=n.getAttribute(\"href\");if(i){if(!t.isRelative(i)){var r=t.convertToRelative(i);if(!r)return;i=r}if(!i.startsWith(\"#\")&&!prefetched.has(i)){prefetched.add(i);var o=t.parseUrl(i);t.preloadQueue++;var a=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getUserAttributes();a.urlPath=o.pathname,a.queryString=o.search;var s=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.get(t.model,{userAttributes:a,key:t.model+\":\"+o.pathname+o.search}).subscribe((function(){t.preloadQueue--,s.unsubscribe()}))}}}}},t.onClick=function(e){return __awaiter(t,void 0,void 0,(function(){var t,n,i,r;return __generator(this,(function(o){if(!1===this.props.handleRouting)return[2];if(0!==e.button||e.ctrlKey||e.defaultPrevented||e.metaKey)return[2];if(!(t=this.findHrefTarget(e)))return[2];if(t.target&&\"_client\"!==t.target)return[2];if(!(n=t.getAttribute(\"href\")))return[2];if(this.props.onRoute&&(i={url:n,anchorNode:t,preventDefault:function(){this.defaultPrevented=!0},defaultPrevented:!1},this.props.onRoute(i),i.defaultPrevented))return[2];if(!this.isRelative(n)){if(!(r=this.convertToRelative(n)))return[2];n=r}return n.startsWith(\"#\")||(e.preventDefault(),this.route(n)),[2]}))}))},t.privateState=null,t}return __extends(t,e),t.prototype.route=function(e){var t;return this.routed=!0,\"function\"==typeof(null===(t=window.history)||void 0===t?void 0:t.pushState)?(history.pushState(null,\"\",e),this.updateLocationState(),!0):(location.href=e,!1)},t.prototype.updateLocationState=function(){this.privateState&&this.privateState.update((function(e){e.location=__assign(__assign({},e.location),{pathname:location.pathname,search:location.search,path:location.pathname.split(\"/\").slice(1),query:searchToObject(location)})}))},Object.defineProperty(t.prototype,\"model\",{get:function(){return this.props.model||\"page\"},enumerable:!1,configurable:!0}),t.prototype.componentDidMount=function(){\"undefined\"!=typeof document&&(document.addEventListener(\"click\",this.onClick),window.addEventListener(\"popstate\",this.onPopState),document.addEventListener(\"mouseover\",this.onMouseOverOrTouchStart),document.addEventListener(\"touchstart\",this.onMouseOverOrTouchStart))},t.prototype.componentWillUnmount=function(){\"undefined\"!=typeof document&&(document.removeEventListener(\"click\",this.onClick),document.removeEventListener(\"mouseover\",this.onMouseOverOrTouchStart),window.removeEventListener(\"popstate\",this.onPopState),document.removeEventListener(\"touchstart\",this.onMouseOverOrTouchStart))},t.prototype.render=function(){var e=this,t=this.model;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(n){e.privateState=n;var i=n.state&&n.state.location&&n.state.location.pathname+n.state.location.search;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{className:\"builder-router\",\"data-model\":t},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"style\",{nonce:n.context.nonce},\"\\n                @keyframes builderLoadingSpinner {\\n                  0% {\\n                    transform: rotate(0deg);\\n                  }\\n                  100% {\\n                    transform: rotate(360deg);\\n                  }\\n                }\\n                /* TODO: overridable tag */\\n                .builder-page-loading {\\n                  -webkit-animation: builderLoadingSpinner 1s infinite linear;\\n                  animation: builderLoadingSpinner 1s infinite linear;\\n                  -webkit-transform: translateZ(0);\\n                  transform: translateZ(0);\\n                  border-radius: 50%;\\n                  width: 36px;\\n                  height: 36px;\\n                  margin: 6px auto;\\n                  position: relative;\\n                  border: 1px solid transparent;\\n                  border-left: 1px solid #808284;\\n                }\\n              \"),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderComponent,{key:i,data:e.props.data,content:e.routed?void 0:e.props.content,modelName:t,options:{key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing?void 0:e.model+\":\"+i},nonce:n.context.nonce},e.props.children||(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{display:\"flex\"}},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{margin:\"40vh auto\"},className:\"builder-page-loading\"}))))}))},t.prototype.findHrefTarget=function(e){for(var t=e.target;t;){if(t instanceof HTMLAnchorElement&&t.getAttribute(\"href\"))return t;if(t===e.currentTarget)break;t=t.parentElement}return null},t.prototype.isRelative=function(e){return!e.match(/^(\\/\\/|https?:\\/\\/)/i)},t.prototype.parseUrl=function(e){var t=document.createElement(\"a\");return t.href=e,t},t.prototype.convertToRelative=function(e){var t=this.parseUrl(location.href),n=this.parseUrl(e);if(t.host===n.host){var i=n.pathname+(n.search?n.search:\"\");return i.startsWith(\"#\")?null:i||\"/\"}return null},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Router=withBuilder(RouterComponent,{name:\"Core:Router\",hideFromInsertMenu:!0,inputs:[{name:\"model\",type:\"string\",defaultValue:\"page\",advanced:!0},{name:\"handleRouting\",type:\"boolean\",defaultValue:!0,advanced:!0},{name:\"preloadOnHover\",type:\"boolean\",defaultValue:!0,advanced:!0},{name:\"onRoute\",type:\"function\",advanced:!0}]});function Mutation(e){var t,n,i=react__WEBPACK_IMPORTED_MODULE_2___default().useRef(null);useWaitForSelector(e.selector,(function(t){\"afterEnd\"!==e.type&&(t.innerHTML=\"\"),t.appendChild(i.current.firstElementChild)}));var r=null===(t=e.builderBlock)||void 0===t?void 0:t.children;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\",{style:{display:\"none\"},ref:i},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{style:{display:\"inline\"},child:!0,parentElementId:null===(n=e.builderBlock)||void 0===n?void 0:n.id,dataPath:\"this.children\",blocks:r}))}function useWaitForSelector(e,t){react__WEBPACK_IMPORTED_MODULE_2___default().useLayoutEffect((function(){try{var n=document.querySelector(e);if(n)return void t(n)}catch(e){console.warn(e)}var i=new MutationObserver((function(){try{var n=document.querySelector(e);n&&(i.disconnect(),t(n))}catch(e){console.warn(e)}}));return i.observe(document.body,{attributes:!0,subtree:!0,characterData:!0}),function(){i.disconnect()}}),[e])}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(Mutation,{name:\"Builder:Mutation\",canHaveChildren:!0,noWrap:!0,hideFromInsertMenu:!0,inputs:[{name:\"type\",type:\"string\",defaultValue:\"replace\",enum:[{label:\"Replace\",value:\"replace\",helperText:\"Replace the contents of this site region with content from Builder\"},{label:\"Append\",value:\"afterEnd\",helperText:\"Append Builder content after the chosen site region\"}]},{name:\"selector\",type:\"builder:domSelector\"}]});var get=function(e,t,n){var i=String.prototype.split.call(t,/[,[\\].]+?/).filter(Boolean).reduce((function(e,t){return null!=e?e[t]:e}),e);return void 0===i||i===e?n:i},MULTIPART_CONTENT_TYPE=\"multipart/form-data\",JSON_CONTENT_TYPE=\"application/json\",ENCODED_CONTENT_TYPE=\"application/x-www-form-urlencoded\",FormComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ref=null,t.state={state:\"unsubmitted\",responseData:null,formErrorMessage:\"\"},t}return __extends(t,e),Object.defineProperty(t.prototype,\"submissionState\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.props.previewState||this.state.state},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Provider,{value:__assign(__assign({},t),{state:__assign(__assign({},t.state),{formErrorMessage:e.state.formErrorMessage})})},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"form\",__assign({},e.props.validate?{}:{noValidate:!0},{ref:function(t){return e.ref=t},action:!e.props.sendWithJs&&e.props.action?e.props.action:void 0,method:e.props.method,name:e.props.name,onSubmit:function(t){var n,i=e.props.sendWithJs||\"email\"===e.props.sendSubmissionsTo;if(\"zapier\"===e.props.sendSubmissionsTo)t.preventDefault();else if(i){if(!e.props.action&&\"email\"!==e.props.sendSubmissionsTo)return void t.preventDefault();t.preventDefault();var r=t.currentTarget,o=e.props.customHeaders||{},a=void 0,s=new FormData(r),l=Array.from(t.currentTarget.querySelectorAll(\"input,select,textarea\")).filter((function(e){return!!e.name})).filter((function(e){return!!e.name&&(\"radio\"!==e.type||e.checked)})).map((function(e){var t,n=e.name;if(e instanceof HTMLInputElement)if(\"radio\"===e.type){if(e.checked)return{key:n,value:t=e.value}}else if(\"checkbox\"===e.type)t=e.checked;else if(\"number\"===e.type||\"range\"===e.type){var i=e.valueAsNumber;isNaN(i)||(t=i)}else t=\"file\"===e.type?e.files:e.value;else t=e.value;return{key:n,value:t}})),u=e.props.contentType;if(\"email\"===e.props.sendSubmissionsTo&&(u=MULTIPART_CONTENT_TYPE),Array.from(l).forEach((function(e){var t=e.value;(t instanceof File||Array.isArray(t)&&t[0]instanceof File||t instanceof FileList)&&(u=MULTIPART_CONTENT_TYPE)})),u===MULTIPART_CONTENT_TYPE)a=s;else if(u===JSON_CONTENT_TYPE){var d={};Array.from(l).forEach((function(e){var t=e.value,n=e.key;set(d,n,t)})),a=JSON.stringify(d)}else{if(u!==ENCODED_CONTENT_TYPE)return void console.error(\"Unsupported content type: \",u);a=Array.from(l).map((function(e){var t=e.value,n=e.key;return encodeURIComponent(n)+\"=\"+encodeURIComponent(t)})).join(\"&\")}u&&u!==MULTIPART_CONTENT_TYPE&&(i&&(null===(n=e.props.action)||void 0===n?void 0:n.includes(\"zapier.com\"))||(o[\"content-type\"]=u));var c=new CustomEvent(\"presubmit\",{detail:{body:a}});if(e.ref&&(e.ref.dispatchEvent(c),c.defaultPrevented))return;e.setState(__assign(__assign({},e.state),{state:\"sending\"}));var p=\"\".concat(\"dev\"===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.env?\"http://localhost:5000\":\"https://builder.io\",\"/api/v1/form-submit?apiKey=\").concat(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey,\"&to=\").concat(btoa(e.props.sendSubmissionsToEmail||\"\"),\"&name=\").concat(encodeURIComponent(e.props.name||\"\"));fetch(\"email\"===e.props.sendSubmissionsTo?p:e.props.action,{body:a,headers:o,method:e.props.method||\"post\"}).then((function(t){return __awaiter(e,void 0,void 0,(function(){var e,n,i,r,o;return __generator(this,(function(a){switch(a.label){case 0:return(n=t.headers.get(\"content-type\"))&&-1!==n.indexOf(JSON_CONTENT_TYPE)?[4,t.json()]:[3,2];case 1:return e=a.sent(),[3,4];case 2:return[4,t.text()];case 3:e=a.sent(),a.label=4;case 4:if(!t.ok&&this.props.errorMessagePath&&(i=get(e,this.props.errorMessagePath))&&(\"string\"!=typeof i&&(i=JSON.stringify(i)),this.setState(__assign(__assign({},this.state),{formErrorMessage:i}))),this.setState(__assign(__assign({},this.state),{responseData:e,state:t.ok?\"success\":\"error\"})),t.ok){if(r=new CustomEvent(\"submit:success\",{detail:{res:t,body:e}}),this.ref){if(this.ref.dispatchEvent(r),r.defaultPrevented)return[2];!1!==this.props.resetFormOnSubmit&&this.ref.reset()}this.props.successUrl&&(this.ref?(o=new CustomEvent(\"route\",{detail:{url:this.props.successUrl}}),this.ref.dispatchEvent(o),o.defaultPrevented||(location.href=this.props.successUrl)):location.href=this.props.successUrl)}return[2]}}))}))}),(function(t){var n=new CustomEvent(\"submit:error\",{detail:{error:t}});e.ref&&(e.ref.dispatchEvent(n),n.defaultPrevented)||e.setState(__assign(__assign({},e.state),{responseData:t,state:\"error\"}))}))}}},e.props.attributes),e.props.builderBlock&&e.props.builderBlock.children&&e.props.builderBlock.children.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})})),\"error\"===e.submissionState&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{dataPath:\"errorMessage\",blocks:e.props.errorMessage}),\"sending\"===e.submissionState&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{dataPath:\"sendingMessage\",blocks:e.props.sendingMessage}),\"error\"===e.submissionState&&e.state.responseData&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\",{className:\"builder-form-error-text\",css:{padding:10,color:\"red\",textAlign:\"center\"}},JSON.stringify(e.state.responseData,null,2)),\"success\"===e.submissionState&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{dataPath:\"successMessage\",blocks:e.props.successMessage})))}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Form=withBuilder(FormComponent,{name:\"Form:Form\",defaults:{responsiveStyles:{large:{marginTop:\"15px\",paddingBottom:\"15px\"}}},image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fef36d2a846134910b64b88e6d18c5ca5\",inputs:[{name:\"sendSubmissionsTo\",type:\"string\",enum:[{label:\"Send to email\",value:\"email\",helperText:\"Send form submissions to the email address of your choosing\"},{label:\"Custom\",value:\"custom\",helperText:\"Handle where the form requests go manually with a little code, e.g. to your own custom backend\"}],defaultValue:\"email\"},{name:\"sendSubmissionsToEmail\",type:\"string\",required:!0,defaultValue:\"your@email.com\",showIf:'options.get(\"sendSubmissionsTo\") === \"email\"'},{name:\"sendWithJs\",type:\"boolean\",helperText:\"Set to false to use basic html form action\",defaultValue:!0,showIf:'options.get(\"sendSubmissionsTo\") === \"custom\"'},{name:\"name\",type:\"string\",defaultValue:\"My form\"},{name:\"action\",type:\"string\",helperText:\"URL to send the form data to\",showIf:'options.get(\"sendSubmissionsTo\") === \"custom\"'},{name:\"contentType\",type:\"string\",defaultValue:JSON_CONTENT_TYPE,advanced:!0,enum:[JSON_CONTENT_TYPE,MULTIPART_CONTENT_TYPE,ENCODED_CONTENT_TYPE],showIf:'options.get(\"sendSubmissionsTo\") === \"custom\" && options.get(\"sendWithJs\") === true'},{name:\"method\",type:\"string\",showIf:'options.get(\"sendSubmissionsTo\") === \"custom\"',defaultValue:\"POST\",advanced:!0},{name:\"previewState\",type:\"string\",enum:[\"unsubmitted\",\"sending\",\"success\",\"error\"],defaultValue:\"unsubmitted\",helperText:'Choose a state to edit, e.g. choose \"success\" to show what users see on success and edit the message',showIf:'options.get(\"sendSubmissionsTo\") !== \"zapier\" && options.get(\"sendWithJs\") === true'},{name:\"successUrl\",type:\"url\",helperText:\"Optional URL to redirect the user to on form submission success\",showIf:'options.get(\"sendSubmissionsTo\") !== \"zapier\" && options.get(\"sendWithJs\") === true'},{name:\"resetFormOnSubmit\",type:\"boolean\",showIf:function(e){return\"custom\"===e.get(\"sendSubmissionsTo\")&&!0===e.get(\"sendWithJs\")},advanced:!0},{name:\"successMessage\",type:\"uiBlocks\",hideFromUI:!0,defaultValue:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Thanks!</span>\"}}}]},{name:\"validate\",type:\"boolean\",defaultValue:!0,advanced:!0},{name:\"errorMessagePath\",type:\"text\",advanced:!0,helperText:'Path to where to get the error message from in a JSON response to display to the user, e.g. \"error.message\" for a response like { \"error\": { \"message\": \"this username is taken\" }}'},{name:\"errorMessage\",type:\"uiBlocks\",hideFromUI:!0,defaultValue:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},bindings:{\"component.options.text\":\"state.formErrorMessage || block.component.options.text\"},component:{name:\"Text\",options:{text:\"<span>Form submission error :( Please check your answers and try again</span>\"}}}]},{name:\"sendingMessage\",type:\"uiBlocks\",hideFromUI:!0,defaultValue:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Sending...</span>\"}}}]},__assign(__assign({name:\"customHeaders\",type:\"map\"},{valueType:{type:\"string\"}}),{advanced:!0,showIf:'options.get(\"sendSubmissionsTo\") === \"custom\" && options.get(\"sendWithJs\") === true'})],noWrap:!0,canHaveChildren:!0,defaultChildren:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Enter your name</span>\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Form:Input\",options:{name:\"name\",placeholder:\"Jane Doe\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Enter your email</span>\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Form:Input\",options:{name:\"email\",placeholder:\"jane@doe.com\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Form:SubmitButton\",options:{text:\"Submit\"}}}]}),FormInputComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"input\",__assign({key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.props.defaultValue?this.props.defaultValue:\"default-key\",placeholder:this.props.placeholder,type:this.props.type,name:this.props.name},void 0===this.props.value?{defaultValue:this.props.defaultValue}:{value:this.props.value},{required:this.props.required},this.props.attributes))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),FormInput=withBuilder(FormInputComponent,{name:\"Form:Input\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fad6f37889d9e40bbbbc72cdb5875d6ca\",inputs:[{name:\"type\",type:\"text\",enum:[\"text\",\"number\",\"email\",\"url\",\"checkbox\",\"radio\",\"range\",\"date\",\"datetime-local\",\"search\",\"tel\",\"time\",\"file\",\"month\",\"week\",\"password\",\"color\",\"hidden\"],defaultValue:\"text\"},{name:\"name\",type:\"string\",required:!0,helperText:'Every input in a form needs a unique name describing what it takes, e.g. \"email\"'},{name:\"placeholder\",type:\"string\",defaultValue:\"Hello there\",helperText:\"Text to display when there is no value\"},{name:\"defaultValue\",type:\"string\"},{name:\"value\",type:\"string\",advanced:!0},{name:\"required\",type:\"boolean\",helperText:\"Is this input required to be filled out to submit a form\",defaultValue:!1}],noWrap:!0,static:!0,defaultStyles:{paddingTop:\"10px\",paddingBottom:\"10px\",paddingLeft:\"10px\",paddingRight:\"10px\",borderRadius:\"3px\",borderWidth:\"1px\",borderStyle:\"solid\",borderColor:\"#ccc\"}}),FormSubmitButtonComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"button\",__assign({type:\"submit\"},this.props.attributes),this.props.text)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),FormSubmitButton=withBuilder(FormSubmitButtonComponent,{name:\"Form:SubmitButton\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fdf2820ffed1f4349a94c40b3221f5b98\",defaultStyles:{appearance:\"none\",paddingTop:\"15px\",paddingBottom:\"15px\",paddingLeft:\"25px\",paddingRight:\"25px\",backgroundColor:\"#3898EC\",color:\"white\",borderRadius:\"4px\",cursor:\"pointer\"},inputs:[{name:\"text\",type:\"text\",defaultValue:\"Click me\"}],static:!0,noWrap:!0}),LabelComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"label\",__assign({htmlFor:this.props.for},this.props.attributes),this.props.text&&react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"span\",{className:\"builder-label-text\",dangerouslySetInnerHTML:{__html:this.props.text}}),this.props.builderBlock&&this.props.builderBlock.children&&this.props.builderBlock.children.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{key:e.id,block:e})})))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Label=withBuilder(LabelComponent,{name:\"Form:Label\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F9322342f04b545fb9a8091cd801dfb5b\",inputs:[{name:\"text\",type:\"html\",richText:!0,defaultValue:\"Label\"},{name:\"for\",type:\"text\",helperText:\"The name of the input this label is for\",advanced:!0}],noWrap:!0,static:!0,canHaveChildren:!0}),FormSelectComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){var e=this.props.options;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"select\",__assign({value:this.props.value,key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.props.defaultValue?this.props.defaultValue:\"default-key\",defaultValue:this.props.defaultValue,name:this.props.name,required:this.props.required},this.props.attributes),e&&e.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"option\",{value:e.value},e.name||e.value)})))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),FormSelect=withBuilder(FormSelectComponent,{name:\"Form:Select\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F83acca093fb24aaf94dee136e9a4b045\",defaultStyles:{alignSelf:\"flex-start\"},inputs:[{name:\"options\",type:\"list\",required:!0,subFields:[{name:\"value\",type:\"text\",required:!0},{name:\"name\",type:\"text\"}],defaultValue:[{value:\"option 1\"},{value:\"option 2\"}]},{name:\"name\",type:\"string\",required:!0,helperText:'Every select in a form needs a unique name describing what it gets, e.g. \"email\"'},{name:\"defaultValue\",type:\"string\"},{name:\"value\",type:\"string\",advanced:!0},{name:\"required\",type:\"boolean\",defaultValue:!1}],static:!0,noWrap:!0}),TextAreaComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"textarea\",__assign({placeholder:this.props.placeholder,name:this.props.name,value:this.props.value,defaultValue:this.props.defaultValue,required:this.props.required},this.props.attributes))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),TextArea=withBuilder(TextAreaComponent,{name:\"Form:TextArea\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Ff74a2f3de58c4c3e939204e5b6b8f6c3\",inputs:[{advanced:!0,name:\"value\",type:\"string\"},{name:\"name\",type:\"string\",required:!0,helperText:'Every input in a form needs a unique name describing what it gets, e.g. \"email\"'},{name:\"defaultValue\",type:\"string\"},{name:\"placeholder\",type:\"string\",defaultValue:\"Hello there\"},{name:\"required\",type:\"boolean\",defaultValue:!1}],defaultStyles:{paddingTop:\"10px\",paddingBottom:\"10px\",paddingLeft:\"10px\",paddingRight:\"10px\",borderRadius:\"3px\",borderWidth:\"1px\",borderStyle:\"solid\",borderColor:\"#ccc\"},static:!0,noWrap:!0}),ImgComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.getSrcSet=function(){var e=this.props.image;if(e&&\"string\"==typeof e&&e.match(/builder\\.io/))return getSrcSet(e)},t.prototype.render=function(){var e=this.props.attributes||{},t=this.getSrcSet(),n=e.style,i=__rest(e,[\"style\"]),r={objectFit:this.props.backgroundSize,objectPosition:this.props.backgroundPosition,aspectRatio:this.props.aspectRatio},o=__assign(__assign({},r),n);return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"img\",__assign({loading:\"lazy\"},i,{src:this.props.image||e.src,srcSet:t,alt:this.props.altText,title:this.props.title,style:o,className:\"builder-raw-img\"}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Img=withBuilder(ImgComponent,{name:\"Raw:Img\",hideFromInsertMenu:!0,image:\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4\",inputs:[{name:\"image\",bubble:!0,type:\"file\",allowedFileTypes:IMAGE_FILE_TYPES,required:!0},{name:\"backgroundSize\",type:\"text\",defaultValue:\"cover\",enum:[{label:\"contain\",value:\"contain\",helperText:\"The image should never get cropped\"},{label:\"cover\",value:\"cover\",helperText:\"The image should fill it's box, cropping when needed\"}]},{name:\"backgroundPosition\",type:\"text\",defaultValue:\"center\",enum:[\"center\",\"top\",\"left\",\"right\",\"bottom\",\"top left\",\"top right\",\"bottom left\",\"bottom right\"]},{name:\"altText\",type:\"string\",helperText:\"Text to display when the user has images off\"},{name:\"title\",type:\"string\",helperText:\"Text to display when hovering over the asset\"},{name:\"aspectRatio\",type:\"number\",helperText:\"This is the ratio of height/width, e.g. set to 1.5 for a 300px wide and 200px tall photo. Set to 0 to not force the image to maintain it's aspect ratio\",advanced:!0,defaultValue:.7041}],noWrap:!0}),RawText=function(e){var t=e.attributes||{};return react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"span\",{className:(null==t?void 0:t.class)||(null==t?void 0:t.className),dangerouslySetInnerHTML:{__html:e.text||\"\"}})};_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(RawText,{name:\"Builder:RawText\",hideFromInsertMenu:!0,inputs:[{name:\"text\",bubble:!0,type:\"longText\",required:!0}]});var filterWithCustomTargetingScript='function filterWithCustomTargeting(e,t,n,r){var i={query:t,startDate:n,endDate:r},o=e.date&&new Date(e.date)||new Date;return!(i.startDate&&new Date(i.startDate)>o)&&(!(i.endDate&&new Date(i.endDate)<o)&&(!i.query||!i.query.length||i.query.every((function(t){return objectMatchesQuery(e,t)}))))}function isString(e){return\"string\"==typeof e}function isNumber(e){return\"number\"==typeof e}function objectMatchesQuery(e,t){return function(){var n=t.property,r=t.operator,i=t.value;if(t&&\"urlPath\"===t.property&&t.value&&\"string\"==typeof t.value&&\"/\"!==t.value&&t.value.endsWith(\"/\")&&(i=t.value.slice(0,-1)),!n||!r)return!0;if(Array.isArray(i))return\"isNot\"===r?i.every((function(t){return objectMatchesQuery(e,{property:n,operator:r,value:t})})):!!i.find((function(t){return objectMatchesQuery(e,{property:n,operator:r,value:t})}));var o=e[n];if(Array.isArray(o))return o.includes(i);switch(r){case\"is\":return o===i;case\"isNot\":return o!==i;case\"contains\":return(isString(o)||Array.isArray(o))&&o.includes(String(i));case\"startsWith\":return isString(o)&&o.startsWith(String(i));case\"endsWith\":return isString(o)&&o.endsWith(String(i));case\"greaterThan\":return isNumber(o)&&isNumber(i)&&o>i;case\"lessThan\":return isNumber(o)&&isNumber(i)&&o<i;case\"greaterThanOrEqualTo\":return isNumber(o)&&isNumber(i)&&o>=i;case\"lessThanOrEqualTo\":return isNumber(o)&&isNumber(i)&&o<=i}return!1}()}';function filterWithCustomTargeting(e,t,n,i){var r={query:t,startDate:n,endDate:i},o=e.date&&new Date(e.date)||new Date;return!(r.startDate&&new Date(r.startDate)>o)&&(!(r.endDate&&new Date(r.endDate)<o)&&(!r.query||!r.query.length||r.query.every((function(t){return objectMatchesQuery(e,t)}))))}function isString(e){return\"string\"==typeof e}function isNumber(e){return\"number\"==typeof e}function objectMatchesQuery(e,t){return function(){var n=t.property,i=t.operator,r=t.value;if(t&&\"urlPath\"===t.property&&t.value&&\"string\"==typeof t.value&&\"/\"!==t.value&&t.value.endsWith(\"/\")&&(r=t.value.slice(0,-1)),!n||!i)return!0;if(Array.isArray(r))return\"isNot\"===i?r.every((function(t){return objectMatchesQuery(e,{property:n,operator:i,value:t})})):!!r.find((function(t){return objectMatchesQuery(e,{property:n,operator:i,value:t})}));var o=e[n];if(Array.isArray(o))return o.includes(r);switch(i){case\"is\":return o===r;case\"isNot\":return o!==r;case\"contains\":return(isString(o)||Array.isArray(o))&&o.includes(String(r));case\"startsWith\":return isString(o)&&o.startsWith(String(r));case\"endsWith\":return isString(o)&&o.endsWith(String(r));case\"greaterThan\":return isNumber(o)&&isNumber(r)&&o>r;case\"lessThan\":return isNumber(o)&&isNumber(r)&&o<r;case\"greaterThanOrEqualTo\":return isNumber(o)&&isNumber(r)&&o>=r;case\"lessThanOrEqualTo\":return isNumber(o)&&isNumber(r)&&o<=r}return!1}()}function PersonalizationContainer(e){var t,n,i,r,o,a,s,l,u,d,c,p,f,m,h,v,g,b,y,_,x,S=Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(null===(t=window.__hydrated)||void 0===t?void 0:t[null===(n=e.builderBlock)||void 0===n?void 0:n.id])),k=(0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null),B=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(S),w=B[0],C=B[1],E=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(!1),R=E[0],T=E[1],I=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(0);I[0];var j=I[1],O=(0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(BuilderStoreContext);if((0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)((function(){var e;C(!0),T(!0);var t=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.userAttributesChanged.subscribe((function(){j((function(e){return e+1}))})),n=[function(){return t.unsubscribe()}];if(!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing){var i=P[0];null===(e=k.current)||void 0===e||e.dispatchEvent(new CustomEvent(\"builder.variantLoaded\",{detail:{variant:i||\"default\",content:O.content},bubbles:!0}));var r=new IntersectionObserver((function(e){e.forEach((function(e){var t;e.isIntersecting&&(null===(t=k.current)||void 0===t||t.dispatchEvent(new CustomEvent(\"builder.variantDisplayed\",{detail:{variant:i||\"default\",content:O.content},bubbles:!0})))}))}));r.observe(k.current),n.push((function(){return r.disconnect()}))}return function(){n.forEach((function(e){return e()}))}}),[]),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer)return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({},e.attributes,{style:__assign({opacity:1,transition:\"opacity 0.2s ease-in-out\"},null===(i=e.attributes)||void 0===i?void 0:i.style),className:\"builder-personalization-container \".concat(e.attributes.className)}),null===(r=e.variants)||void 0===r?void 0:r.map((function(t,n){var i,r;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"template\",{key:n,\"data-variant-id\":(null===(i=e.builderBlock)||void 0===i?void 0:i.id)+n},react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:t.blocks,parentElementId:null===(r=e.builderBlock)||void 0===r?void 0:r.id,dataPath:\"component.options.variants.\".concat(n,\".blocks\"),child:!0}))})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"script\",{nonce:O.context.nonce,id:\"variants-script-\".concat(null===(o=e.builderBlock)||void 0===o?void 0:o.id),dangerouslySetInnerHTML:{__html:getPersonalizationScript(e.variants,(null===(a=e.builderBlock)||void 0===a?void 0:a.id)||\"none\",null===(s=e.builderState.state)||void 0===s?void 0:s.locale)}}),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(l=e.builderBlock)||void 0===l?void 0:l.children,parentElementId:null===(u=e.builderBlock)||void 0===u?void 0:u.id,dataPath:\"this.children\",child:!0})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"script\",{nonce:O.context.nonce,dangerouslySetInnerHTML:{__html:\"\\n         window.__hydrated = window.__hydrated || {};\\n         window.__hydrated['\".concat(null===(d=e.builderBlock)||void 0===d?void 0:d.id,\"'] = true;\\n        \").replace(/\\s+/g,\" \")}}));var P=(e.variants||[]).filter((function(t){var n;return filterWithCustomTargeting(__assign(__assign({},(null===(n=e.builderState.state)||void 0===n?void 0:n.locale)?{locale:e.builderState.state.locale}:{}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getUserAttributes()),t.query,t.startDate,t.endDate)}));return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({ref:k},e.attributes,{style:__assign({opacity:w?1:0,transition:\"opacity 0.2s ease-in-out\"},null===(c=e.attributes)||void 0===c?void 0:c.style),className:\"builder-personalization-container \".concat(e.attributes.className).concat(w?\"\":\" builder-personalization-container-loading\")}),R&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&\"number\"==typeof e.previewingIndex&&e.previewingIndex<((null===(p=e.variants)||void 0===p?void 0:p.length)||0)?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(m=null===(f=e.variants)||void 0===f?void 0:f[e.previewingIndex])||void 0===m?void 0:m.blocks,parentElementId:null===(h=e.builderBlock)||void 0===h?void 0:h.id,dataPath:\"component.options.variants.\".concat(e.previewingIndex,\".blocks\"),child:!0}):R&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&\"number\"!=typeof e.previewingIndex||!w||!P.length?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(v=e.builderBlock)||void 0===v?void 0:v.children,parentElementId:null===(g=e.builderBlock)||void 0===g?void 0:g.id,dataPath:\"this.children\",child:!0}):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(b=P[0])||void 0===b?void 0:b.blocks,parentElementId:null===(y=e.builderBlock)||void 0===y?void 0:y.id,dataPath:\"component.options.variants.\".concat(null===(_=e.variants)||void 0===_?void 0:_.indexOf(P[0]),\".blocks\"),child:!0})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"script\",{nonce:O.context.nonce,dangerouslySetInnerHTML:{__html:\"\\n         window.__hydrated = window.__hydrated || {};\\n         window.__hydrated['\".concat(null===(x=e.builderBlock)||void 0===x?void 0:x.id,\"'] = true;\\n        \").replace(/\\s+/g,\" \")}}))}function getPersonalizationScript(e,t,n){return\"\\n      (function() {\\n        function getCookie(name) {\\n          var nameEQ = name + \\\"=\\\";\\n          var ca = document.cookie.split(';');\\n          for(var i=0;i < ca.length;i++) {\\n              var c = ca[i];\\n              while (c.charAt(0)==' ') c = c.substring(1,c.length);\\n              if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\\n          }\\n          return null;\\n        }\\n        function removeVariants() {\\n          variants.forEach(function (template, index) {\\n            document.querySelector('template[data-variant-id=\\\"' + \\\"\".concat(t,\"\\\" + index + '\\\"]').remove();\\n          });\\n          document.getElementById('variants-script-\").concat(t,\"').remove();\\n        }\\n\\n        var attributes = JSON.parse(getCookie(\\\"\").concat(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.attributesCookieName,'\") || \"{}\");\\n        ').concat(n?'attributes.locale = \"'.concat(n,'\";'):\"\",\"\\n        var variants = \").concat(JSON.stringify(null==e?void 0:e.map((function(e){return{query:e.query,startDate:e.startDate,endDate:e.endDate}}))),\";\\n        var winningVariantIndex = variants.findIndex(function(variant) {\\n          return filterWithCustomTargeting(\\n            attributes,\\n            variant.query,\\n            variant.startDate,\\n            variant.endDate\\n          );\\n        });\\n        var isDebug = location.href.includes('builder.debug=true');\\n        if (isDebug) {\\n          console.debug('PersonalizationContainer', {\\n            attributes: attributes,\\n            variants: variants,\\n            winningVariantIndex: winningVariantIndex,\\n            });\\n        }\\n        if (winningVariantIndex !== -1) {\\n          var winningVariant = document.querySelector('template[data-variant-id=\\\"' + \\\"\").concat(t,\"\\\" + winningVariantIndex + '\\\"]');\\n          if (winningVariant) {\\n            var parentNode = winningVariant.parentNode;\\n            var newParent = parentNode.cloneNode(false);\\n            newParent.appendChild(winningVariant.content.firstChild);\\n            parentNode.parentNode.replaceChild(newParent, parentNode);\\n            if (isDebug) {\\n              console.debug('PersonalizationContainer', 'Winning variant Replaced:', winningVariant);\\n            }\\n          }\\n        } else if (variants.length > 0) {\\n          removeVariants();\\n        }\\n        \").concat(filterWithCustomTargetingScript,\"\\n      })();\\n    \").replace(/\\s+/g,\" \")}function useIsPreviewing(){var e=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(!1),t=e[0],n=e[1];return (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)((function(){(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing)&&n(!0)}),[]),t}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(PersonalizationContainer,{name:\"PersonalizationContainer\",noWrap:!0,friendlyName:\"Dynamic Container\",image:\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F37229ed30d8c41dfb10b8cca1992053a\",canHaveChildren:!0,inputs:[{name:\"variants\",defaultValue:[],behavior:\"personalizationVariantList\",type:\"list\",subFields:[{name:\"name\",type:\"text\",localized:!1},{name:\"query\",friendlyName:\"Targeting rules\",type:\"BuilderQuery\",defaultValue:[],localized:!1},{name:\"startDate\",type:\"date\",localized:!1},{name:\"endDate\",type:\"date\",localized:!1},{name:\"blocks\",type:\"UiBlocks\",hideFromUI:!0,defaultValue:[]}]}]}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isReact=!0,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.sdkInfo={name:\"react\",version:SDK_VERSION};\n//# sourceMappingURL=builder-react.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@builder.io/react/dist/builder-react.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@builder.io/sdk/dist/index.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@builder.io/sdk/dist/index.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorSubject: () => (/* binding */ BehaviorSubject),\n/* harmony export */   Builder: () => (/* binding */ Builder),\n/* harmony export */   BuilderComponent: () => (/* binding */ BuilderComponent),\n/* harmony export */   Subscription: () => (/* binding */ Subscription),\n/* harmony export */   builder: () => (/* binding */ builder),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@builder.io/sdk/node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hash-sum */ \"(ssr)/./node_modules/hash-sum/hash-sum.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hash_sum__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n(function () {\n  if (typeof window === 'undefined' || typeof window.CustomEvent === 'function') return false;\n\n  function CustomEvent(event, params) {\n    params = params || { bubbles: false, cancelable: false, detail: null };\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  window.CustomEvent = CustomEvent;\n})();\n\nvar isSafari = typeof window !== 'undefined' &&\r\n    /^((?!chrome|android).)*safari/i.test(window.navigator.userAgent);\r\nvar isClient = typeof window !== 'undefined';\r\n// TODO: queue all of these in a debounceNextTick\r\nfunction nextTick(fn) {\r\n    // if (typeof process !== 'undefined' && process.nextTick) {\r\n    //   console.log('process.nextTick?');\r\n    //   process.nextTick(fn);\r\n    //   return;\r\n    // }\r\n    // FIXME: fix the real safari issue of this randomly not working\r\n    if (!isClient || isSafari || typeof MutationObserver === 'undefined') {\r\n        setTimeout(fn);\r\n        return;\r\n    }\r\n    var called = 0;\r\n    var observer = new MutationObserver(function () { return fn(); });\r\n    var element = document.createTextNode('');\r\n    observer.observe(element, {\r\n        characterData: true,\r\n    });\r\n    // tslint:disable-next-line\r\n    element.data = String((called = ++called));\r\n}\n\nvar PROPERTY_NAME_DENY_LIST = Object.freeze(['__proto__', 'prototype', 'constructor']);\r\n// TODO: unit tests\r\nvar QueryString = /** @class */ (function () {\r\n    function QueryString() {\r\n    }\r\n    QueryString.parseDeep = function (queryString) {\r\n        var obj = this.parse(queryString);\r\n        return this.deepen(obj);\r\n    };\r\n    QueryString.stringifyDeep = function (obj) {\r\n        var map = this.flatten(obj);\r\n        return this.stringify(map);\r\n    };\r\n    QueryString.parse = function (queryString) {\r\n        var query = {};\r\n        var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\r\n        for (var i = 0; i < pairs.length; i++) {\r\n            var pair = pairs[i].split('=');\r\n            // TODO: node support?\r\n            try {\r\n                query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\r\n            }\r\n            catch (error) {\r\n                // Ignore malformed URI components\r\n            }\r\n        }\r\n        return query;\r\n    };\r\n    QueryString.stringify = function (map) {\r\n        var str = '';\r\n        for (var key in map) {\r\n            if (map.hasOwnProperty(key)) {\r\n                var value = map[key];\r\n                if (str) {\r\n                    str += '&';\r\n                }\r\n                str += encodeURIComponent(key) + '=' + encodeURIComponent(value);\r\n            }\r\n        }\r\n        return str;\r\n    };\r\n    QueryString.deepen = function (map) {\r\n        // FIXME; Should be type Tree = Record<string, string | Tree>\r\n        // requires a typescript upgrade.\r\n        var output = {};\r\n        for (var k in map) {\r\n            var t = output;\r\n            var parts = k.split('.');\r\n            var key = parts.pop();\r\n            for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\r\n                var part = parts_1[_i];\r\n                assertAllowedPropertyName(part);\r\n                t = t[part] = t[part] || {};\r\n            }\r\n            t[key] = map[k];\r\n        }\r\n        return output;\r\n    };\r\n    QueryString.flatten = function (obj, _current, _res) {\r\n        if (_res === void 0) { _res = {}; }\r\n        for (var key in obj) {\r\n            var value = obj[key];\r\n            var newKey = _current ? _current + '.' + key : key;\r\n            if (value && typeof value === 'object') {\r\n                this.flatten(value, newKey, _res);\r\n            }\r\n            else {\r\n                _res[newKey] = value;\r\n            }\r\n        }\r\n        return _res;\r\n    };\r\n    return QueryString;\r\n}());\r\nfunction assertAllowedPropertyName(name) {\r\n    if (PROPERTY_NAME_DENY_LIST.indexOf(name) >= 0)\r\n        throw new Error(\"Property name \\\"\".concat(name, \"\\\" is not allowed\"));\r\n}\n\nvar Subscription = /** @class */ (function () {\r\n    function Subscription(listeners, listener) {\r\n        this.listeners = listeners;\r\n        this.listener = listener;\r\n        this.unsubscribed = false;\r\n        this.otherSubscriptions = [];\r\n    }\r\n    Object.defineProperty(Subscription.prototype, \"closed\", {\r\n        get: function () {\r\n            return this.unsubscribed;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Subscription.prototype.add = function (subscription) {\r\n        this.otherSubscriptions.push(subscription);\r\n    };\r\n    Subscription.prototype.unsubscribe = function () {\r\n        if (this.unsubscribed) {\r\n            return;\r\n        }\r\n        if (this.listener && this.listeners) {\r\n            var index = this.listeners.indexOf(this.listener);\r\n            if (index > -1) {\r\n                this.listeners.splice(index, 1);\r\n            }\r\n        }\r\n        this.otherSubscriptions.forEach(function (sub) { return sub.unsubscribe(); });\r\n        this.unsubscribed = true;\r\n    };\r\n    return Subscription;\r\n}());\r\n// TODO: follow minimal basic spec: https://github.com/tc39/proposal-observable\r\nvar BehaviorSubject = /** @class */ (function () {\r\n    function BehaviorSubject(value) {\r\n        var _this = this;\r\n        this.value = value;\r\n        this.listeners = [];\r\n        this.errorListeners = [];\r\n        this.then = function () {\r\n            var _a;\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            return (_a = _this.toPromise()).then.apply(_a, args);\r\n        };\r\n    }\r\n    BehaviorSubject.prototype.next = function (value) {\r\n        this.value = value;\r\n        for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) {\r\n            var listener = _a[_i];\r\n            listener(value);\r\n        }\r\n    };\r\n    // TODO: implement this as PIPE instead\r\n    BehaviorSubject.prototype.map = function (fn) {\r\n        var newSubject = new BehaviorSubject(fn(this.value));\r\n        // TODO: on destroy delete these\r\n        this.subscribe(function (val) {\r\n            newSubject.next(fn(val));\r\n        });\r\n        this.catch(function (err) {\r\n            newSubject.error(err);\r\n        });\r\n        return newSubject;\r\n    };\r\n    BehaviorSubject.prototype.catch = function (errorListener) {\r\n        this.errorListeners.push(errorListener);\r\n        return new Subscription(this.errorListeners, errorListener);\r\n    };\r\n    BehaviorSubject.prototype.error = function (error) {\r\n        for (var _i = 0, _a = this.errorListeners; _i < _a.length; _i++) {\r\n            var listener = _a[_i];\r\n            listener(error);\r\n        }\r\n    };\r\n    BehaviorSubject.prototype.subscribe = function (listener, errorListener) {\r\n        this.listeners.push(listener);\r\n        if (errorListener) {\r\n            this.errorListeners.push(errorListener);\r\n        }\r\n        return new Subscription(this.listeners, listener);\r\n    };\r\n    BehaviorSubject.prototype.toPromise = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var subscription = _this.subscribe(function (value) {\r\n                resolve(value);\r\n                subscription.unsubscribe();\r\n            }, function (err) {\r\n                reject(err);\r\n                subscription.unsubscribe();\r\n            });\r\n        });\r\n    };\r\n    BehaviorSubject.prototype.promise = function () {\r\n        return this.toPromise();\r\n    };\r\n    return BehaviorSubject;\r\n}());\n\nvar State = {\r\n    Pending: 'Pending',\r\n    Fulfilled: 'Fulfilled',\r\n    Rejected: 'Rejected',\r\n};\r\nfunction isFunction(val) {\r\n    return val && typeof val === 'function';\r\n}\r\nfunction isObject(val) {\r\n    return val && typeof val === 'object';\r\n}\r\nvar TinyPromise = /** @class */ (function () {\r\n    function TinyPromise(executor) {\r\n        this._state = State.Pending;\r\n        this._handlers = [];\r\n        this._value = null;\r\n        executor(this._resolve.bind(this), this._reject.bind(this));\r\n    }\r\n    TinyPromise.prototype._resolve = function (x) {\r\n        var _this = this;\r\n        if (x instanceof TinyPromise) {\r\n            x.then(this._resolve.bind(this), this._reject.bind(this));\r\n        }\r\n        else if (isObject(x) || isFunction(x)) {\r\n            var called_1 = false;\r\n            try {\r\n                var thenable = x.then;\r\n                if (isFunction(thenable)) {\r\n                    thenable.call(x, function (result) {\r\n                        if (!called_1)\r\n                            _this._resolve(result);\r\n                        called_1 = true;\r\n                        return undefined;\r\n                    }, function (error) {\r\n                        if (!called_1)\r\n                            _this._reject(error);\r\n                        called_1 = true;\r\n                        return undefined;\r\n                    });\r\n                }\r\n                else {\r\n                    this._fulfill(x);\r\n                }\r\n            }\r\n            catch (ex) {\r\n                if (!called_1) {\r\n                    this._reject(ex);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._fulfill(x);\r\n        }\r\n    };\r\n    TinyPromise.prototype._fulfill = function (result) {\r\n        var _this = this;\r\n        this._state = State.Fulfilled;\r\n        this._value = result;\r\n        this._handlers.forEach(function (handler) { return _this._callHandler(handler); });\r\n    };\r\n    TinyPromise.prototype._reject = function (error) {\r\n        var _this = this;\r\n        this._state = State.Rejected;\r\n        this._value = error;\r\n        this._handlers.forEach(function (handler) { return _this._callHandler(handler); });\r\n    };\r\n    TinyPromise.prototype._isPending = function () {\r\n        return this._state === State.Pending;\r\n    };\r\n    TinyPromise.prototype._isFulfilled = function () {\r\n        return this._state === State.Fulfilled;\r\n    };\r\n    TinyPromise.prototype._isRejected = function () {\r\n        return this._state === State.Rejected;\r\n    };\r\n    TinyPromise.prototype._addHandler = function (onFulfilled, onRejected) {\r\n        this._handlers.push({\r\n            onFulfilled: onFulfilled,\r\n            onRejected: onRejected,\r\n        });\r\n    };\r\n    TinyPromise.prototype._callHandler = function (handler) {\r\n        if (this._isFulfilled() && isFunction(handler.onFulfilled)) {\r\n            handler.onFulfilled(this._value);\r\n        }\r\n        else if (this._isRejected() && isFunction(handler.onRejected)) {\r\n            handler.onRejected(this._value);\r\n        }\r\n    };\r\n    TinyPromise.prototype.then = function (onFulfilled, onRejected) {\r\n        var _this = this;\r\n        switch (this._state) {\r\n            case State.Pending: {\r\n                return new TinyPromise(function (resolve, reject) {\r\n                    _this._addHandler(function (value) {\r\n                        nextTick(function () {\r\n                            try {\r\n                                if (isFunction(onFulfilled)) {\r\n                                    resolve(onFulfilled(value));\r\n                                }\r\n                                else {\r\n                                    resolve(value);\r\n                                }\r\n                            }\r\n                            catch (ex) {\r\n                                reject(ex);\r\n                            }\r\n                        });\r\n                    }, function (error) {\r\n                        nextTick(function () {\r\n                            try {\r\n                                if (isFunction(onRejected)) {\r\n                                    resolve(onRejected(error));\r\n                                }\r\n                                else {\r\n                                    reject(error);\r\n                                }\r\n                            }\r\n                            catch (ex) {\r\n                                reject(ex);\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            case State.Fulfilled: {\r\n                return new TinyPromise(function (resolve, reject) {\r\n                    nextTick(function () {\r\n                        try {\r\n                            if (isFunction(onFulfilled)) {\r\n                                resolve(onFulfilled(_this._value));\r\n                            }\r\n                            else {\r\n                                resolve(_this._value);\r\n                            }\r\n                        }\r\n                        catch (ex) {\r\n                            reject(ex);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            case State.Rejected: {\r\n                return new TinyPromise(function (resolve, reject) {\r\n                    nextTick(function () {\r\n                        try {\r\n                            if (isFunction(onRejected)) {\r\n                                resolve(onRejected(_this._value));\r\n                            }\r\n                            else {\r\n                                reject(_this._value);\r\n                            }\r\n                        }\r\n                        catch (ex) {\r\n                            reject(ex);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n    return TinyPromise;\r\n}());\r\nvar Promise$1 = (typeof Promise !== 'undefined' ? Promise : TinyPromise);\n\n// Webpack workaround to conditionally require certain external modules\r\n// only on the server and not bundle them on the client\r\nvar serverOnlyRequire;\r\ntry {\r\n    // tslint:disable-next-line:no-eval\r\n    serverOnlyRequire = eval('require');\r\n}\r\ncatch (err) {\r\n    // all good\r\n    serverOnlyRequire = (function () { return null; });\r\n}\r\nvar serverOnlyRequire$1 = serverOnlyRequire;\n\nfunction promiseResolve(value) {\r\n    return new Promise$1(function (resolve) { return resolve(value); });\r\n}\r\n// Adapted from https://raw.githubusercontent.com/developit/unfetch/master/src/index.mjs\r\nfunction tinyFetch(url, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return new Promise$1(function (resolve, reject) {\r\n        var request = new XMLHttpRequest();\r\n        request.open(options.method || 'get', url, true);\r\n        if (options.headers) {\r\n            for (var i in options.headers) {\r\n                request.setRequestHeader(i, options.headers[i]);\r\n            }\r\n        }\r\n        request.withCredentials = options.credentials === 'include';\r\n        request.onload = function () {\r\n            resolve(response());\r\n        };\r\n        request.onerror = reject;\r\n        request.send(options.body);\r\n        function response() {\r\n            var keys = [];\r\n            var all = [];\r\n            var headers = {};\r\n            var header = undefined;\r\n            request\r\n                .getAllResponseHeaders()\r\n                .replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function (_match, _key, value) {\r\n                var key = _key;\r\n                keys.push((key = key.toLowerCase()));\r\n                all.push([key, value]);\r\n                header = headers[key];\r\n                headers[key] = header ? \"\".concat(header, \",\").concat(value) : value;\r\n                return '';\r\n            });\r\n            return {\r\n                ok: ((request.status / 100) | 0) === 2,\r\n                status: request.status,\r\n                statusText: request.statusText,\r\n                url: request.responseURL,\r\n                clone: response,\r\n                text: function () { return promiseResolve(request.responseText); },\r\n                json: function () { return promiseResolve(request.responseText).then(JSON.parse); },\r\n                blob: function () { return promiseResolve(new Blob([request.response])); },\r\n                headers: {\r\n                    keys: function () { return keys; },\r\n                    entries: function () { return all; },\r\n                    get: function (n) { return headers[n.toLowerCase()]; },\r\n                    has: function (n) { return n.toLowerCase() in headers; },\r\n                },\r\n            };\r\n        }\r\n    });\r\n}\r\nfunction getFetch() {\r\n    // If fetch is defined, in the browser, via polyfill, or in a Cloudflare worker, use it.\r\n    var _fetch = undefined;\r\n    if (globalThis.fetch) {\r\n        _fetch !== null && _fetch !== void 0 ? _fetch : (_fetch = globalThis.fetch);\r\n    }\r\n    else if (typeof window === 'undefined') {\r\n        // If fetch is not defined, in a Node.js environment, use node-fetch.\r\n        try {\r\n            // node-fetch@^3 is ESM only, and will throw error on require.\r\n            _fetch !== null && _fetch !== void 0 ? _fetch : (_fetch = serverOnlyRequire$1('node-fetch'));\r\n        }\r\n        catch (e) {\r\n            // If node-fetch is not installed, use tiny-fetch.\r\n            console.warn('node-fetch is not installed. consider polyfilling fetch or installing node-fetch.');\r\n            console.warn(e);\r\n        }\r\n    }\r\n    // Otherwise, use tiny-fetch.\r\n    return _fetch !== null && _fetch !== void 0 ? _fetch : tinyFetch;\r\n}\n\nfunction assign(target) {\r\n    var to = Object(target);\r\n    for (var index = 1; index < arguments.length; index++) {\r\n        var nextSource = arguments[index];\r\n        if (nextSource != null) {\r\n            // Skip over if undefined or null\r\n            for (var nextKey in nextSource) {\r\n                // Avoid bugs when hasOwnProperty is shadowed\r\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n                    to[nextKey] = nextSource[nextKey];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return to;\r\n}\n\nfunction throttle(func, wait, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var context;\r\n    var args;\r\n    var result;\r\n    var timeout = null;\r\n    var previous = 0;\r\n    var later = function () {\r\n        previous = options.leading === false ? 0 : Date.now();\r\n        timeout = null;\r\n        result = func.apply(context, args);\r\n        if (!timeout)\r\n            context = args = null;\r\n    };\r\n    return function () {\r\n        var now = Date.now();\r\n        if (!previous && options.leading === false)\r\n            previous = now;\r\n        var remaining = wait - (now - previous);\r\n        context = this;\r\n        args = arguments;\r\n        if (remaining <= 0 || remaining > wait) {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n                timeout = null;\r\n            }\r\n            previous = now;\r\n            result = func.apply(context, args);\r\n            if (!timeout)\r\n                context = args = null;\r\n        }\r\n        else if (!timeout && options.trailing !== false) {\r\n            timeout = setTimeout(later, remaining);\r\n        }\r\n        return result;\r\n    };\r\n}\n\nvar camelCaseToKebabCase = function (str) {\r\n    return str ? str.replace(/([A-Z])/g, function (g) { return \"-\".concat(g[0].toLowerCase()); }) : '';\r\n};\r\nvar Animator = /** @class */ (function () {\r\n    function Animator() {\r\n    }\r\n    Animator.prototype.bindAnimations = function (animations) {\r\n        for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {\r\n            var animation = animations_1[_i];\r\n            switch (animation.trigger) {\r\n                case 'pageLoad':\r\n                    this.triggerAnimation(animation);\r\n                    break;\r\n                case 'hover':\r\n                    this.bindHoverAnimation(animation);\r\n                    break;\r\n                case 'scrollInView':\r\n                    this.bindScrollInViewAnimation(animation);\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    Animator.prototype.warnElementNotPresent = function (id) {\r\n        console.warn(\"Cannot animate element: element with ID \".concat(id, \" not found!\"));\r\n    };\r\n    Animator.prototype.augmentAnimation = function (animation, element) {\r\n        var stylesUsed = this.getAllStylesUsed(animation);\r\n        var computedStyle = getComputedStyle(element);\r\n        // const computedStyle = getComputedStyle(element);\r\n        // // FIXME: this will break if original load is in one reponsive size then resize to another hmmm\r\n        // Need to use transform instead of left since left can change on screen sizes\r\n        var firstStyles = animation.steps[0].styles;\r\n        var lastStyles = animation.steps[animation.steps.length - 1].styles;\r\n        var bothStyles = [firstStyles, lastStyles];\r\n        // FIXME: this won't work as expected for augmented animations - may need the editor itself to manage this\r\n        for (var _i = 0, bothStyles_1 = bothStyles; _i < bothStyles_1.length; _i++) {\r\n            var styles = bothStyles_1[_i];\r\n            for (var _a = 0, stylesUsed_1 = stylesUsed; _a < stylesUsed_1.length; _a++) {\r\n                var style = stylesUsed_1[_a];\r\n                if (!(style in styles)) {\r\n                    styles[style] = computedStyle[style];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Animator.prototype.getAllStylesUsed = function (animation) {\r\n        var properties = [];\r\n        for (var _i = 0, _a = animation.steps; _i < _a.length; _i++) {\r\n            var step = _a[_i];\r\n            for (var key in step.styles) {\r\n                if (properties.indexOf(key) === -1) {\r\n                    properties.push(key);\r\n                }\r\n            }\r\n        }\r\n        return properties;\r\n    };\r\n    Animator.prototype.triggerAnimation = function (animation) {\r\n        var _this = this;\r\n        // TODO: do for ALL elements\r\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\r\n        if (!elements.length) {\r\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\r\n            return;\r\n        }\r\n        Array.from(elements).forEach(function (element) {\r\n            _this.augmentAnimation(animation, element);\r\n            // TODO: do this properly, may have other animations of different properties\r\n            // TODO: only override the properties\r\n            // TODO: if there is an entrance and hover animation, the transition duration will get effed\r\n            // element.setAttribute('style', '');\r\n            // const styledUsed = this.getAllStylesUsed(animation);\r\n            element.style.transition = 'none';\r\n            element.style.transitionDelay = '0';\r\n            assign(element.style, animation.steps[0].styles);\r\n            // TODO: queue/batch these timeouts\r\n            // TODO: only include properties explicitly set in the animation\r\n            // using Object.keys(styles)\r\n            setTimeout(function () {\r\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\r\n                if (animation.delay) {\r\n                    element.style.transitionDelay = animation.delay + 's';\r\n                }\r\n                assign(element.style, animation.steps[1].styles);\r\n                // TODO: maybe remove/reset transitoin property after animation duration\r\n                // TODO: queue timers\r\n                setTimeout(function () {\r\n                    // TODO: what if has other transition (reset back to what it was)\r\n                    element.style.transition = '';\r\n                    element.style.transitionDelay = '';\r\n                }, (animation.delay || 0) * 1000 + animation.duration * 1000 + 100);\r\n            });\r\n        });\r\n    };\r\n    Animator.prototype.bindHoverAnimation = function (animation) {\r\n        var _this = this;\r\n        // TODO: is it multiple binding when editing...?\r\n        // TODO: unbind on element remove\r\n        // TODO: apply to ALL elements\r\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\r\n        if (!elements.length) {\r\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\r\n            return;\r\n        }\r\n        Array.from(elements).forEach(function (element) {\r\n            _this.augmentAnimation(animation, element);\r\n            var defaultState = animation.steps[0].styles;\r\n            var hoverState = animation.steps[1].styles;\r\n            function attachDefaultState() {\r\n                assign(element.style, defaultState);\r\n            }\r\n            function attachHoverState() {\r\n                assign(element.style, hoverState);\r\n            }\r\n            attachDefaultState();\r\n            element.addEventListener('mouseenter', attachHoverState);\r\n            element.addEventListener('mouseleave', attachDefaultState);\r\n            // TODO: queue/batch these timeouts\r\n            setTimeout(function () {\r\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\r\n                if (animation.delay) {\r\n                    element.style.transitionDelay = animation.delay + 's';\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // TODO: unbind on element remove\r\n    Animator.prototype.bindScrollInViewAnimation = function (animation) {\r\n        var _this = this;\r\n        // TODO: apply to ALL matching elements\r\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\r\n        if (!elements.length) {\r\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\r\n            return;\r\n        }\r\n        // TODO: if server side rendered and scrolled into view don't animate...\r\n        Array.from(elements).forEach(function (element) {\r\n            _this.augmentAnimation(animation, element);\r\n            var triggered = false;\r\n            var pendingAnimation = false;\r\n            function immediateOnScroll() {\r\n                if (!triggered && isScrolledIntoView(element)) {\r\n                    triggered = true;\r\n                    pendingAnimation = true;\r\n                    setTimeout(function () {\r\n                        assign(element.style, animation.steps[1].styles);\r\n                        if (!animation.repeat) {\r\n                            document.removeEventListener('scroll', onScroll);\r\n                        }\r\n                        setTimeout(function () {\r\n                            pendingAnimation = false;\r\n                            if (!animation.repeat) {\r\n                                element.style.transition = '';\r\n                                element.style.transitionDelay = '';\r\n                            }\r\n                        }, (animation.duration + (animation.delay || 0)) * 1000 + 100);\r\n                    });\r\n                }\r\n                else if (animation.repeat &&\r\n                    triggered &&\r\n                    !pendingAnimation &&\r\n                    !isScrolledIntoView(element)) {\r\n                    // we want to repeat the animation every time the the element is out of view and back again\r\n                    triggered = false;\r\n                    assign(element.style, animation.steps[0].styles);\r\n                }\r\n            }\r\n            // TODO: roll all of these in one for more efficiency of checking all the rects\r\n            var onScroll = throttle(immediateOnScroll, 200, { leading: false });\r\n            // TODO: fully in view or partially\r\n            function isScrolledIntoView(elem) {\r\n                var rect = elem.getBoundingClientRect();\r\n                var windowHeight = window.innerHeight;\r\n                var thresholdPercent = (animation.thresholdPercent || 0) / 100;\r\n                var threshold = thresholdPercent * windowHeight;\r\n                // TODO: partial in view? or what if element is larger than screen itself\r\n                return (rect.bottom > threshold && rect.top < windowHeight - threshold // Element is peeking top or bottom\r\n                // (rect.top > 0 && rect.bottom < window.innerHeight) || // element fits within the screen and is fully on screen (not hanging off at all)\r\n                // (rect.top < 0 && rect.bottom > window.innerHeight) // element is larger than the screen and hangs over the top and bottom\r\n                );\r\n            }\r\n            var defaultState = animation.steps[0].styles;\r\n            function attachDefaultState() {\r\n                assign(element.style, defaultState);\r\n            }\r\n            attachDefaultState();\r\n            // TODO: queue/batch these timeouts!\r\n            setTimeout(function () {\r\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\r\n                if (animation.delay) {\r\n                    element.style.transitionDelay = animation.delay + 's';\r\n                }\r\n            });\r\n            // TODO: one listener for everything\r\n            document.addEventListener('scroll', onScroll, { capture: true, passive: true });\r\n            // Do an initial check\r\n            immediateOnScroll();\r\n        });\r\n    };\r\n    return Animator;\r\n}());\n\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\nvar Cookies = /** @class */ (function () {\r\n    function Cookies(request, response) {\r\n        this.request = request;\r\n        this.response = response;\r\n    }\r\n    Cookies.prototype.get = function (name) {\r\n        var header = this.request.headers['cookie'];\r\n        if (!header) {\r\n            return;\r\n        }\r\n        var match = header.match(getPattern(name));\r\n        if (!match) {\r\n            return;\r\n        }\r\n        var value = match[1];\r\n        return value;\r\n    };\r\n    Cookies.prototype.set = function (name, value, opts) {\r\n        var res = this.response;\r\n        var req = this.request;\r\n        var headers = res.getHeader('Set-Cookie') || [];\r\n        // TODO: just make this always true\r\n        var secure = this.secure !== undefined\r\n            ? !!this.secure\r\n            : req.protocol === 'https' || req.connection.encrypted;\r\n        var cookie = new Cookie(name, value, opts);\r\n        if (typeof headers === 'string') {\r\n            headers = [headers];\r\n        }\r\n        if (!secure && opts && opts.secure) {\r\n            throw new Error('Cannot send secure cookie over unencrypted connection');\r\n        }\r\n        cookie.secure = secure;\r\n        if (opts && 'secure' in opts) {\r\n            cookie.secure = !!opts.secure;\r\n        }\r\n        pushCookie(headers, cookie);\r\n        var setHeader = res.setHeader;\r\n        setHeader.call(res, 'Set-Cookie', headers);\r\n        return this;\r\n    };\r\n    return Cookies;\r\n}());\r\nvar Cookie = /** @class */ (function () {\r\n    function Cookie(name, value, attrs) {\r\n        this.path = '/';\r\n        this.domain = undefined;\r\n        this.httpOnly = true;\r\n        this.sameSite = false;\r\n        this.secure = false;\r\n        this.overwrite = false;\r\n        this.name = '';\r\n        this.value = '';\r\n        if (!fieldContentRegExp.test(name)) {\r\n            throw new TypeError('argument name is invalid');\r\n        }\r\n        if (value && !fieldContentRegExp.test(value)) {\r\n            throw new TypeError('argument value is invalid');\r\n        }\r\n        if (!value) {\r\n            this.expires = new Date(0);\r\n        }\r\n        this.name = name;\r\n        this.value = value || '';\r\n        if (attrs.expires) {\r\n            this.expires = attrs.expires;\r\n        }\r\n        if (attrs.secure) {\r\n            this.secure = attrs.secure;\r\n        }\r\n    }\r\n    Cookie.prototype.toString = function () {\r\n        return \"\".concat(this.name, \"=\").concat(this.value);\r\n    };\r\n    Cookie.prototype.toHeader = function () {\r\n        var header = this.toString();\r\n        if (this.maxAge) {\r\n            this.expires = new Date(Date.now() + this.maxAge);\r\n        }\r\n        if (this.path) {\r\n            header += \"; path=\".concat(this.path);\r\n        }\r\n        if (this.expires) {\r\n            header += \"; expires=\".concat(this.expires.toUTCString());\r\n        }\r\n        if (this.domain) {\r\n            header += \"; domain=\".concat(this.domain);\r\n        }\r\n        // TODO: samesite=none by default (?)\r\n        header += \"; SameSite=\".concat(this.sameSite === true ? 'strict' : 'None');\r\n        // TODO: On by default\r\n        if (this.secure) {\r\n            header += '; secure';\r\n        }\r\n        if (this.httpOnly) {\r\n            header += '; httponly';\r\n        }\r\n        return header;\r\n    };\r\n    return Cookie;\r\n}());\r\nfunction getPattern(name) {\r\n    return new RegExp(\"(?:^|;) *\".concat(name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&'), \"=([^;]*)\"));\r\n}\r\nfunction pushCookie(headers, cookie) {\r\n    if (cookie.overwrite) {\r\n        for (var i = headers.length - 1; i >= 0; i--) {\r\n            if (headers[i].indexOf(\"\".concat(cookie.name, \"=\")) === 0) {\r\n                headers.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    headers.push(cookie.toHeader());\r\n}\n\nfunction omit(obj) {\r\n    var values = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        values[_i - 1] = arguments[_i];\r\n    }\r\n    var newObject = Object.assign({}, obj);\r\n    for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {\r\n        var key = values_1[_a];\r\n        delete newObject[key];\r\n    }\r\n    return newObject;\r\n}\n\n/**\r\n * @credit https://stackoverflow.com/a/2117523\r\n */\r\nfunction uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\r\n/**\r\n * Slightly cleaner and smaller UUIDs\r\n */\r\nfunction uuid() {\r\n    return uuidv4().replace(/-/g, '');\r\n}\n\nfunction emptyUrl() {\r\n    return {\r\n        query: null,\r\n        port: null,\r\n        auth: null,\r\n        hash: null,\r\n        host: null,\r\n        hostname: null,\r\n        href: null,\r\n        path: null,\r\n        pathname: null,\r\n        protocol: null,\r\n        search: null,\r\n        slashes: null,\r\n    };\r\n}\r\n// Replacement for `url.parse` using `URL` global object that works with relative paths.\r\n// Assumptions: this function operates in a NodeJS environment.\r\nfunction parse$1(url) {\r\n    var _a;\r\n    var out = emptyUrl();\r\n    var u;\r\n    var pathOnly = url === '' || url[0] === '/';\r\n    if (pathOnly) {\r\n        u = new URL(url, 'http://0.0.0.0/');\r\n        out.href = u.href;\r\n        out.href = (_a = out.href) === null || _a === void 0 ? void 0 : _a.slice(14); // remove 'http://0.0.0.0/'\r\n    }\r\n    else {\r\n        u = new URL(url);\r\n        out.href = u.href;\r\n        out.port = u.port === '' ? null : u.port;\r\n        out.hash = u.hash === '' ? null : u.hash;\r\n        out.host = u.host;\r\n        out.hostname = u.hostname;\r\n        out.href = u.href;\r\n        out.pathname = u.pathname;\r\n        out.protocol = u.protocol;\r\n        out.slashes = url[u.protocol.length] === '/'; // check if the mimetype is proceeded by a slash\r\n    }\r\n    out.search = u.search;\r\n    out.query = u.search.slice(1); // remove '?'\r\n    out.path = \"\".concat(u.pathname).concat(u.search);\r\n    out.pathname = u.pathname;\r\n    return out;\r\n}\n\n/**\r\n * Safe conversion to error type. Intended to be used in catch blocks where the\r\n *  value is not guaranteed to be an error.\r\n *\r\n *  @example\r\n *  try {\r\n *    throw new Error('Something went wrong')\r\n *  }\r\n *  catch (err: unknown) {\r\n *    const error: Error = toError(err)\r\n *  }\r\n */\r\nfunction toError(err) {\r\n    if (err instanceof Error)\r\n        return err;\r\n    return new Error(String(err));\r\n}\n\nvar DEFAULT_API_VERSION = 'v3';\n\nvar SDK_VERSION = '6.1.2';\n\nfunction datePlusMinutes(minutes) {\r\n    if (minutes === void 0) { minutes = 30; }\r\n    return new Date(Date.now() + minutes * 60000);\r\n}\r\nvar isPositiveNumber = function (thing) {\r\n    return typeof thing === 'number' && !isNaN(thing) && thing >= 0;\r\n};\r\nvar isReactNative = typeof navigator === 'object' && navigator.product === 'ReactNative';\r\nvar validEnvList = [\r\n    'production',\r\n    'qa',\r\n    'test',\r\n    'development',\r\n    'dev',\r\n    'cdn-qa',\r\n    'cloud',\r\n    'fast',\r\n    'cdn2',\r\n    'cdn-prod',\r\n];\r\nfunction getQueryParam(url, variable) {\r\n    var query = url.split('?')[1] || '';\r\n    var vars = query.split('&');\r\n    for (var i = 0; i < vars.length; i++) {\r\n        var pair = vars[i].split('=');\r\n        if (decodeURIComponent(pair[0]) === variable) {\r\n            return decodeURIComponent(pair[1]);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nvar urlParser = {\r\n    parse: function (url) {\r\n        var el = document.createElement('a');\r\n        el.href = url;\r\n        var out = {};\r\n        var props = [\r\n            'username',\r\n            'password',\r\n            'host',\r\n            'hostname',\r\n            'port',\r\n            'protocol',\r\n            'origin',\r\n            'pathname',\r\n            'search',\r\n            'hash',\r\n        ];\r\n        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {\r\n            var prop = props_1[_i];\r\n            out[prop] = el[prop];\r\n        }\r\n        // IE 11 pathname handling workaround\r\n        // (IE omits preceeding '/', unlike other browsers)\r\n        if ((out.pathname || out.pathname === '') &&\r\n            typeof out.pathname === 'string' &&\r\n            out.pathname.indexOf('/') !== 0) {\r\n            out.pathname = '/' + out.pathname;\r\n        }\r\n        return out;\r\n    },\r\n};\r\nvar parse = isReactNative\r\n    ? function () { return emptyUrl(); }\r\n    : typeof window === 'object'\r\n        ? urlParser.parse\r\n        : parse$1;\r\nfunction setCookie(name, value, expires) {\r\n    try {\r\n        var expiresString = '';\r\n        // TODO: need to know if secure server side\r\n        if (expires) {\r\n            expiresString = '; expires=' + expires.toUTCString();\r\n        }\r\n        var secure = isBrowser ? location.protocol === 'https:' : true;\r\n        document.cookie =\r\n            name +\r\n                '=' +\r\n                (value || '') +\r\n                expiresString +\r\n                '; path=/' +\r\n                (secure ? '; secure; SameSite=None' : '');\r\n    }\r\n    catch (err) {\r\n        console.warn('Could not set cookie', err);\r\n    }\r\n}\r\nfunction getCookie(name) {\r\n    try {\r\n        return (decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' +\r\n            encodeURIComponent(name).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') +\r\n            '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null);\r\n    }\r\n    catch (err) {\r\n        console.warn('Could not get cookie', err);\r\n    }\r\n}\r\nfunction size(object) {\r\n    return Object.keys(object).length;\r\n}\r\nfunction find(target, callback) {\r\n    var list = target;\r\n    // Makes sures is always has an positive integer as length.\r\n    var length = list.length >>> 0;\r\n    var thisArg = arguments[1];\r\n    for (var i = 0; i < length; i++) {\r\n        var element = list[i];\r\n        if (callback.call(thisArg, element, i, list)) {\r\n            return element;\r\n        }\r\n    }\r\n}\r\nvar sessionStorageKey = 'builderSessionId';\r\nvar localStorageKey = 'builderVisitorId';\r\nvar isBrowser = typeof window !== 'undefined' && !isReactNative;\r\nvar isIframe = isBrowser && window.top !== window.self;\r\nfunction BuilderComponent(info) {\r\n    if (info === void 0) { info = {}; }\r\n    return Builder.Component(info);\r\n}\r\nvar Builder = /** @class */ (function () {\r\n    function Builder(apiKey, request, response, forceNewInstance, authToken, apiVersion) {\r\n        if (apiKey === void 0) { apiKey = null; }\r\n        if (forceNewInstance === void 0) { forceNewInstance = false; }\r\n        if (authToken === void 0) { authToken = null; }\r\n        var _this = this;\r\n        this.request = request;\r\n        this.response = response;\r\n        this.eventsQueue = [];\r\n        this.throttledClearEventsQueue = throttle(function () {\r\n            _this.processEventsQueue();\r\n            // Extend the session cookie\r\n            _this.setCookie(sessionStorageKey, _this.sessionId, datePlusMinutes(30));\r\n        }, 5);\r\n        this.env = 'production';\r\n        this.sessionId = this.getSessionId();\r\n        this.targetContent = true;\r\n        this.contentPerRequest = 1;\r\n        // TODO: make array or function\r\n        this.allowCustomFonts = true;\r\n        this.cookies = null;\r\n        // TODO: api options object\r\n        this.cachebust = false;\r\n        this.overrideParams = '';\r\n        this.noCache = false;\r\n        this.preview = false;\r\n        /**\r\n         * Dictates which API endpoint is used when fetching content. Allows `'content'` and `'query'`.\r\n         * Defaults to `'query'`.\r\n         */\r\n        this.apiEndpoint$ = new BehaviorSubject('query');\r\n        this.apiVersion$ = new BehaviorSubject(undefined);\r\n        this.canTrack$ = new BehaviorSubject(!this.browserTrackingDisabled);\r\n        this.hasOverriddenCanTrack = false;\r\n        this.apiKey$ = new BehaviorSubject(null);\r\n        this.authToken$ = new BehaviorSubject(null);\r\n        this.userAttributesChanged = new BehaviorSubject(null);\r\n        this.editingMode$ = new BehaviorSubject(isIframe);\r\n        // TODO: decorator to do this stuff with the get/set (how do with typing too? compiler?)\r\n        this.editingModel$ = new BehaviorSubject(null);\r\n        this.userAgent = (typeof navigator === 'object' && navigator.userAgent) || '';\r\n        this.trackingHooks = [];\r\n        // Set this to control the userId\r\n        // TODO: allow changing it mid session and updating existing data to be associated\r\n        // e.g. for when a user navigates and then logs in\r\n        this.visitorId = this.getVisitorId();\r\n        this.autoTrack = !Builder.isBrowser\r\n            ? false\r\n            : !this.isDevelopmentEnv &&\r\n                !(Builder.isBrowser && location.search.indexOf('builder.preview=') !== -1);\r\n        this.trackingUserAttributes = {};\r\n        this.blockContentLoading = '';\r\n        this.observersByKey = {};\r\n        this.noEditorUpdates = {};\r\n        this.overrides = {};\r\n        this.queryOptions = {};\r\n        this.getContentQueue = null;\r\n        this.priorContentQueue = null;\r\n        this.testCookiePrefix = 'builder.tests';\r\n        this.cookieQueue = [];\r\n        // TODO: use a window variable for this perhaps, e.g. bc webcomponents may be loading builder twice\r\n        // with it's and react (use rollup build to fix)\r\n        if (Builder.isBrowser && !forceNewInstance && Builder.singletonInstance) {\r\n            return Builder.singletonInstance;\r\n        }\r\n        if (this.request && this.response) {\r\n            this.setUserAgent(this.request.headers['user-agent'] || '');\r\n            this.cookies = new Cookies(this.request, this.response);\r\n        }\r\n        if (apiKey) {\r\n            this.apiKey = apiKey;\r\n        }\r\n        if (apiVersion) {\r\n            this.apiVersion = apiVersion;\r\n        }\r\n        if (authToken) {\r\n            this.authToken = authToken;\r\n        }\r\n        if (isBrowser) {\r\n            if (Builder.isEditing) {\r\n                this.bindMessageListeners();\r\n                parent.postMessage({\r\n                    type: 'builder.animatorOptions',\r\n                    data: {\r\n                        options: {\r\n                            version: 2,\r\n                        },\r\n                    },\r\n                }, '*');\r\n            }\r\n            // TODO: postmessage to parent the builder info for every package\r\n            // type: 'builder.sdk', data: { name: '@builder.io/react', version: '0.1.23' }\r\n            // (window as any).BUILDER_VERSION = Builder.VERSION;\r\n            // Ensure always one Builder global singleton\r\n            // TODO: some people won't want this, e.g. rakuten\r\n            // Maybe hide this behind symbol or on document, etc\r\n            // if ((window as any).Builder) {\r\n            //   Builder.components = (window as any).Builder.components;\r\n            // } else {\r\n            //   (window as any).Builder = Builder;\r\n            // }\r\n        }\r\n        if (isIframe) {\r\n            this.messageFrameLoaded();\r\n        }\r\n        // TODO: on destroy clear subscription\r\n        this.canTrack$.subscribe(function (value) {\r\n            if (value) {\r\n                if (typeof sessionStorage !== 'undefined') {\r\n                    try {\r\n                        if (!sessionStorage.getItem(sessionStorageKey)) {\r\n                            sessionStorage.setItem(sessionStorageKey, _this.sessionId);\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        console.debug('Session storage error', err);\r\n                    }\r\n                }\r\n                if (_this.eventsQueue.length) {\r\n                    _this.throttledClearEventsQueue();\r\n                }\r\n                if (_this.cookieQueue.length) {\r\n                    _this.cookieQueue.forEach(function (item) {\r\n                        _this.setCookie(item[0], item[1]);\r\n                    });\r\n                    _this.cookieQueue.length = 0;\r\n                }\r\n            }\r\n        });\r\n        if (isBrowser) {\r\n            // TODO: defer so subclass constructor runs and injects location service\r\n            this.setTestsFromUrl();\r\n            // TODO: do this on every request send?\r\n            this.getOverridesFromQueryString();\r\n            // cookies used in personalization container script, so need to set before hydration to match script result\r\n            var userAttrCookie = this.getCookie(Builder.attributesCookieName);\r\n            if (userAttrCookie) {\r\n                try {\r\n                    var attributes = JSON.parse(userAttrCookie);\r\n                    this.setUserAttributes(attributes);\r\n                }\r\n                catch (err) {\r\n                    console.debug('Error parsing user attributes cookie', err);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Builder.register = function (type, info) {\r\n        if (type === 'plugin') {\r\n            info = this.serializeIncludingFunctions(info, true);\r\n        }\r\n        // TODO: all must have name and can't conflict?\r\n        var typeList = this.registry[type];\r\n        if (!typeList) {\r\n            typeList = this.registry[type] = [];\r\n        }\r\n        typeList.push(info);\r\n        if (Builder.isBrowser) {\r\n            var message = {\r\n                type: 'builder.register',\r\n                data: {\r\n                    type: type,\r\n                    info: info,\r\n                },\r\n            };\r\n            try {\r\n                parent.postMessage(message, '*');\r\n                if (parent !== window) {\r\n                    window.postMessage(message, '*');\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.debug('Could not postmessage', err);\r\n            }\r\n        }\r\n        this.registryChange.next(this.registry);\r\n    };\r\n    Builder.registerEditor = function (info) {\r\n        if (Builder.isBrowser) {\r\n            window.postMessage({\r\n                type: 'builder.registerEditor',\r\n                data: omit(info, 'component'),\r\n            }, '*');\r\n            var hostname = location.hostname;\r\n            if (!Builder.isTrustedHost(hostname)) {\r\n                console.error('Builder.registerEditor() called in the wrong environment! You cannot load custom editors from your app, they must be loaded through the Builder.io app itself. Follow the readme here for more details: https://github.com/builderio/builder/tree/master/plugins/cloudinary or contact chat us in our Spectrum community for help: https://spectrum.chat/builder');\r\n            }\r\n        }\r\n        this.editors.push(info);\r\n    };\r\n    Builder.registerPlugin = function (info) {\r\n        this.plugins.push(info);\r\n    };\r\n    Builder.registerAction = function (action) {\r\n        var _a;\r\n        this.actions.push(action);\r\n        if (Builder.isBrowser) {\r\n            var actionClone = JSON.parse(JSON.stringify(action));\r\n            if (action.action) {\r\n                actionClone.action = action.action.toString();\r\n            }\r\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n                type: 'builder.registerAction',\r\n                data: actionClone,\r\n            }, '*');\r\n        }\r\n    };\r\n    Builder.registerTrustedHost = function (host) {\r\n        this.trustedHosts.push(host);\r\n    };\r\n    /**\r\n     * @param context @type {import('isolated-vm').Context}\r\n     * Use this function to control the execution context of custom code on the server.\r\n     * const ivm = require('isolated-vm');\r\n     * const isolate = new ivm.Isolate({ memoryLimit: 128 });\r\n     * const context = isolate.createContextSync();\r\n     * Builder.setServerContext(context);\r\n     */\r\n    Builder.setServerContext = function (context) {\r\n        this.serverContext = context;\r\n    };\r\n    Builder.isTrustedHost = function (hostname) {\r\n        var isTrusted = this.trustedHosts.findIndex(function (trustedHost) {\r\n            return trustedHost.startsWith('*.')\r\n                ? hostname.endsWith(trustedHost.slice(1))\r\n                : trustedHost === hostname;\r\n        }) > -1;\r\n        return isTrusted;\r\n    };\r\n    Builder.isTrustedHostForEvent = function (event) {\r\n        if (event.origin === 'null') {\r\n            return false;\r\n        }\r\n        var url = parse(event.origin);\r\n        return url.hostname && Builder.isTrustedHost(url.hostname);\r\n    };\r\n    Builder.runAction = function (action) {\r\n        // TODO\r\n        var actionObject = typeof action === 'string' ? find(this.actions, function (item) { return item.name === action; }) : action;\r\n        if (!actionObject) {\r\n            throw new Error(\"Action not found: \".concat(action));\r\n        }\r\n    };\r\n    Builder.fields = function (name, fields) {\r\n        var _a;\r\n        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n            type: 'builder.fields',\r\n            data: { name: name, fields: fields },\r\n        }, '*');\r\n    };\r\n    /**\r\n     * @deprecated\r\n     * @hidden\r\n     *\r\n     * Use Builder.register('editor.settings', {}) instead.\r\n     */\r\n    Builder.set = function (settings) {\r\n        Builder.register('editor.settings', settings);\r\n    };\r\n    Builder.import = function (packageName) {\r\n        if (!Builder.isBrowser) {\r\n            // TODO: server side support *maybe*\r\n            console.warn('Builder.import used on the server - this should only be used in the browser');\r\n            return;\r\n        }\r\n        var System = window.System;\r\n        if (!System) {\r\n            console.warn('System.js not available. Please include System.js when using Builder.import');\r\n            return;\r\n        }\r\n        return System.import(\"https://cdn.builder.io/systemjs/\".concat(packageName));\r\n    };\r\n    Object.defineProperty(Builder, \"editingPage\", {\r\n        // useCdnApi = false;\r\n        get: function () {\r\n            return this._editingPage;\r\n        },\r\n        set: function (editingPage) {\r\n            this._editingPage = editingPage;\r\n            if (isBrowser && isIframe) {\r\n                if (editingPage) {\r\n                    document.body.classList.add('builder-editing-page');\r\n                }\r\n                else {\r\n                    document.body.classList.remove('builder-editing-page');\r\n                }\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Builder.serializeIncludingFunctions = function (info, isForPlugin) {\r\n        var serializeFn = function (fnValue) {\r\n            var fnStr = fnValue.toString().trim();\r\n            // we need to account for a few different fn syntaxes:\r\n            // 1. `function name(args) => {code}`\r\n            // 2. `name(args) => {code}`\r\n            // 3. `(args) => {}`\r\n            // 4. `args => {}`\r\n            // 5. `async function(args) {code}`\r\n            // 6. `async (args) => {}`\r\n            // 7. `async args => {}`\r\n            var isArrowWithoutParens = /^[a-zA-Z0-9_]+\\s*=>/i.test(fnStr);\r\n            var appendFunction = !fnStr.startsWith('function') &&\r\n                !fnStr.startsWith('async') &&\r\n                !fnStr.startsWith('(') &&\r\n                !isArrowWithoutParens;\r\n            return \"return (\".concat(appendFunction ? 'function ' : '').concat(fnStr, \").apply(this, arguments)\");\r\n        };\r\n        var objToReturn = JSON.parse(JSON.stringify(info, function (key, value) {\r\n            var shouldNotSerializeFn = isForPlugin && key === 'onSave';\r\n            if (typeof value === 'function' && !shouldNotSerializeFn) {\r\n                return serializeFn(value);\r\n            }\r\n            return value;\r\n        }));\r\n        if (isForPlugin) {\r\n            objToReturn.onSave = info.onSave;\r\n        }\r\n        return objToReturn;\r\n    };\r\n    Builder.prepareComponentSpecToSend = function (spec) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, this.serializeIncludingFunctions(spec)), { class: undefined });\r\n    };\r\n    Builder.registerBlock = function (component, options) {\r\n        this.registerComponent(component, options);\r\n    };\r\n    Builder.registerComponent = function (component, options) {\r\n        var _a;\r\n        var spec = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ class: component }, component.builderOptions), options);\r\n        this.addComponent(spec);\r\n        var editable = options.models && this.singletonInstance.editingModel\r\n            ? isBrowser && options.models.includes(this.singletonInstance.editingModel)\r\n            : isBrowser;\r\n        if (editable) {\r\n            var sendSpec = this.prepareComponentSpecToSend(spec);\r\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n                type: 'builder.registerComponent',\r\n                data: sendSpec,\r\n            }, '*');\r\n        }\r\n    };\r\n    Builder.addComponent = function (component) {\r\n        var current = find(this.components, function (item) { return item.name === component.name; });\r\n        if (current) {\r\n            // FIXME: why does sometimes we get an extra post without class - probably\r\n            // from postMessage handler wrong in some place\r\n            if (current.class && !component.class) {\r\n                return;\r\n            }\r\n            this.components.splice(this.components.indexOf(current), 1, component);\r\n        }\r\n        else {\r\n            this.components.push(component);\r\n        }\r\n    };\r\n    // TODO: style guide, etc off this system as well?\r\n    Builder.component = function (info) {\r\n        var _this = this;\r\n        if (info === void 0) { info = {}; }\r\n        return function (component) {\r\n            var _a;\r\n            var spec = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, info), { class: component });\r\n            if (!spec.name) {\r\n                spec.name = component.name;\r\n            }\r\n            _this.addComponent(spec);\r\n            var sendSpec = _this.prepareComponentSpecToSend(spec);\r\n            // TODO: serialize component name and inputs\r\n            if (isBrowser) {\r\n                (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n                    type: 'builder.registerComponent',\r\n                    data: sendSpec,\r\n                }, '*');\r\n            }\r\n            return component;\r\n        };\r\n    };\r\n    Object.defineProperty(Builder, \"Component\", {\r\n        get: function () {\r\n            return this.component;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Builder.prototype.processEventsQueue = function () {\r\n        if (!this.eventsQueue.length) {\r\n            return;\r\n        }\r\n        var events = this.eventsQueue;\r\n        this.eventsQueue = [];\r\n        var fullUserAttributes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, Builder.overrideUserAttributes), this.trackingUserAttributes);\r\n        for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {\r\n            var event_1 = events_1[_i];\r\n            if (!event_1.data.metadata) {\r\n                event_1.data.metadata = {};\r\n            }\r\n            if (!event_1.data.metadata.user) {\r\n                event_1.data.metadata.user = {};\r\n            }\r\n            Object.assign(event_1.data.metadata.user, fullUserAttributes, event_1.data.metadata.user);\r\n        }\r\n        var host = this.host;\r\n        getFetch()(\"\".concat(host, \"/api/v1/track\"), {\r\n            method: 'POST',\r\n            body: JSON.stringify({ events: events }),\r\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ 'content-type': 'application/json' }, this.getSdkHeaders()),\r\n            mode: 'cors',\r\n        }).catch(function () {\r\n            // Not the end of the world\r\n        });\r\n    };\r\n    Object.defineProperty(Builder.prototype, \"browserTrackingDisabled\", {\r\n        get: function () {\r\n            return Builder.isBrowser && Boolean(window.builderNoTrack || !navigator.cookieEnabled);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Builder.prototype, \"canTrack\", {\r\n        get: function () {\r\n            return this.canTrack$.value;\r\n        },\r\n        set: function (canTrack) {\r\n            this.hasOverriddenCanTrack = true;\r\n            if (this.canTrack !== canTrack) {\r\n                this.canTrack$.next(canTrack);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Builder.prototype, \"apiVersion\", {\r\n        get: function () {\r\n            return this.apiVersion$.value;\r\n        },\r\n        set: function (apiVersion) {\r\n            if (this.apiVersion !== apiVersion) {\r\n                this.apiVersion$.next(apiVersion);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Builder.prototype, \"apiEndpoint\", {\r\n        get: function () {\r\n            return this.apiEndpoint$.value;\r\n        },\r\n        set: function (apiEndpoint) {\r\n            if (this.apiEndpoint !== apiEndpoint) {\r\n                this.apiEndpoint$.next(apiEndpoint);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Builder.prototype, \"editingMode\", {\r\n        get: function () {\r\n            return this.editingMode$.value;\r\n        },\r\n        set: function (value) {\r\n            if (value !== this.editingMode) {\r\n                this.editingMode$.next(value);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Builder.prototype, \"editingModel\", {\r\n        get: function () {\r\n            return this.editingModel$.value;\r\n        },\r\n        set: function (value) {\r\n            if (value !== this.editingModel) {\r\n                this.editingModel$.next(value);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Builder.prototype.findParentElement = function (target, callback, checkElement) {\r\n        if (checkElement === void 0) { checkElement = true; }\r\n        if (!(target instanceof HTMLElement)) {\r\n            return null;\r\n        }\r\n        var parent = checkElement ? target : target.parentElement;\r\n        do {\r\n            if (!parent) {\r\n                return null;\r\n            }\r\n            var matches = callback(parent);\r\n            if (matches) {\r\n                return parent;\r\n            }\r\n        } while ((parent = parent.parentElement));\r\n        return null;\r\n    };\r\n    Builder.prototype.findBuilderParent = function (target) {\r\n        return this.findParentElement(target, function (el) {\r\n            var id = el.getAttribute('builder-id') || el.id;\r\n            return Boolean(id && id.indexOf('builder-') === 0);\r\n        });\r\n    };\r\n    Builder.prototype.setUserAgent = function (userAgent) {\r\n        this.userAgent = userAgent || '';\r\n    };\r\n    /**\r\n     * Set a hook to modify events being tracked from builder, such as impressions and clicks\r\n     *\r\n     * For example, to track the model ID of each event associated with content for querying\r\n     * by mode, you can do\r\n     *\r\n     *    builder.setTrackingHook((event, context) => {\r\n     *      if (context.content) {\r\n     *        event.data.metadata.modelId = context.content.modelId\r\n     *      }\r\n     *    })\r\n     */\r\n    Builder.prototype.setTrackingHook = function (hook) {\r\n        this.trackingHooks.push(hook);\r\n    };\r\n    Builder.prototype.track = function (eventName, properties, context) {\r\n        if (properties === void 0) { properties = {}; }\r\n        // TODO: queue up track requests and fire them off when canTrack set to true - otherwise may get lots of clicks with no impressions\r\n        if (isIframe || !isBrowser || Builder.isPreviewing) {\r\n            return;\r\n        }\r\n        var apiKey = this.apiKey;\r\n        if (!apiKey) {\r\n            console.error('Builder integration error: Looks like the Builder SDK has not been initialized properly (your API key has not been set). Make sure you are calling `builder.init(\"«YOUR-API-KEY»\");` as early as possible in your application\\'s code.');\r\n            return;\r\n        }\r\n        var eventData = JSON.parse(JSON.stringify({\r\n            type: eventName,\r\n            data: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, omit(properties, 'meta')), { metadata: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ sdkVersion: Builder.VERSION, url: location.href }, properties.meta), properties.metadata), ownerId: apiKey, userAttributes: this.getUserAttributes(), sessionId: this.sessionId, visitorId: this.visitorId }),\r\n        }));\r\n        for (var _i = 0, _a = this.trackingHooks; _i < _a.length; _i++) {\r\n            var hook = _a[_i];\r\n            var returnValue = hook(eventData, context || {});\r\n            if (returnValue) {\r\n                eventData = returnValue;\r\n            }\r\n        }\r\n        // batch events\r\n        this.eventsQueue.push(eventData);\r\n        if (this.canTrack) {\r\n            this.throttledClearEventsQueue();\r\n        }\r\n    };\r\n    Builder.prototype.getSessionId = function () {\r\n        var _this = this;\r\n        var sessionId = null;\r\n        try {\r\n            if (Builder.isBrowser && typeof sessionStorage !== 'undefined') {\r\n                sessionId = this.getCookie(sessionStorageKey);\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.debug('Session storage error', err);\r\n            // It's ok\r\n        }\r\n        if (!sessionId) {\r\n            sessionId = uuid();\r\n        }\r\n        // Give the app a second to start up and set canTrack to false if needed\r\n        if (Builder.isBrowser) {\r\n            setTimeout(function () {\r\n                try {\r\n                    if (_this.canTrack) {\r\n                        _this.setCookie(sessionStorageKey, sessionId, datePlusMinutes(30));\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.debug('Cookie setting error', err);\r\n                }\r\n            });\r\n        }\r\n        return sessionId;\r\n    };\r\n    Builder.prototype.getVisitorId = function () {\r\n        var _this = this;\r\n        if (this.visitorId) {\r\n            return this.visitorId;\r\n        }\r\n        var visitorId = null;\r\n        try {\r\n            if (Builder.isBrowser && typeof localStorage !== 'undefined') {\r\n                // TODO: cookie instead?\r\n                visitorId = localStorage.getItem(localStorageKey);\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.debug('Local storage error', err);\r\n            // It's ok\r\n        }\r\n        if (!visitorId) {\r\n            visitorId = uuid();\r\n        }\r\n        this.visitorId = visitorId;\r\n        // Give the app a second to start up and set canTrack to false if needed\r\n        if (Builder.isBrowser) {\r\n            setTimeout(function () {\r\n                try {\r\n                    if (_this.canTrack && typeof localStorage !== 'undefined' && visitorId) {\r\n                        localStorage.setItem(localStorageKey, visitorId);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.debug('Session storage error', err);\r\n                }\r\n            });\r\n        }\r\n        return visitorId;\r\n    };\r\n    Builder.prototype.trackImpression = function (contentId, variationId, properties, context) {\r\n        if (isIframe || !isBrowser || Builder.isPreviewing) {\r\n            return;\r\n        }\r\n        // TODO: use this.track method\r\n        this.track('impression', {\r\n            contentId: contentId,\r\n            variationId: variationId !== contentId ? variationId : undefined,\r\n            metadata: properties,\r\n        }, context);\r\n    };\r\n    Builder.prototype.trackConversion = function (amount, contentId, variationId, customProperties, context) {\r\n        if (isIframe || !isBrowser || Builder.isPreviewing) {\r\n            return;\r\n        }\r\n        var meta = typeof contentId === 'object' ? contentId : customProperties;\r\n        var useContentId = typeof contentId === 'string' ? contentId : undefined;\r\n        this.track('conversion', { amount: amount, variationId: variationId, meta: meta, contentId: useContentId }, context);\r\n    };\r\n    Object.defineProperty(Builder.prototype, \"isDevelopmentEnv\", {\r\n        // TODO: set this for QA\r\n        get: function () {\r\n            // Automatic determining of development environment\r\n            return (Builder.isIframe ||\r\n                (Builder.isBrowser && (location.hostname === 'localhost' || location.port !== '')) ||\r\n                this.env !== 'production');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Builder.prototype.trackInteraction = function (contentId, variationId, alreadyTrackedOne, event, context) {\r\n        if (alreadyTrackedOne === void 0) { alreadyTrackedOne = false; }\r\n        if (isIframe || !isBrowser || Builder.isPreviewing) {\r\n            return;\r\n        }\r\n        var target = event && event.target;\r\n        var targetBuilderElement = target && this.findBuilderParent(target);\r\n        function round(num) {\r\n            return Math.round(num * 1000) / 1000;\r\n        }\r\n        var metadata = {};\r\n        if (event) {\r\n            var clientX = event.clientX, clientY = event.clientY;\r\n            if (target) {\r\n                var targetRect = target.getBoundingClientRect();\r\n                var xOffset = clientX - targetRect.left;\r\n                var yOffset = clientY - targetRect.top;\r\n                var xRatio = round(xOffset / targetRect.width);\r\n                var yRatio = round(yOffset / targetRect.height);\r\n                metadata.targetOffset = {\r\n                    x: xRatio,\r\n                    y: yRatio,\r\n                };\r\n            }\r\n            if (targetBuilderElement) {\r\n                var targetRect = targetBuilderElement.getBoundingClientRect();\r\n                var xOffset = clientX - targetRect.left;\r\n                var yOffset = clientY - targetRect.top;\r\n                var xRatio = round(xOffset / targetRect.width);\r\n                var yRatio = round(yOffset / targetRect.height);\r\n                metadata.builderTargetOffset = {\r\n                    x: xRatio,\r\n                    y: yRatio,\r\n                };\r\n            }\r\n        }\r\n        var builderId = targetBuilderElement &&\r\n            (targetBuilderElement.getAttribute('builder-id') || targetBuilderElement.id);\r\n        if (builderId && targetBuilderElement) {\r\n            metadata.builderElementIndex = [].slice\r\n                .call(document.getElementsByClassName(builderId))\r\n                .indexOf(targetBuilderElement);\r\n        }\r\n        this.track('click', {\r\n            contentId: contentId,\r\n            metadata: metadata,\r\n            variationId: variationId !== contentId ? variationId : undefined,\r\n            unique: !alreadyTrackedOne,\r\n            targetBuilderElement: builderId || undefined,\r\n        }, context);\r\n    };\r\n    Builder.prototype.component = function (info) {\r\n        if (info === void 0) { info = {}; }\r\n        return Builder.component(info);\r\n    };\r\n    Object.defineProperty(Builder.prototype, \"apiKey\", {\r\n        get: function () {\r\n            return this.apiKey$.value;\r\n        },\r\n        set: function (key) {\r\n            this.apiKey$.next(key);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Builder.prototype, \"authToken\", {\r\n        get: function () {\r\n            return this.authToken$.value;\r\n        },\r\n        set: function (token) {\r\n            this.authToken$.next(token);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Builder.prototype.modifySearch = function (search) {\r\n        return search.replace(/(^|&|\\?)(builder_.*?)=/gi, function (_match, group1, group2) { return group1 + group2.replace(/_/g, '.') + '='; });\r\n    };\r\n    Builder.prototype.setTestsFromUrl = function () {\r\n        var search = this.getLocation().search;\r\n        try {\r\n            var params = QueryString.parseDeep(this.modifySearch(search || '').substr(1));\r\n            var tests = params.builder && params.builder.tests;\r\n            if (tests && typeof tests === 'object') {\r\n                for (var key in tests) {\r\n                    if (tests.hasOwnProperty(key)) {\r\n                        this.setTestCookie(key, tests[key]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.debug('Error parsing tests from URL', e);\r\n        }\r\n    };\r\n    Builder.prototype.resetOverrides = function () {\r\n        // Ugly - pass down instances per request instead using react context\r\n        // or use builder.get('foo', { req, res }) in react...........\r\n        Builder.overrideUserAttributes = {};\r\n        this.cachebust = false;\r\n        this.noCache = false;\r\n        this.preview = false;\r\n        this.editingModel = null;\r\n        this.overrides = {};\r\n        this.env = 'production';\r\n        this.userAgent = '';\r\n        this.request = undefined;\r\n        this.response = undefined;\r\n    };\r\n    Builder.prototype.getOverridesFromQueryString = function () {\r\n        var location = this.getLocation();\r\n        try {\r\n            var params = QueryString.parseDeep(this.modifySearch(location.search || '').substr(1));\r\n            var builder = params.builder;\r\n            if (builder) {\r\n                var userAttributes = builder.userAttributes, overrides = builder.overrides, env = builder.env, host = builder.host, api = builder.api, cachebust = builder.cachebust, noCache = builder.noCache, preview = builder.preview, editing = builder.editing, frameEditing = builder.frameEditing, options = builder.options, overrideParams = builder.params;\r\n                if (userAttributes) {\r\n                    this.setUserAttributes(userAttributes);\r\n                }\r\n                if (options) {\r\n                    // picking only locale, includeRefs, and enrich for now\r\n                    this.queryOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, (options.locale && { locale: options.locale })), (options.includeRefs && { includeRefs: options.includeRefs })), (options.enrich && { enrich: options.enrich }));\r\n                }\r\n                if (overrides) {\r\n                    this.overrides = overrides;\r\n                }\r\n                if (validEnvList.indexOf(env || api) > -1) {\r\n                    this.env = env || api;\r\n                }\r\n                if (Builder.isEditing) {\r\n                    var editingModel = frameEditing || editing || preview;\r\n                    if (editingModel && editingModel !== 'true') {\r\n                        this.editingModel = editingModel;\r\n                    }\r\n                }\r\n                if (cachebust) {\r\n                    this.cachebust = true;\r\n                }\r\n                if (noCache) {\r\n                    this.noCache = true;\r\n                }\r\n                if (preview) {\r\n                    this.preview = true;\r\n                }\r\n                if (params) {\r\n                    this.overrideParams = overrideParams;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.debug('Error parsing overrides from URL', e);\r\n        }\r\n    };\r\n    Builder.prototype.messageFrameLoaded = function () {\r\n        var _a;\r\n        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n            type: 'builder.loaded',\r\n            data: {\r\n                value: true,\r\n            },\r\n        }, '*');\r\n    };\r\n    Builder.prototype.bindMessageListeners = function () {\r\n        var _this = this;\r\n        addEventListener('message', function (event) {\r\n            var _a, _b, _c, _d;\r\n            var isTrusted = Builder.isTrustedHostForEvent(event);\r\n            if (!isTrusted)\r\n                return;\r\n            var data = event.data;\r\n            if (data) {\r\n                switch (data.type) {\r\n                    case 'builder.ping': {\r\n                        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n                            type: 'builder.pong',\r\n                            data: {},\r\n                        }, '*');\r\n                        break;\r\n                    }\r\n                    case 'builder.register': {\r\n                        // TODO: possibly do this for all...\r\n                        if (event.source === window) {\r\n                            break;\r\n                        }\r\n                        var options = data.data;\r\n                        if (!options) {\r\n                            break;\r\n                        }\r\n                        var type = options.type, info = options.info;\r\n                        // TODO: all must have name and can't conflict?\r\n                        var typeList = Builder.registry[type];\r\n                        if (!typeList) {\r\n                            typeList = Builder.registry[type] = [];\r\n                        }\r\n                        typeList.push(info);\r\n                        Builder.registryChange.next(Builder.registry);\r\n                        break;\r\n                    }\r\n                    case 'builder.settingsChange': {\r\n                        // TODO: possibly do this for all...\r\n                        if (event.source === window) {\r\n                            break;\r\n                        }\r\n                        var settings = data.data;\r\n                        if (!settings) {\r\n                            break;\r\n                        }\r\n                        Object.assign(Builder.settings, settings);\r\n                        Builder.settingsChange.next(Builder.settings);\r\n                        break;\r\n                    }\r\n                    case 'builder.registerEditor': {\r\n                        // TODO: possibly do this for all...\r\n                        if (event.source === window) {\r\n                            break;\r\n                        }\r\n                        var info_1 = data.data;\r\n                        if (!info_1) {\r\n                            break;\r\n                        }\r\n                        var hasComponent_1 = !!info_1.component;\r\n                        Builder.editors.every(function (thisInfo, index) {\r\n                            if (info_1.name === thisInfo.name) {\r\n                                if (thisInfo.component && !hasComponent_1) {\r\n                                    return false;\r\n                                }\r\n                                else {\r\n                                    Builder.editors[index] = thisInfo;\r\n                                }\r\n                                return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                        break;\r\n                    }\r\n                    case 'builder.triggerAnimation': {\r\n                        Builder.animator.triggerAnimation(data.data);\r\n                        break;\r\n                    }\r\n                    case 'builder.contentUpdate':\r\n                        var key = data.data.key || data.data.alias || data.data.entry || data.data.modelName;\r\n                        var contentData = data.data.data; // hmmm...\r\n                        var observer = _this.observersByKey[key];\r\n                        if (observer && !_this.noEditorUpdates[key]) {\r\n                            observer.next([contentData]);\r\n                        }\r\n                        break;\r\n                    case 'builder.getComponents':\r\n                        (_b = window.parent) === null || _b === void 0 ? void 0 : _b.postMessage({\r\n                            type: 'builder.components',\r\n                            data: Builder.components.map(function (item) { return Builder.prepareComponentSpecToSend(item); }),\r\n                        }, '*');\r\n                        break;\r\n                    case 'builder.editingModel':\r\n                        _this.editingModel = data.data.model;\r\n                        break;\r\n                    case 'builder.registerComponent':\r\n                        var componentData = data.data;\r\n                        Builder.addComponent(componentData);\r\n                        break;\r\n                    case 'builder.blockContentLoading':\r\n                        if (typeof data.data.model === 'string') {\r\n                            _this.blockContentLoading = data.data.model;\r\n                        }\r\n                        break;\r\n                    case 'builder.editingMode':\r\n                        var editingMode = data.data;\r\n                        if (editingMode) {\r\n                            _this.editingMode = true;\r\n                            document.body.classList.add('builder-editing');\r\n                        }\r\n                        else {\r\n                            _this.editingMode = false;\r\n                            document.body.classList.remove('builder-editing');\r\n                        }\r\n                        break;\r\n                    case 'builder.editingPageMode':\r\n                        var editingPageMode = data.data;\r\n                        Builder.editingPage = editingPageMode;\r\n                        break;\r\n                    case 'builder.overrideUserAttributes':\r\n                        var userAttributes = data.data;\r\n                        assign(Builder.overrideUserAttributes, userAttributes);\r\n                        _this.flushGetContentQueue(true);\r\n                        // TODO: refetch too\r\n                        break;\r\n                    case 'builder.overrideTestGroup':\r\n                        var _e = data.data, variationId = _e.variationId, contentId = _e.contentId;\r\n                        if (variationId && contentId) {\r\n                            _this.setTestCookie(contentId, variationId);\r\n                            _this.flushGetContentQueue(true);\r\n                        }\r\n                        break;\r\n                    case 'builder.evaluate': {\r\n                        var text = data.data.text;\r\n                        var args = data.data.arguments || [];\r\n                        var id_1 = data.data.id;\r\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\r\n                        var fn = new Function(text);\r\n                        var result = void 0;\r\n                        var error = null;\r\n                        try {\r\n                            result = fn.apply(_this, args);\r\n                        }\r\n                        catch (err) {\r\n                            error = toError(err);\r\n                        }\r\n                        if (error) {\r\n                            (_c = window.parent) === null || _c === void 0 ? void 0 : _c.postMessage({\r\n                                type: 'builder.evaluateError',\r\n                                data: { id: id_1, error: error.message },\r\n                            }, '*');\r\n                        }\r\n                        else {\r\n                            if (result && typeof result.then === 'function') {\r\n                                result\r\n                                    .then(function (finalResult) {\r\n                                    var _a;\r\n                                    (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n                                        type: 'builder.evaluateResult',\r\n                                        data: { id: id_1, result: finalResult },\r\n                                    }, '*');\r\n                                })\r\n                                    .catch(console.error);\r\n                            }\r\n                            else {\r\n                                (_d = window.parent) === null || _d === void 0 ? void 0 : _d.postMessage({\r\n                                    type: 'builder.evaluateResult',\r\n                                    data: { result: result, id: id_1 },\r\n                                }, '*');\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(Builder.prototype, \"defaultCanTrack\", {\r\n        get: function () {\r\n            return Boolean(Builder.isBrowser &&\r\n                navigator.userAgent.trim() &&\r\n                !navigator.userAgent.match(/bot|crawler|spider|robot|crawling|prerender|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex|phantom|headless|selenium|puppeteer/i) &&\r\n                !this.browserTrackingDisabled);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Builder.prototype.init = function (apiKey, canTrack, req, res, authToken, apiVersion) {\r\n        if (canTrack === void 0) { canTrack = this.defaultCanTrack; }\r\n        if (req) {\r\n            this.request = req;\r\n        }\r\n        if (res) {\r\n            this.response = res;\r\n        }\r\n        if (!this.hasOverriddenCanTrack) {\r\n            this.canTrack = canTrack;\r\n        }\r\n        this.apiKey = apiKey;\r\n        if (authToken) {\r\n            this.authToken = authToken;\r\n        }\r\n        if (apiVersion) {\r\n            this.apiVersion = apiVersion;\r\n        }\r\n        return this;\r\n    };\r\n    Object.defineProperty(Builder.prototype, \"previewingModel\", {\r\n        get: function () {\r\n            var search = this.getLocation().search;\r\n            var params = QueryString.parse((search || '').substr(1));\r\n            return params['builder.preview'];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    // TODO: allow adding location object as property and/or in constructor\r\n    Builder.prototype.getLocation = function () {\r\n        var _a;\r\n        var parsedLocation = {};\r\n        // in ssr mode\r\n        if (this.request) {\r\n            parsedLocation = parse((_a = this.request.url) !== null && _a !== void 0 ? _a : '');\r\n        }\r\n        else if (typeof location === 'object') {\r\n            // in the browser\r\n            parsedLocation = parse(location.href);\r\n        }\r\n        // IE11 bug with parsed path being empty string\r\n        // causes issues with our user targeting\r\n        if (parsedLocation.pathname === '') {\r\n            parsedLocation.pathname = '/';\r\n        }\r\n        return parsedLocation;\r\n    };\r\n    Builder.prototype.getUserAttributes = function (userAgent) {\r\n        if (userAgent === void 0) { userAgent = this.userAgent || ''; }\r\n        var isMobile = {\r\n            Android: function () {\r\n                return userAgent.match(/Android/i);\r\n            },\r\n            BlackBerry: function () {\r\n                return userAgent.match(/BlackBerry/i);\r\n            },\r\n            iOS: function () {\r\n                return userAgent.match(/iPhone|iPod/i);\r\n            },\r\n            Opera: function () {\r\n                return userAgent.match(/Opera Mini/i);\r\n            },\r\n            Windows: function () {\r\n                return userAgent.match(/IEMobile/i) || userAgent.match(/WPDesktop/i);\r\n            },\r\n            any: function () {\r\n                return (isMobile.Android() ||\r\n                    isMobile.BlackBerry() ||\r\n                    isMobile.iOS() ||\r\n                    isMobile.Opera() ||\r\n                    isMobile.Windows());\r\n            },\r\n        };\r\n        var isTablet = userAgent.match(/Tablet|iPad/i);\r\n        var url = this.getLocation();\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ urlPath: url.pathname, host: url.host || url.hostname, \r\n            // TODO: maybe an option to choose to target off of mobile/tablet/desktop or just mobile/desktop\r\n            device: isTablet ? 'tablet' : isMobile.any() ? 'mobile' : 'desktop' }, Builder.overrideUserAttributes);\r\n    };\r\n    Builder.prototype.setUserAttributes = function (options) {\r\n        assign(Builder.overrideUserAttributes, options);\r\n        if (this.canTrack) {\r\n            this.setCookie(Builder.attributesCookieName, JSON.stringify(this.getUserAttributes()));\r\n        }\r\n        this.userAttributesChanged.next(options);\r\n    };\r\n    /**\r\n     * Set user attributes just for tracking purposes.\r\n     *\r\n     * Do this so properties exist on event objects for querying insights, but\r\n     * won't affect targeting\r\n     *\r\n     * Use this when you want to track properties but don't need to target off\r\n     * of them to optimize cache efficiency\r\n     */\r\n    Builder.prototype.setTrackingUserAttributes = function (attributes) {\r\n        assign(this.trackingUserAttributes, attributes);\r\n    };\r\n    Builder.prototype.get = function (modelName, options) {\r\n        var _a;\r\n        if (options === void 0) { options = {}; }\r\n        var instance = this;\r\n        var finalLocale = options.locale || ((_a = options.userAttributes) === null || _a === void 0 ? void 0 : _a.locale) || this.getUserAttributes().locale;\r\n        if (!('noTraverse' in options)) {\r\n            options.noTraverse = false;\r\n        }\r\n        var finalOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), (finalLocale && {\r\n            locale: String(finalLocale),\r\n            userAttributes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ locale: String(finalLocale) }, options.userAttributes),\r\n        }));\r\n        if (!Builder.isBrowser) {\r\n            instance = new Builder(options.apiKey || this.apiKey, options.req, options.res, undefined, options.authToken || this.authToken, options.apiVersion || this.apiVersion);\r\n            instance.apiEndpoint = this.apiEndpoint;\r\n            instance.setUserAttributes(this.getUserAttributes());\r\n        }\r\n        else {\r\n            // NOTE: All these are when .init is not called and the customer\r\n            // directly calls .get on the singleton instance of Builder\r\n            if (options.apiKey && !this.apiKey) {\r\n                this.apiKey = options.apiKey;\r\n            }\r\n            if (options.authToken && !this.authToken) {\r\n                this.authToken = options.authToken;\r\n            }\r\n            if (options.apiVersion && !this.apiVersion) {\r\n                this.apiVersion = options.apiVersion;\r\n            }\r\n        }\r\n        return instance.queueGetContent(modelName, finalOptions).map(\r\n        /* map( */ function (matches) {\r\n            var match = matches && matches[0];\r\n            if (Builder.isStatic) {\r\n                return match;\r\n            }\r\n            var matchData = match && match.data;\r\n            if (!matchData) {\r\n                return null;\r\n            }\r\n            if (typeof matchData.blocksString !== 'undefined') {\r\n                matchData.blocks = JSON.parse(matchData.blocksString);\r\n                delete matchData.blocksString;\r\n            }\r\n            return {\r\n                // TODO: add ab test info here and other high level stuff\r\n                data: matchData,\r\n                id: match.id,\r\n                variationId: match.testVariationId || match.variationId || null,\r\n                testVariationId: match.testVariationId || match.variationId || null,\r\n                testVariationName: match.testVariationName || null,\r\n                lastUpdated: match.lastUpdated || null,\r\n            };\r\n        });\r\n        // );\r\n    };\r\n    // TODO: entry id in options\r\n    Builder.prototype.queueGetContent = function (modelName, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // TODO: if query do modelName + query\r\n        var key = options.key ||\r\n            options.alias ||\r\n            // TODO: SDKs only pass entry key when given to them, and never when editing...\r\n            // options.entry ||\r\n            // TODO: this is ugly - instead of multiple of same model with different options are sent\r\n            // say requires key/alias. Or if not perhaps make a reliable hash of the options and use that.\r\n            // TODO: store last user state on last request and if user attributes different now\r\n            // give a warning that need to use keys to request new contente\r\n            // (options &&\r\n            //   Object.keys(options).filter(key => key !== 'model').length &&\r\n            //   JSON.stringify({ model: modelName, ...options, initialContent: undefined })) ||\r\n            modelName;\r\n        var isEditingThisModel = this.editingModel === modelName;\r\n        // TODO: include params in this key........\r\n        var currentObservable = this.observersByKey[key];\r\n        // if (options.query && options.query._id) {\r\n        //   this.flushGetContentQueue([options])\r\n        // }\r\n        if (this.apiKey === 'DEMO' && !this.overrides[key] && !options.initialContent) {\r\n            options.initialContent = [];\r\n        }\r\n        var initialContent = options.initialContent;\r\n        // TODO: refresh option in options\r\n        if (currentObservable && (!currentObservable.value || options.cache)) {\r\n            // TODO: test if this ran, otherwise on 404 some observers may never be called...\r\n            if (currentObservable.value) {\r\n                nextTick(function () {\r\n                    // TODO: return a new observable and only that one fires subscribers, don't refire for existing ones\r\n                    currentObservable.next(currentObservable.value);\r\n                });\r\n            }\r\n            return currentObservable;\r\n        }\r\n        if (isEditingThisModel) {\r\n            if (Builder.isBrowser) {\r\n                parent.postMessage({ type: 'builder.updateContent', data: { options: options } }, '*');\r\n            }\r\n        }\r\n        if (!initialContent /* || isEditingThisModel */) {\r\n            if (!this.getContentQueue) {\r\n                this.getContentQueue = [];\r\n            }\r\n            this.getContentQueue.push((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), { model: modelName, key: key }));\r\n            if (this.getContentQueue && this.getContentQueue.length >= this.contentPerRequest) {\r\n                var queue_1 = this.getContentQueue.slice();\r\n                this.getContentQueue = [];\r\n                nextTick(function () {\r\n                    _this.flushGetContentQueue(false, queue_1);\r\n                });\r\n            }\r\n            else {\r\n                nextTick(function () {\r\n                    _this.flushGetContentQueue();\r\n                });\r\n            }\r\n        }\r\n        var observable = new BehaviorSubject(null);\r\n        this.observersByKey[key] = observable;\r\n        if (options.noEditorUpdates) {\r\n            this.noEditorUpdates[key] = true;\r\n        }\r\n        if (initialContent) {\r\n            nextTick(function () {\r\n                // TODO: need to testModify this I think...?\r\n                observable.next(initialContent);\r\n            });\r\n        }\r\n        return observable;\r\n    };\r\n    // this is needed to satisfy the Angular SDK, which used to rely on the more complex version of `requestUrl`.\r\n    // even though we only use `fetch()` now, we prefer to keep the old behavior and use the `fetch` that comes from\r\n    // the core SDK for consistency\r\n    Builder.prototype.requestUrl = function (url, options) {\r\n        return getFetch()(url, this.addSdkHeaders(options)).then(function (res) { return res.json(); });\r\n    };\r\n    Object.defineProperty(Builder.prototype, \"host\", {\r\n        get: function () {\r\n            switch (this.env) {\r\n                case 'qa':\r\n                    return 'https://qa.builder.io';\r\n                case 'test':\r\n                    return 'https://builder-io-test.web.app';\r\n                case 'fast':\r\n                    return 'https://fast.builder.io';\r\n                case 'cloud':\r\n                    return 'https://cloud.builder.io';\r\n                case 'cdn2':\r\n                    return 'https://cdn2.builder.io';\r\n                case 'cdn-qa':\r\n                    return 'https://cdn-qa.builder.io';\r\n                case 'development':\r\n                case 'dev':\r\n                    return 'http://localhost:5000';\r\n                case 'cdn-prod':\r\n                    return 'https://cdn.builder.io';\r\n                default:\r\n                    return Builder.overrideHost || 'https://cdn.builder.io';\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Builder.prototype.getSdkHeaders = function () {\r\n        if (!Builder.sdkInfo) {\r\n            return {};\r\n        }\r\n        return {\r\n            'X-Builder-SDK': Builder.sdkInfo.name,\r\n            'X-Builder-SDK-GEN': '1',\r\n            'X-Builder-SDK-Version': Builder.sdkInfo.version,\r\n        };\r\n    };\r\n    Builder.prototype.addSdkHeaders = function (fetchOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions), { headers: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions.headers), this.getSdkHeaders()) });\r\n    };\r\n    Builder.prototype.makeFetchApiCall = function (url, requestOptions) {\r\n        return getFetch()(url, this.addSdkHeaders(requestOptions));\r\n    };\r\n    /**\r\n     * Flatten a nested MongoDB query object into a flat object with dot-separated keys.\r\n     * $ keys are not flattened and are left as is.\r\n     *\r\n     * { foo: { bar: { $gt: 5 }}} -> { 'foo.bar': { '$gt': 5 }}\r\n     * { foo: {'bar.id': { $elemMatch: { 'baz.id': { $in: ['abc', 'bcd'] }}}}} -> { 'foo.bar.id': { '$elemMatch': { 'baz.id': { '$in': ['abc', 'bcd'] }}}}\r\n     */\r\n    Builder.prototype.flattenMongoQuery = function (obj, _current, _res) {\r\n        if (_res === void 0) { _res = {}; }\r\n        for (var key in obj) {\r\n            var value = obj[key];\r\n            var newKey = _current ? _current + '.' + key : key;\r\n            if (value &&\r\n                typeof value === 'object' &&\r\n                !Array.isArray(value) &&\r\n                !Object.keys(value).find(function (item) { return item.startsWith('$'); })) {\r\n                this.flattenMongoQuery(value, newKey, _res);\r\n            }\r\n            else {\r\n                _res[newKey] = value;\r\n            }\r\n        }\r\n        return _res;\r\n    };\r\n    Builder.prototype.flushGetContentQueue = function (usePastQueue, useQueue) {\r\n        var _this = this;\r\n        var _a, _b;\r\n        if (usePastQueue === void 0) { usePastQueue = false; }\r\n        if (!this.apiKey) {\r\n            throw new Error(\"Fetching content failed, expected apiKey to be defined instead got: \".concat(this.apiKey));\r\n        }\r\n        if (this.apiVersion) {\r\n            if (!['v1', 'v3'].includes(this.apiVersion)) {\r\n                throw new Error(\"Invalid apiVersion: expected 'v1' or 'v3', received '\".concat(this.apiVersion, \"'\"));\r\n            }\r\n        }\r\n        else {\r\n            this.apiVersion = DEFAULT_API_VERSION;\r\n        }\r\n        if (!usePastQueue && !this.getContentQueue) {\r\n            return;\r\n        }\r\n        var queue = useQueue || (usePastQueue ? this.priorContentQueue : this.getContentQueue) || [];\r\n        // TODO: do this on every request send?\r\n        this.getOverridesFromQueryString();\r\n        var queryParams = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ \r\n            // TODO: way to force a request to be in a separate queue. or just lower queue limit to be 1 by default\r\n            omit: (_a = queue[0].omit) !== null && _a !== void 0 ? _a : 'meta.componentsUsed', apiKey: this.apiKey }, queue[0].options), this.queryOptions);\r\n        if (queue[0].locale) {\r\n            queryParams.locale = queue[0].locale;\r\n        }\r\n        if (queue[0].fields) {\r\n            queryParams.fields = queue[0].fields;\r\n        }\r\n        if (queue[0].format) {\r\n            queryParams.format = queue[0].format;\r\n        }\r\n        if ('noTraverse' in queue[0]) {\r\n            queryParams.noTraverse = queue[0].noTraverse;\r\n        }\r\n        if ('includeUnpublished' in queue[0]) {\r\n            queryParams.includeUnpublished = queue[0].includeUnpublished;\r\n        }\r\n        if (queue[0].sort) {\r\n            queryParams.sort = queue[0].sort;\r\n        }\r\n        var pageQueryParams = (typeof location !== 'undefined'\r\n            ? QueryString.parseDeep(location.search.substr(1))\r\n            : undefined) || {}; // TODO: WHAT about SSR (this.request) ?\r\n        var userAttributes = \r\n        // FIXME: HACK: only checks first in queue for user attributes overrides, should check all\r\n        // TODO: merge user attributes provided here with defaults and current user attiributes (?)\r\n        queue && queue[0].userAttributes\r\n            ? queue[0].userAttributes\r\n            : this.targetContent\r\n                ? this.getUserAttributes()\r\n                : {\r\n                    urlPath: this.getLocation().pathname,\r\n                };\r\n        var fullUrlQueueItem = queue.find(function (item) { return !!item.includeUrl; });\r\n        if (fullUrlQueueItem) {\r\n            var location_1 = this.getLocation();\r\n            if (location_1.origin) {\r\n                queryParams.url = \"\".concat(location_1.origin).concat(location_1.pathname).concat(location_1.search);\r\n            }\r\n        }\r\n        var urlQueueItem = useQueue === null || useQueue === void 0 ? void 0 : useQueue.find(function (item) { return item.url; });\r\n        if (urlQueueItem === null || urlQueueItem === void 0 ? void 0 : urlQueueItem.url) {\r\n            userAttributes.urlPath = urlQueueItem.url.split('?')[0];\r\n        }\r\n        // TODO: merge in the attribute from query string ones\r\n        // TODO: make this an option per component/request\r\n        queryParams.userAttributes = JSON.stringify(userAttributes);\r\n        if (!usePastQueue && !useQueue) {\r\n            this.priorContentQueue = queue;\r\n            this.getContentQueue = null;\r\n        }\r\n        var cachebust = this.cachebust ||\r\n            isIframe ||\r\n            pageQueryParams.cachebust ||\r\n            pageQueryParams['builder.cachebust'];\r\n        if (cachebust || this.env !== 'production') {\r\n            queryParams.cachebust = true;\r\n        }\r\n        if (Builder.isEditing) {\r\n            queryParams.isEditing = true;\r\n        }\r\n        if (this.noCache || this.env !== 'production') {\r\n            queryParams.noCache = true;\r\n        }\r\n        if (size(this.overrides)) {\r\n            for (var key in this.overrides) {\r\n                if (this.overrides.hasOwnProperty(key)) {\r\n                    queryParams[\"overrides.\".concat(key)] = this.overrides[key];\r\n                }\r\n            }\r\n        }\r\n        for (var _i = 0, queue_2 = queue; _i < queue_2.length; _i++) {\r\n            var options = queue_2[_i];\r\n            var format_1 = options.format;\r\n            if (format_1) {\r\n                queryParams.format = format_1;\r\n            }\r\n            // TODO: remove me and make permodel\r\n            if (options.static) {\r\n                queryParams.static = options.static;\r\n            }\r\n            if (options.cachebust) {\r\n                queryParams.cachebust = options.cachebust;\r\n            }\r\n            if (isPositiveNumber(options.cacheSeconds)) {\r\n                queryParams.cacheSeconds = options.cacheSeconds;\r\n            }\r\n            if (isPositiveNumber(options.staleCacheSeconds)) {\r\n                queryParams.staleCacheSeconds = options.staleCacheSeconds;\r\n            }\r\n            if (this.apiEndpoint === 'content') {\r\n                queryParams.includeRefs = true;\r\n            }\r\n            var properties = [\r\n                'prerender',\r\n                'extractCss',\r\n                'limit',\r\n                'offset',\r\n                'query',\r\n                'preview',\r\n                'model',\r\n                'entry',\r\n                'rev',\r\n                'static',\r\n                'includeRefs',\r\n            ];\r\n            for (var _c = 0, properties_1 = properties; _c < properties_1.length; _c++) {\r\n                var key = properties_1[_c];\r\n                var value = options[key];\r\n                if (value !== undefined) {\r\n                    if (this.apiEndpoint === 'query') {\r\n                        queryParams.options = queryParams.options || {};\r\n                        queryParams.options[options.key] = queryParams.options[options.key] || {};\r\n                        queryParams.options[options.key][key] = JSON.stringify(value);\r\n                    }\r\n                    else {\r\n                        queryParams[key] = JSON.stringify(value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.preview && this.previewingModel === ((_b = queue === null || queue === void 0 ? void 0 : queue[0]) === null || _b === void 0 ? void 0 : _b.model)) {\r\n            queryParams.preview = 'true';\r\n        }\r\n        var hasParams = Object.keys(queryParams).length > 0;\r\n        // TODO: option to force dev or qa api here\r\n        var host = this.host;\r\n        var keyNames = queue.map(function (item) { return encodeURIComponent(item.key); }).join(',');\r\n        if (this.overrideParams) {\r\n            var params = omit(QueryString.parse(this.overrideParams), 'apiKey');\r\n            assign(queryParams, params);\r\n        }\r\n        var format = queryParams.format;\r\n        var isApiCallForCodegen = format === 'solid' || format === 'react';\r\n        var isApiCallForCodegenOrQuery = isApiCallForCodegen || this.apiEndpoint === 'query';\r\n        if (this.apiEndpoint === 'content') {\r\n            if (queue[0].query) {\r\n                delete queryParams.query;\r\n                var objectToFlatten = { query: queue[0].query };\r\n                var flattened = this.flattenMongoQuery(objectToFlatten);\r\n                for (var key in flattened) {\r\n                    queryParams[key] = JSON.stringify(flattened[key]);\r\n                }\r\n            }\r\n        }\r\n        var queryStr = QueryString.stringifyDeep(queryParams);\r\n        var fetchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ headers: {} }, queue[0].fetchOptions);\r\n        if (this.authToken) {\r\n            fetchOptions.headers = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions.headers), { Authorization: \"Bearer \".concat(this.authToken) });\r\n        }\r\n        var url;\r\n        if (isApiCallForCodegen) {\r\n            url = \"\".concat(host, \"/api/v1/codegen/\").concat(this.apiKey, \"/\").concat(keyNames);\r\n        }\r\n        else if (this.apiEndpoint === 'query') {\r\n            url = \"\".concat(host, \"/api/v3/query/\").concat(this.apiKey, \"/\").concat(keyNames);\r\n        }\r\n        else {\r\n            url = \"\".concat(host, \"/api/v3/content/\").concat(queue[0].model);\r\n        }\r\n        url = url + (queryParams && hasParams ? \"?\".concat(queryStr) : '');\r\n        var promise = this.makeFetchApiCall(url, fetchOptions)\r\n            .then(function (res) { return res.json(); })\r\n            .then(function (result) {\r\n            for (var _i = 0, queue_3 = queue; _i < queue_3.length; _i++) {\r\n                var options = queue_3[_i];\r\n                var keyName = options.key;\r\n                if (options.model === _this.blockContentLoading && !options.noEditorUpdates) {\r\n                    continue;\r\n                }\r\n                var isEditingThisModel = _this.editingModel === options.model;\r\n                if (isEditingThisModel && Builder.isEditing) {\r\n                    parent.postMessage({ type: 'builder.updateContent', data: { options: options } }, '*');\r\n                    // return;\r\n                }\r\n                var observer = _this.observersByKey[keyName];\r\n                if (!observer) {\r\n                    return;\r\n                }\r\n                var data = isApiCallForCodegenOrQuery ? result[keyName] : result.results;\r\n                var sorted = data; // sortBy(data, item => item.priority);\r\n                if (data) {\r\n                    var testModifiedResults = Builder.isServer\r\n                        ? sorted\r\n                        : _this.processResultsForTests(sorted);\r\n                    observer.next(testModifiedResults);\r\n                }\r\n                else {\r\n                    var search = _this.getLocation().search;\r\n                    if ((search || '').includes('builder.preview=' + options.model)) {\r\n                        var previewData = {\r\n                            id: 'preview',\r\n                            name: 'Preview',\r\n                            data: {},\r\n                        };\r\n                        observer.next([previewData]);\r\n                    }\r\n                    observer.next([]);\r\n                }\r\n            }\r\n        }, function (err) {\r\n            for (var _i = 0, queue_4 = queue; _i < queue_4.length; _i++) {\r\n                var options = queue_4[_i];\r\n                var observer = _this.observersByKey[options.key];\r\n                if (!observer) {\r\n                    return;\r\n                }\r\n                observer.error(err);\r\n            }\r\n        });\r\n        return promise;\r\n    };\r\n    Builder.prototype.processResultsForTests = function (results) {\r\n        var _this = this;\r\n        var _a;\r\n        var mappedResults = results.map(function (item) {\r\n            if (!item.variations) {\r\n                return item;\r\n            }\r\n            var cookieValue = _this.getTestCookie(item.id);\r\n            var cookieVariation = cookieValue === item.id ? item : item.variations[cookieValue];\r\n            if (cookieVariation) {\r\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), { data: cookieVariation.data, variationId: cookieValue, testVariationId: cookieValue, testVariationName: cookieVariation.name });\r\n            }\r\n            if (_this.canTrack && item.variations && size(item.variations)) {\r\n                var n = 0;\r\n                var random = Math.random();\r\n                for (var id in item.variations) {\r\n                    var variation = item.variations[id];\r\n                    var testRatio = variation.testRatio;\r\n                    n += testRatio;\r\n                    if (random < n) {\r\n                        _this.setTestCookie(item.id, variation.id);\r\n                        var variationName = variation.name || (variation.id === item.id ? 'Default variation' : '');\r\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), { data: variation.data, variationId: variation.id, testVariationId: variation.id, variationName: variationName, testVariationName: variationName });\r\n                    }\r\n                }\r\n                _this.setTestCookie(item.id, item.id);\r\n            }\r\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), { variationId: item.id }), (item.variations &&\r\n                size(item.variations) && {\r\n                testVariationId: item.id,\r\n                testVariationName: 'Default variation',\r\n            }));\r\n        });\r\n        if (isIframe) {\r\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({ type: 'builder.contentResults', data: { results: mappedResults } }, '*');\r\n        }\r\n        return mappedResults;\r\n    };\r\n    Builder.prototype.getTestCookie = function (contentId) {\r\n        return this.getCookie(\"\".concat(this.testCookiePrefix, \".\").concat(contentId));\r\n    };\r\n    Builder.prototype.setTestCookie = function (contentId, variationId) {\r\n        if (!this.canTrack) {\r\n            this.cookieQueue.push([contentId, variationId]);\r\n            return;\r\n        }\r\n        // 30 days from now\r\n        var future = new Date();\r\n        future.setDate(future.getDate() + 30);\r\n        return this.setCookie(\"\".concat(this.testCookiePrefix, \".\").concat(contentId), variationId, future);\r\n    };\r\n    Builder.prototype.getCookie = function (name) {\r\n        if (this.cookies) {\r\n            return this.cookies.get(name);\r\n        }\r\n        return Builder.isBrowser && getCookie(name);\r\n    };\r\n    Builder.prototype.setCookie = function (name, value, expires) {\r\n        if (this.cookies && !(Builder.isServer && Builder.isStatic)) {\r\n            return this.cookies.set(name, value, {\r\n                expires: expires,\r\n                secure: this.getLocation().protocol === 'https:',\r\n            });\r\n        }\r\n        return Builder.isBrowser && setCookie(name, value, expires);\r\n    };\r\n    Builder.prototype.getContent = function (modelName, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (!this.apiKey) {\r\n            throw new Error(\"Fetching content from model \".concat(modelName, \" failed, expected apiKey to be defined instead got: \").concat(this.apiKey));\r\n        }\r\n        return this.queueGetContent(modelName, options);\r\n    };\r\n    Builder.prototype.getAll = function (modelName, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var instance = this;\r\n        if (!Builder.isBrowser) {\r\n            instance = new Builder(options.apiKey || this.apiKey, options.req, options.res, false, options.authToken || this.authToken, options.apiVersion || this.apiVersion);\r\n            instance.setUserAttributes(this.getUserAttributes());\r\n        }\r\n        else {\r\n            // NOTE: All these are when .init is not called and the customer\r\n            // directly calls .get on the singleton instance of Builder\r\n            if (options.apiKey && !this.apiKey) {\r\n                this.apiKey = options.apiKey;\r\n            }\r\n            if (options.authToken && !this.authToken) {\r\n                this.authToken = options.authToken;\r\n            }\r\n            if (options.apiVersion && !this.apiVersion) {\r\n                this.apiVersion = options.apiVersion;\r\n            }\r\n        }\r\n        // Set noTraverse=true if NOT already passed by user, for query performance\r\n        if (!('noTraverse' in options)) {\r\n            options.noTraverse = true;\r\n        }\r\n        return instance\r\n            .getContent(modelName, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ limit: 30 }, options), { key: options.key ||\r\n                // Make the key include all options, so we don't reuse cache for the same content fetched\r\n                // with different options\r\n                Builder.isBrowser\r\n                ? \"\".concat(modelName, \":\").concat(hash_sum__WEBPACK_IMPORTED_MODULE_0___default()(omit(options, 'initialContent', 'req', 'res')))\r\n                : undefined }))\r\n            .promise();\r\n    };\r\n    Builder.VERSION = SDK_VERSION;\r\n    Builder.components = [];\r\n    /**\r\n     * Makes it so that a/b tests generate code like {@link\r\n     * https://www.builder.io/blog/high-performance-no-code#__next:~:text=Static%20generated%20A%2FB%20testing}\r\n     * instead of the old way where we render only one test group at a time on the\r\n     * server. This is the preferred/better way not and we should ultimately make it\r\n     * the default\r\n     */\r\n    Builder.isStatic = true;\r\n    Builder.animator = new Animator();\r\n    Builder.nextTick = nextTick;\r\n    Builder.throttle = throttle;\r\n    Builder.editors = [];\r\n    Builder.trustedHosts = [\r\n        '*.beta.builder.io',\r\n        'beta.builder.io',\r\n        'builder.io',\r\n        'localhost',\r\n        'qa.builder.io',\r\n    ];\r\n    Builder.plugins = [];\r\n    Builder.actions = [];\r\n    Builder.registry = {};\r\n    Builder.attributesCookieName = 'builder.userAttributes';\r\n    Builder.registryChange = new BehaviorSubject({});\r\n    Builder._editingPage = false;\r\n    Builder.isIframe = isIframe;\r\n    Builder.isBrowser = isBrowser;\r\n    Builder.isReactNative = isReactNative;\r\n    Builder.isServer = !isBrowser && !isReactNative;\r\n    Builder.previewingModel = Builder.isBrowser && getQueryParam(location.href, 'builder.preview');\r\n    Builder.settings = {};\r\n    Builder.settingsChange = new BehaviorSubject({});\r\n    // TODO: this is quick and dirty, do better implementation later. Also can be unreliable\r\n    // if page 301s etc. Use a query param instead? also could have issues with redirects. Injecting var could\r\n    // work but is async...\r\n    Builder.isEditing = Boolean(isIframe &&\r\n        ((document.referrer && document.referrer.match(/builder\\.io|localhost:1234/)) ||\r\n            location.search.indexOf('builder.frameEditing=') !== -1));\r\n    Builder.isPreviewing = Boolean(isBrowser &&\r\n        (location.search.indexOf('builder.preview=') !== -1 ||\r\n            location.search.indexOf('builder.frameEditing=') !== -1));\r\n    Builder.isReact = false;\r\n    Builder.sdkInfo = undefined;\r\n    Builder.overrideUserAttributes = {};\r\n    return Builder;\r\n}());\n\nvar builder = new Builder(null, undefined, undefined, true);\r\nBuilder.singletonInstance = builder;\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@builder.io/sdk/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@builder.io/sdk/node_modules/tslib/tslib.es6.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@builder.io/sdk/node_modules/tslib/tslib.es6.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@builder.io/sdk/node_modules/tslib/tslib.es6.js\n");

/***/ })

};
;